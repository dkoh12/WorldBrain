{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: AI-Powered Creative Studio Platform\n\n## Design Approach Documentation\n**Selected Approach**: Reference-Based (Experience-Focused)\n**Primary Reference**: Figma + Notion hybrid aesthetic with creative industry polish\n**Justification**: This ambitious creative platform requires strong visual appeal and emotional engagement to attract creative professionals while maintaining the sophisticated utility expected in professional tools.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light Mode: 245 15% 12% (deep charcoal) for primary text/elements\n- Dark Mode: 220 25% 95% for primary elements\n**Brand Accent**: 260 85% 65% (vibrant purple) - sparingly used for key CTAs and creative elements\n**Background Gradients**: Subtle diagonal gradients from 245 8% 97% to 240 12% 94% (light mode), reversed for dark mode\n\n### Typography\n**Primary**: Inter (Google Fonts) - clean, modern sans-serif for UI and body text\n**Display**: Space Grotesk (Google Fonts) - distinctive headings and creative section titles\n**Sizes**: text-sm, text-base, text-lg, text-xl, text-2xl, text-4xl\n\n### Layout System\n**Spacing Units**: Tailwind units of 2, 4, 8, 12, 16 (p-2, m-4, gap-8, py-12, px-16)\n**Grid**: 12-column responsive grid with generous gutters\n**Containers**: max-w-7xl with auto margins for main content areas\n\n### Component Library\n**Navigation**: Top navigation bar with logo left, main nav center, user actions right\n**Cards**: Elevated cards with subtle shadows (shadow-sm, shadow-lg for hover)\n**Forms**: Rounded inputs with focus rings, floating labels for complex forms\n**Buttons**: Primary (filled purple), secondary (outline), ghost for subtle actions\n**Data Display**: Clean tables, progress bars, status indicators\n**Creative Tools**: Canvas-style interfaces, toolbars, property panels\n\n### Visual Treatment\n**Creative Freedom Elements**:\n- Hero section with dynamic gradient overlay (260 85% 65% to 240 70% 45%)\n- Feature cards with subtle hover elevations\n- Tool interfaces with dark themes and neon accent touches\n- Gallery layouts with masonry-style arrangements\n\n**Professional Restraint**:\n- Minimal animation - subtle scale on hover, smooth transitions only\n- Consistent 8px border radius throughout\n- Strategic use of the purple accent (max 10% of interface elements)\n- Clean whitespace and breathing room between sections\n\n### Images\n**Large Hero Image**: Yes - showcasing AI-generated artwork or creative process\n**Feature Images**: Screenshots of creative tools in action, AI-generated samples\n**User Content**: Gallery sections displaying user creations and portfolio pieces\n**Placement**: Hero background, feature section cards, testimonial avatars, tool preview screenshots\n\nThe design balances creative inspiration with professional functionality, using sophisticated gradients and strategic color placement while maintaining the clean, efficient interface expected by creative professionals.","size_bytes":2946},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CreativeAI Studio - AI-Powered Creative Platform\n\n## Overview\n\nCreativeAI Studio is a comprehensive creative platform that combines multiple AI-powered creative tools into a unified workspace. The platform integrates 3D modeling, music production, video editing, and code development with real-time collaboration features and AI assistance. Built with React and Express, it provides a modern web-based creative environment designed for professional creators and teams.\n\n### Recent Updates (September 16, 2025)\n- **Added object rotation controls**: Shift+drag to rotate objects interactively, plus manual rotation inputs in Properties panel\n- **Added Ctrl+Drag object movement**: Hold Ctrl and drag any object in the 3D scene to move it around freely\n- **Fixed spatial positioning bug**: AI-generated objects now properly position according to spatial keywords instead of overlapping\n- **Added AI prompt editing**: Objects remember their original AI prompts and can be edited in the Properties panel\n- **Enhanced 3D object management**: Improved Properties panel with AI prompt editing field for AI-generated objects\n- **Improved position calculation**: Fixed fallback object positioning to ensure proper spatial distribution\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built using React with TypeScript and follows a component-based architecture:\n- **React Router**: Uses Wouter for lightweight client-side routing\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **UI Framework**: shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design system including light/dark mode support\n- **Component Structure**: Modular components organized by feature (Creative modules, AI assistant, collaboration tools)\n\n### Backend Architecture\nThe server follows a Node.js/Express architecture with TypeScript:\n- **Express.js**: RESTful API server with middleware for request logging and error handling\n- **Database Layer**: Drizzle ORM with PostgreSQL support for type-safe database operations\n- **Storage Interface**: Abstracted storage layer with both memory and database implementations\n- **Development Setup**: Vite integration for hot module replacement and development tooling\n\n### Design System\nImplements a sophisticated design approach inspired by Figma and Notion:\n- **Color Scheme**: Neutral-based palette with purple accent (260 85% 65%)\n- **Typography**: Inter for UI text and Space Grotesk for display headings\n- **Component Variants**: Consistent button, card, and form styling with hover states\n- **Responsive Layout**: 12-column grid system with mobile-first approach\n\n### Creative Tools Integration\nThe platform provides four main creative modules:\n- **3D Designer**: AI-powered 3D modeling and rendering capabilities\n- **Music Studio**: Intelligent music composition and production tools\n- **Video Editor**: Professional video editing with AI assistance\n- **Code Editor**: Monaco-based code editor with AI copilot features\n\n### AI Integration\nBuilt around Replit's AI infrastructure:\n- **AI Assistant**: Context-aware suggestions and creative guidance\n- **Code Generation**: AI-powered code completion and generation\n- **Creative Suggestions**: Tool-specific AI recommendations\n- **Real-time Processing**: Asynchronous AI response handling with loading states\n\n### Collaboration Features\nReal-time collaboration system supporting:\n- **Multi-user Sessions**: Shared creative workspaces\n- **Activity Tracking**: Real-time user activity and tool usage monitoring\n- **Communication**: Integrated chat and video calling capabilities\n- **Project Sharing**: Collaborative project management and version control\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18+ with React DOM for UI rendering\n- **TypeScript**: Full TypeScript support for type safety\n- **Vite**: Build tool and development server with HMR\n- **Express.js**: Node.js web framework for API server\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL\n- **@neondatabase/serverless**: Serverless PostgreSQL connection\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n### UI and Design Libraries\n- **Radix UI**: Headless UI components for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library\n- **class-variance-authority**: Variant-based component styling\n- **Lucide React**: Icon library\n\n### Development Tools\n- **Monaco Editor**: VS Code editor integration for code editing\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Wouter**: Lightweight routing library\n\n### AI and External Services\n- **Anthropic SDK**: AI integration for creative assistance\n- **Replit AI**: Built-in AI capabilities for the platform\n- **Date-fns**: Date manipulation and formatting\n\n### Development and Build Tools\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n- **TSX**: TypeScript execution environment for development","size_bytes":5245},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"Space Grotesk\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4118},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve attached_assets directory for generated images\nimport path from \"path\";\nconst attachedAssetsPath = path.resolve(import.meta.dirname, \"..\", \"attached_assets\");\napp.use(\"/attached_assets\", express.static(attachedAssetsPath));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2300},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertSharedSnapshotSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  // Share endpoints\n  app.post(\"/api/share\", async (req, res) => {\n    try {\n      const validatedData = insertSharedSnapshotSchema.parse(req.body);\n      const snapshot = await storage.createSharedSnapshot(validatedData);\n      const shareUrl = `${req.protocol}://${req.get('host')}/share/${snapshot.id}`;\n      return res.json({ \n        success: true, \n        id: snapshot.id, \n        url: shareUrl \n      });\n    } catch (error) {\n      console.error('Error creating shared snapshot:', error);\n      return res.status(400).json({ \n        success: false, \n        error: 'Invalid data provided' \n      });\n    }\n  });\n\n  app.get(\"/api/share/:id\", async (req, res) => {\n    try {\n      const snapshot = await storage.getSharedSnapshot(req.params.id);\n      if (!snapshot) {\n        return res.status(404).json({ \n          success: false, \n          error: 'Snapshot not found' \n        });\n      }\n      return res.json({ \n        success: true, \n        snapshot \n      });\n    } catch (error) {\n      console.error('Error retrieving shared snapshot:', error);\n      return res.status(500).json({ \n        success: false, \n        error: 'Server error' \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":1719},"server/storage.ts":{"content":"import { type User, type InsertUser, type SharedSnapshot, type InsertSharedSnapshot } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Shared snapshots\n  getSharedSnapshot(id: string): Promise<SharedSnapshot | undefined>;\n  createSharedSnapshot(snapshot: InsertSharedSnapshot): Promise<SharedSnapshot>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private sharedSnapshots: Map<string, SharedSnapshot>;\n\n  constructor() {\n    this.users = new Map();\n    this.sharedSnapshots = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getSharedSnapshot(id: string): Promise<SharedSnapshot | undefined> {\n    return this.sharedSnapshots.get(id);\n  }\n\n  async createSharedSnapshot(insertSnapshot: InsertSharedSnapshot): Promise<SharedSnapshot> {\n    const id = randomUUID();\n    const snapshot: SharedSnapshot = {\n      ...insertSnapshot,\n      id,\n      createdAt: Date.now(),\n    };\n    this.sharedSnapshots.set(id, snapshot);\n    return snapshot;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1737},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, bigint } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Shared Snapshots for project sharing\nexport const sharedSnapshots = pgTable(\"shared_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tool: text(\"tool\").notNull(), // 'code' | '3d' | 'music' | 'video'\n  name: text(\"name\").notNull(),\n  data: jsonb(\"data\").notNull(), // Project data\n  createdAt: bigint(\"created_at\", { mode: \"number\" }).notNull().default(sql`extract(epoch from now()) * 1000`),\n});\n\nexport const insertSharedSnapshotSchema = createInsertSchema(sharedSnapshots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSharedSnapshot = z.infer<typeof insertSharedSnapshotSchema>;\nexport type SharedSnapshot = typeof sharedSnapshots.$inferSelect;\n","size_bytes":1300},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Header from \"@/components/Header\";\nimport Home from \"@/pages/Home\";\nimport Studio from \"@/pages/Studio\";\nimport Projects from \"@/pages/Projects\";\nimport Gallery from \"@/pages/Gallery\";\nimport Learn from \"@/pages/Learn\";\nimport Profile from \"@/pages/Profile\";\nimport CodeStudio from \"@/pages/CodeStudio\";\nimport ThreeDStudio from \"@/pages/ThreeDStudio\";\nimport MusicStudio from \"@/pages/MusicStudio\";\nimport VideoEditor from \"@/pages/VideoEditor\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/studio\" component={Studio} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/gallery\" component={Gallery} />\n      <Route path=\"/learn\" component={Learn} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/code\" component={CodeStudio} />\n      <Route path=\"/3d\" component={ThreeDStudio} />\n      <Route path=\"/music\" component={MusicStudio} />\n      <Route path=\"/video\" component={VideoEditor} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Header />\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1694},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 240 12% 97%;\n\n  --foreground: 245 15% 12%;\n\n  --border: 240 8% 88%;\n\n  --card: 240 10% 95%;\n\n  --card-foreground: 245 15% 12%;\n\n  --card-border: 240 8% 90%;\n\n  --sidebar: 240 8% 92%;\n\n  --sidebar-foreground: 245 15% 12%;\n\n  --sidebar-border: 240 8% 86%;\n\n  --sidebar-primary: 260 85% 65%;\n\n  --sidebar-primary-foreground: 245 8% 98%;\n\n  --sidebar-accent: 240 10% 88%;\n\n  --sidebar-accent-foreground: 245 15% 12%;\n\n  --sidebar-ring: 260 85% 65%;\n\n  --popover: 240 8% 90%;\n\n  --popover-foreground: 245 15% 12%;\n\n  --popover-border: 240 8% 84%;\n\n  --primary: 260 85% 65%;\n\n  --primary-foreground: 245 8% 98%;\n\n  --secondary: 240 8% 88%;\n\n  --secondary-foreground: 245 15% 12%;\n\n  --muted: 240 6% 91%;\n\n  --muted-foreground: 245 10% 35%;\n\n  --accent: 240 12% 89%;\n\n  --accent-foreground: 245 15% 12%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 8% 98%;\n\n  --input: 240 8% 82%;\n  --ring: 260 85% 65%;\n  --chart-1: 260 85% 65%;\n  --chart-2: 220 70% 60%;\n  --chart-3: 280 80% 70%;\n  --chart-4: 240 70% 65%;\n  --chart-5: 200 75% 58%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(240 8% 84% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(240 8% 84% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(240 8% 84% / 0.00), 0px 1px 2px -1px hsl(240 8% 84% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(240 8% 84% / 0.00), 0px 1px 2px -1px hsl(240 8% 84% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(240 8% 84% / 0.00), 0px 2px 4px -1px hsl(240 8% 84% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(240 8% 84% / 0.00), 0px 4px 6px -1px hsl(240 8% 84% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(240 8% 84% / 0.00), 0px 8px 10px -1px hsl(240 8% 84% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(240 8% 84% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 245 8% 8%;\n\n  --foreground: 220 25% 95%;\n\n  --border: 245 8% 18%;\n\n  --card: 245 6% 12%;\n\n  --card-foreground: 220 25% 95%;\n\n  --card-border: 245 6% 16%;\n\n  --sidebar: 245 6% 10%;\n\n  --sidebar-foreground: 220 25% 95%;\n\n  --sidebar-border: 245 6% 14%;\n\n  --sidebar-primary: 260 85% 65%;\n\n  --sidebar-primary-foreground: 245 8% 98%;\n\n  --sidebar-accent: 245 6% 16%;\n\n  --sidebar-accent-foreground: 220 25% 95%;\n\n  --sidebar-ring: 260 85% 65%;\n\n  --popover: 245 6% 14%;\n\n  --popover-foreground: 220 25% 95%;\n\n  --popover-border: 245 6% 18%;\n\n  --primary: 260 85% 65%;\n\n  --primary-foreground: 245 8% 98%;\n\n  --secondary: 245 6% 16%;\n\n  --secondary-foreground: 220 25% 95%;\n\n  --muted: 245 4% 15%;\n\n  --muted-foreground: 220 15% 65%;\n\n  --accent: 245 8% 18%;\n\n  --accent-foreground: 220 25% 95%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 8% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 245 6% 22%;\n  --ring: 260 85% 65%;\n  --chart-1: 260 85% 65%;\n  --chart-2: 220 70% 60%;\n  --chart-3: 280 80% 70%;\n  --chart-4: 240 70% 65%;\n  --chart-5: 200 75% 58%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(245 8% 4% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(245 8% 4% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(245 8% 4% / 0.00), 0px 1px 2px -1px hsl(245 8% 4% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(245 8% 4% / 0.00), 0px 1px 2px -1px hsl(245 8% 4% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(245 8% 4% / 0.00), 0px 2px 4px -1px hsl(245 8% 4% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(245 8% 4% / 0.00), 0px 4px 6px -1px hsl(245 8% 4% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(245 8% 4% / 0.00), 0px 8px 10px -1px hsl(245 8% 4% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(245 8% 4% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9997},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIAssistant.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Bot, Send, Sparkles, Lightbulb, Palette, Code2, Music, Video } from \"lucide-react\";\nimport { replitAI } from \"@/lib/replit-ai\";\n\ninterface Suggestion {\n  id: number;\n  type: 'creative' | 'technical' | 'optimization';\n  icon: any;\n  title: string;\n  description: string;\n  category: string;\n}\n\nexport default function AIAssistant() {\n  const [message, setMessage] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [currentSuggestions, setCurrentSuggestions] = useState<string[]>([]);\n  \n  const suggestions: Suggestion[] = [\n    {\n      id: 1,\n      type: 'creative',\n      icon: Palette,\n      title: \"Color Harmony Enhancement\",\n      description: \"Your 3D model could benefit from a complementary color scheme. Try adding warm oranges to balance the cool blues.\",\n      category: \"3D Design\"\n    },\n    {\n      id: 2,\n      type: 'technical',\n      icon: Music,\n      title: \"Audio Optimization\",\n      description: \"Consider adding a subtle reverb to the melody line around measure 16 to create more spatial depth.\",\n      category: \"Music\"\n    },\n    {\n      id: 3,\n      type: 'optimization',\n      icon: Code2,\n      title: \"Code Efficiency\",\n      description: \"Your render loop could be optimized by implementing object pooling for particle systems.\",\n      category: \"Code\"\n    },\n    {\n      id: 4,\n      type: 'creative',\n      icon: Video,\n      title: \"Transition Suggestion\",\n      description: \"A subtle crossfade between scenes 3 and 4 would enhance the narrative flow.\",\n      category: \"Video\"\n    }\n  ];\n\n  const handleSendMessage = async () => {\n    if (!message.trim()) return;\n    \n    setIsProcessing(true);\n    console.log('Sending message to Replit AI:', message);\n    \n    try {\n      const response = await replitAI.generateResponse(message, {\n        tool: \"Creative Studio\",\n        project: \"AI Creative Platform\", \n        currentWork: \"Building creative tools\"\n      });\n      \n      setAiResponse(response.content);\n      if (response.suggestions) {\n        setCurrentSuggestions(response.suggestions);\n      }\n      setMessage(\"\");\n      console.log('Replit AI response received:', response.content);\n    } catch (error) {\n      console.error('AI response error:', error);\n      setAiResponse(\"I'm having trouble connecting right now. Please try again!\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: Suggestion) => {\n    console.log('AI suggestion clicked:', suggestion.title);\n    setMessage(`Tell me more about: ${suggestion.title}`);\n  };\n\n  const handleAnalyzeProject = async () => {\n    setIsProcessing(true);\n    try {\n      const response = await replitAI.generateCreativeSuggestions(\"Creative Studio\", \"Multi-tool platform\");\n      setAiResponse(response.content);\n      if (response.suggestions) {\n        setCurrentSuggestions(response.suggestions);\n      }\n    } catch (error) {\n      console.error('Analysis error:', error);\n      setAiResponse(\"Sorry, I'm having trouble analyzing right now. Please try again!\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleGenerateIdeas = async () => {\n    setIsProcessing(true);\n    try {\n      const response = await replitAI.generateResponse(\"Generate creative ideas for my current project\", {\n        tool: \"Creative Studio\",\n        project: \"AI Creative Platform\",\n        currentWork: \"Building innovative tools\"\n      });\n      setAiResponse(response.content);\n      if (response.suggestions) {\n        setCurrentSuggestions(response.suggestions);\n      }\n    } catch (error) {\n      console.error('Idea generation error:', error);\n      setAiResponse(\"Sorry, I'm having trouble generating ideas right now. Please try again!\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch(type) {\n      case 'creative': return 'bg-purple-500';\n      case 'technical': return 'bg-blue-500';\n      case 'optimization': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          AI Assistant\n          <Badge className=\"ml-auto bg-green-500/10 text-green-600 dark:text-green-400\" data-testid=\"badge-ai-status\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\" />\n            Active\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col gap-4\">\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"text-xs\" \n            onClick={handleAnalyzeProject}\n            disabled={isProcessing}\n            data-testid=\"button-analyze-project\"\n          >\n            <Sparkles className=\"w-3 h-3 mr-1\" />\n            Analyze Project\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"text-xs\"\n            onClick={handleGenerateIdeas}\n            disabled={isProcessing}\n            data-testid=\"button-generate-ideas\"\n          >\n            <Lightbulb className=\"w-3 h-3 mr-1\" />\n            Generate Ideas\n          </Button>\n        </div>\n\n        {/* AI Response Display */}\n        {aiResponse && (\n          <div className=\"p-3 bg-primary/5 rounded-lg border border-primary/10\">\n            <div className=\"flex items-start gap-2 mb-2\">\n              <div className=\"w-6 h-6 bg-primary rounded-md flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"w-3 h-3 text-primary-foreground\" />\n              </div>\n              <h4 className=\"text-sm font-medium\">Replit AI</h4>\n            </div>\n            <p className=\"text-sm text-foreground leading-relaxed mb-3\">{aiResponse}</p>\n            \n            {/* Dynamic AI Suggestions */}\n            {currentSuggestions.length > 0 && (\n              <div className=\"space-y-2\">\n                <h5 className=\"text-xs font-medium text-muted-foreground\">AI Suggestions:</h5>\n                <div className=\"flex flex-wrap gap-1\">\n                  {currentSuggestions.map((suggestion, index) => (\n                    <Badge \n                      key={index}\n                      variant=\"outline\" \n                      className=\"text-xs cursor-pointer hover-elevate\"\n                      onClick={() => setMessage(suggestion)}\n                      data-testid={`ai-suggestion-${index}`}\n                    >\n                      {suggestion}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* AI Suggestions */}\n        <div className=\"flex-1 space-y-3 overflow-y-auto max-h-64\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">Smart Suggestions</h4>\n          {suggestions.map((suggestion) => {\n            const IconComponent = suggestion.icon;\n            return (\n              <div \n                key={suggestion.id}\n                className=\"p-3 bg-muted/30 rounded-lg hover-elevate cursor-pointer transition-all\"\n                onClick={() => handleSuggestionClick(suggestion)}\n                data-testid={`suggestion-${suggestion.id}`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className={`w-6 h-6 ${getTypeColor(suggestion.type)} rounded-md flex items-center justify-center flex-shrink-0`}>\n                    <IconComponent className=\"w-3 h-3 text-white\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h5 className=\"text-sm font-medium truncate\">{suggestion.title}</h5>\n                      <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${suggestion.category.toLowerCase()}`}>\n                        {suggestion.category}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                      {suggestion.description}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Chat Input */}\n        <div className=\"space-y-2\">\n          <Textarea \n            placeholder=\"Ask AI anything about your creative work...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleSendMessage();\n              }\n            }}\n            className=\"min-h-[80px] resize-none text-sm\"\n            data-testid=\"textarea-ai-chat\"\n          />\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-xs text-muted-foreground\">\n              {isProcessing ? \"Replit AI is thinking...\" : \"Press Enter to send\"}\n            </span>\n            <Button \n              size=\"sm\"\n              onClick={handleSendMessage}\n              disabled={isProcessing || !message.trim()}\n              data-testid=\"button-send-message\"\n            >\n              {isProcessing ? (\n                <div className=\"w-3 h-3 border border-primary border-t-transparent rounded-full animate-spin\" />\n              ) : (\n                <Send className=\"w-3 h-3\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10240},"client/src/components/CodeEditor.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { projectManager } from \"@/lib/project-manager\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Editor } from \"@monaco-editor/react\";\nimport { replitAI } from \"@/lib/replit-ai\";\nimport { buildHtmlRunner } from \"@/lib/utils/export-utils\";\nimport TerminalPanel from \"@/components/TerminalPanel\";\nimport { JavaScriptRunner } from \"@/lib/runners/jsRunner\";\nimport { PythonRunner } from \"@/lib/runners/pythonRunner\";\nimport { \n  Play, \n  Save, \n  Download, \n  Share2, \n  Settings, \n  Bot, \n  Lightbulb, \n  Bug, \n  Sparkles,\n  FileText,\n  FolderOpen,\n  Plus,\n  ChevronLeft,\n  ChevronRight,\n  AlertTriangle\n} from \"lucide-react\";\n\ninterface CodeFile {\n  id: string;\n  name: string;\n  language: string;\n  content: string;\n}\n\ninterface LanguagePreset {\n  extension: string;\n  template: string;\n  defaultName: string;\n}\n\nconst languagePresets: Record<string, LanguagePreset> = {\n  javascript: {\n    extension: 'js',\n    template: `// Welcome to AI-Powered Code Editor\n// Ask AI for help, generate functions, or debug your code!\n\nfunction createAIAssistant() {\n  console.log(\"Building amazing things with AI!\");\n  \n  // TODO: Add your creative code here\n  return \"Ready to create!\";\n}\n\ncreateAIAssistant();`,\n    defaultName: 'main'\n  },\n  typescript: {\n    extension: 'ts',\n    template: `// Welcome to AI-Powered TypeScript Editor\n// Strongly typed code with AI assistance!\n\ninterface AIAssistant {\n  name: string;\n  capabilities: string[];\n}\n\nfunction createAIAssistant(): AIAssistant {\n  console.log(\"Building amazing things with TypeScript!\");\n  \n  return {\n    name: \"AI Creative Assistant\",\n    capabilities: [\"code generation\", \"debugging\", \"optimization\"]\n  };\n}\n\nconst assistant = createAIAssistant();\nconsole.log(assistant);`,\n    defaultName: 'main'\n  },\n  python: {\n    extension: 'py',\n    template: `# Welcome to AI-Powered Python Editor\n# Build amazing things with Python and AI!\n\ndef create_ai_assistant():\n    print(\"Building amazing things with Python!\")\n    \n    # TODO: Add your creative code here\n    return \"Ready to create!\"\n\nif __name__ == \"__main__\":\n    result = create_ai_assistant()\n    print(result)`,\n    defaultName: 'main'\n  },\n  html: {\n    extension: 'html',\n    template: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Creative Studio</title>\n    <style>\n        body {\n            font-family: 'Inter', sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: #333;\n            padding: 2rem;\n        }\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Welcome to AI Creative Studio</h1>\n        <p>Build amazing web experiences with AI assistance!</p>\n    </div>\n</body>\n</html>`,\n    defaultName: 'index'\n  },\n  css: {\n    extension: 'css',\n    template: `/* AI-Generated Styles */\nbody {\n  font-family: 'Inter', sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: #333;\n  margin: 0;\n  padding: 0;\n}\n\n.ai-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.ai-card {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 12px;\n  padding: 2rem;\n  margin: 1rem 0;\n}`,\n    defaultName: 'styles'\n  }\n};\n\nexport default function CodeEditor() {\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [showTerminal, setShowTerminal] = useState(false);\n  const [isCodeRunning, setIsCodeRunning] = useState(false);\n  const [htmlOutput, setHtmlOutput] = useState<string>(\"\");\n  const [showFilesPanel, setShowFilesPanel] = useState(true);\n  const [showAssistantPanel, setShowAssistantPanel] = useState(true);\n  const [showLanguageConfirmation, setShowLanguageConfirmation] = useState(false);\n  const [pendingLanguageChange, setPendingLanguageChange] = useState<{ newLanguage: string; currentLanguage: string } | null>(null);\n  const editorRef = useRef<any>(null);\n  const jsRunner = useRef<JavaScriptRunner>(new JavaScriptRunner());\n  const pythonRunner = useRef<PythonRunner>(new PythonRunner());\n  \n  // Load files from current project or use defaults\n  const [files, setFiles] = useState<CodeFile[]>(() => {\n    const currentProject = projectManager.getCurrentProject();\n    \n    if (currentProject && currentProject.data.code) {\n      return currentProject.data.code;\n    }\n    \n    // Fall back to localStorage for backward compatibility\n    const saved = localStorage.getItem('codeEditor_files');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch {\n        // Fall back to defaults if parsing fails\n      }\n    }\n    \n    return [\n      {\n        id: \"main\",\n        name: \"main.js\",\n        language: \"javascript\",\n        content: `// Welcome to AI-Powered Code Editor\n// Ask AI for help, generate functions, or debug your code!\n\nfunction createAIAssistant() {\n  console.log(\"Building amazing things with AI!\");\n  \n  // TODO: Add your creative code here\n  return \"Ready to create!\";\n}\n\ncreateAIAssistant();`\n      },\n      {\n        id: \"styles\",\n        name: \"styles.css\", \n        language: \"css\",\n        content: `/* AI-Generated Styles */\nbody {\n  font-family: 'Inter', sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: #333;\n}\n\n.ai-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}`\n      }\n    ];\n  });\n\n  // Set active file to first available file\n  const [activeFile, setActiveFile] = useState<string>(() => {\n    return files.length > 0 ? files[0].id : \"main\";\n  });\n\n  // Monitor running status\n  useEffect(() => {\n    const checkRunningStatus = () => {\n      const jsRunning = jsRunner.current.isCodeRunning();\n      const pythonRunning = pythonRunner.current.isCodeRunning();\n      setIsCodeRunning(jsRunning || pythonRunning);\n    };\n\n    const interval = setInterval(checkRunningStatus, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  const activeFileData = files.find(f => f.id === activeFile);\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n    \n    // Configure Monaco for better AI experience\n    monaco.editor.defineTheme('ai-theme', {\n      base: 'vs-dark',\n      inherit: true,\n      rules: [\n        { token: 'comment', foreground: '6A737D', fontStyle: 'italic' },\n        { token: 'keyword', foreground: '79C0FF' },\n        { token: 'string', foreground: 'A5D6FF' },\n      ],\n      colors: {\n        'editor.background': '#0D1117',\n        'editor.foreground': '#F0F6FC',\n      }\n    });\n    \n    monaco.editor.setTheme('ai-theme');\n  };\n\n  const handleCodeChange = (value: string | undefined) => {\n    if (!value || !activeFileData) return;\n    \n    const updatedFiles = files.map(file => \n      file.id === activeFile \n        ? { ...file, content: value }\n        : file\n    );\n    \n    setFiles(updatedFiles);\n    \n    // Save to current project and localStorage (auto-save)\n    setTimeout(() => {\n      // Save to localStorage for backward compatibility\n      localStorage.setItem('codeEditor_files', JSON.stringify(updatedFiles));\n      \n      // Save to current project if one exists\n      const currentProjectId = projectManager.getCurrentProjectId();\n      if (currentProjectId) {\n        projectManager.updateProjectToolData(currentProjectId, 'code', updatedFiles);\n      }\n    }, 1000);\n  };\n\n  const handleRunCode = async () => {\n    if (!activeFileData) return;\n    \n    // Show terminal if not visible\n    if (!showTerminal) {\n      setShowTerminal(true);\n    }\n    \n    const language = activeFileData.language.toLowerCase();\n    \n    try {\n      // Clear HTML output\n      setHtmlOutput(\"\");\n      \n      switch (language) {\n        case 'javascript':\n        case 'js':\n          await jsRunner.current.runCode(activeFileData.content);\n          break;\n          \n        case 'typescript':\n        case 'ts':\n          // For TypeScript, we'll transpile to JavaScript (simplified approach)\n          setAiSuggestion(\"TypeScript execution: Converting to JavaScript...\");\n          // Remove type annotations (basic approach)\n          const jsCode = activeFileData.content.replace(/:\\s*\\w+/g, '');\n          await jsRunner.current.runCode(jsCode);\n          break;\n          \n        case 'python':\n        case 'py':\n          await pythonRunner.current.runCode(activeFileData.content);\n          break;\n          \n        case 'html':\n        case 'css':\n          // For HTML/CSS, generate output for the webview\n          setHtmlOutput(buildHtmlRunner(files.map(f => ({\n            name: f.name,\n            content: f.content,\n            language: f.language\n          }))));\n          if ((window as any).writeToTerminal) {\n            (window as any).writeToTerminal('$ Rendering HTML/CSS output...', 'info');\n            (window as any).writeToTerminal('Output rendered in Output tab', 'stdout');\n            (window as any).setTerminalExitCode(0, 100);\n            (window as any).writePrompt();\n          }\n          break;\n          \n        default:\n          setAiSuggestion(`Code execution for ${language} is not yet supported in the browser environment. \n          \nThe AI Code Editor currently supports running:\n• JavaScript/TypeScript (transpiled)\n• Python (via WebAssembly)\n• HTML/CSS (rendered output)\n\nTry creating a web-based version of your ${language} code, or use the AI Assistant to help convert it to a supported language!`);\n          break;\n      }\n    } catch (error) {\n      console.error('Code execution error:', error);\n      if ((window as any).writeToTerminal) {\n        (window as any).writeToTerminal(`Execution failed: ${error}`, 'stderr');\n      }\n    }\n  };\n\n  const handleStopCode = () => {\n    jsRunner.current.stop();\n    pythonRunner.current.stop();\n  };\n\n  const handleSaveProject = () => {\n    // Save to localStorage for backward compatibility\n    localStorage.setItem('codeEditor_files', JSON.stringify(files));\n    \n    // Save to current project\n    const currentProjectId = projectManager.getCurrentProjectId();\n    if (currentProjectId) {\n      projectManager.updateProjectToolData(currentProjectId, 'code', files);\n      console.log('Project saved to project manager');\n    } else {\n      // Create new project if none exists\n      const newProject = projectManager.createProject(\n        `Code Project ${new Date().toLocaleDateString()}`,\n        \"Created from Code Editor\",\n        ['code']\n      );\n      projectManager.updateProjectToolData(newProject.id, 'code', files);\n      console.log('New project created and saved');\n    }\n  };\n\n  const handleGenerateCode = async () => {\n    if (!activeFileData) return;\n    \n    setIsAIProcessing(true);\n    try {\n      const response = await replitAI.generateResponse(\n        `Generate ${activeFileData.language} code for: creative web application`,\n        {\n          tool: \"Code Editor\",\n          project: \"AI Creative Platform\",\n          currentWork: `Writing ${activeFileData.language} in ${activeFileData.name}`\n        }\n      );\n      \n      setAiSuggestion(response.content);\n    } catch (error) {\n      console.error('AI code generation error:', error);\n      setAiSuggestion(\"Sorry, AI assistance is temporarily unavailable.\");\n    } finally {\n      setIsAIProcessing(false);\n    }\n  };\n\n  const handleDebugCode = async () => {\n    if (!activeFileData || !editorRef.current) return;\n    \n    setIsAIProcessing(true);\n    try {\n      const response = await replitAI.generateResponse(\n        `Debug this ${activeFileData.language} code and suggest improvements: ${activeFileData.content}`,\n        {\n          tool: \"Code Editor\",\n          project: \"AI Creative Platform\", \n          currentWork: `Debugging ${activeFileData.name}`\n        }\n      );\n      \n      setAiSuggestion(response.content);\n    } catch (error) {\n      console.error('AI debugging error:', error);\n      setAiSuggestion(\"Sorry, AI debugging is temporarily unavailable.\");\n    } finally {\n      setIsAIProcessing(false);\n    }\n  };\n\n  const handleExplainCode = async () => {\n    if (!activeFileData) return;\n    \n    setIsAIProcessing(true);\n    try {\n      const selectedText = editorRef.current?.getModel()?.getValueInRange(\n        editorRef.current?.getSelection()\n      ) || activeFileData.content.substring(0, 200);\n      \n      const response = await replitAI.generateResponse(\n        `Explain this ${activeFileData.language} code in simple terms: ${selectedText}`,\n        {\n          tool: \"Code Editor\",\n          project: \"AI Creative Platform\",\n          currentWork: `Explaining code in ${activeFileData.name}`\n        }\n      );\n      \n      setAiSuggestion(response.content);\n    } catch (error) {\n      console.error('AI explanation error:', error);\n      setAiSuggestion(\"Sorry, AI explanation is temporarily unavailable.\");\n    } finally {\n      setIsAIProcessing(false);\n    }\n  };\n\n  const handleLanguageChange = (newLanguage: string) => {\n    if (!activeFileData) return;\n    \n    const currentLanguage = activeFileData.language;\n    \n    // Check if this is a significant language change that might warrant conversion\n    const significantChange = (\n      (currentLanguage === 'javascript' && newLanguage === 'python') ||\n      (currentLanguage === 'python' && newLanguage === 'javascript') ||\n      (currentLanguage === 'typescript' && newLanguage === 'python') ||\n      (currentLanguage === 'python' && newLanguage === 'typescript')\n    );\n    \n    if (significantChange && activeFileData.content.trim().length > 50) {\n      // Show confirmation dialog for significant changes\n      setPendingLanguageChange({ newLanguage, currentLanguage });\n      setShowLanguageConfirmation(true);\n    } else {\n      // Apply language change immediately\n      applyLanguageChange(newLanguage);\n    }\n  };\n\n  const applyLanguageChange = (newLanguage: string) => {\n    if (!activeFileData) return;\n    \n    const preset = languagePresets[newLanguage];\n    if (!preset) return;\n    \n    // Create new filename with proper extension\n    const baseName = activeFileData.name.split('.')[0];\n    const isDefaultName = Object.values(languagePresets).some(p => \n      p.defaultName === baseName || baseName === 'untitled' || baseName === 'main'\n    );\n    \n    const newFileName = isDefaultName \n      ? `${preset.defaultName}.${preset.extension}`\n      : `${baseName}.${preset.extension}`;\n    \n    const updatedFiles = files.map(file => \n      file.id === activeFile\n        ? { \n            ...file, \n            name: newFileName,\n            language: newLanguage,\n            content: preset.template\n          }\n        : file\n    );\n    \n    setFiles(updatedFiles);\n    \n    // Save to current project\n    const currentProjectId = projectManager.getCurrentProjectId();\n    if (currentProjectId) {\n      projectManager.updateProjectToolData(currentProjectId, 'code', updatedFiles);\n    }\n    \n    // Save to localStorage for backward compatibility\n    localStorage.setItem('codeEditor_files', JSON.stringify(updatedFiles));\n  };\n\n  const handleCreateNewFile = () => {\n    const newId = `file_${Date.now()}`;\n    const preset = languagePresets.javascript;\n    const newFile: CodeFile = {\n      id: newId,\n      name: `untitled.${preset.extension}`,\n      language: \"javascript\", \n      content: \"// New file created with AI assistance\\n\\n\"\n    };\n    \n    const updatedFiles = [...files, newFile];\n    setFiles(updatedFiles);\n    setActiveFile(newId);\n    \n    // Save to current project\n    const currentProjectId = projectManager.getCurrentProjectId();\n    if (currentProjectId) {\n      projectManager.updateProjectToolData(currentProjectId, 'code', updatedFiles);\n    }\n  };\n  \n  const handleToggleFilesPanel = () => {\n    setShowFilesPanel(!showFilesPanel);\n    // Trigger editor layout after a short delay to ensure proper resizing\n    setTimeout(() => {\n      editorRef.current?.layout();\n    }, 300);\n  };\n  \n  const handleToggleAssistantPanel = () => {\n    setShowAssistantPanel(!showAssistantPanel);\n    // Trigger editor layout after a short delay to ensure proper resizing\n    setTimeout(() => {\n      editorRef.current?.layout();\n    }, 300);\n  };\n\n  const handleToggleTerminal = () => {\n    setShowTerminal(!showTerminal);\n  };\n\n  const getLanguageIcon = (language: string) => {\n    switch(language) {\n      case 'javascript': return '🟨';\n      case 'typescript': return '🔷';\n      case 'css': return '🎨';\n      case 'html': return '🌐';\n      case 'python': return '🐍';\n      default: return '📄';\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <div className=\"border-b px-4 py-2 flex items-center justify-between bg-card\">\n        <div className=\"flex items-center gap-4\">\n          <h1 className=\"font-semibold text-lg\">AI Code Editor</h1>\n          <Badge className=\"bg-primary/10 text-primary\" data-testid=\"badge-ai-powered\">\n            <Bot className=\"w-3 h-3 mr-1\" />\n            AI Powered\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button size=\"sm\" onClick={handleRunCode} data-testid=\"button-run-code\">\n            <Play className=\"w-4 h-4 mr-2\" />\n            Run\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" onClick={handleSaveProject} data-testid=\"button-save-project\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" data-testid=\"button-share-code\">\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            Share\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" data-testid=\"button-settings\">\n            <Settings className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex\">\n        {/* File Explorer */}\n        {showFilesPanel && (\n          <div className=\"w-64 border-r bg-muted/30\">\n            <div className=\"p-3 border-b bg-card\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-medium text-sm\">Files</h3>\n                <div className=\"flex items-center gap-1\">\n                  <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={handleCreateNewFile} data-testid=\"button-new-file\">\n                    <Plus className=\"w-3 h-3\" />\n                  </Button>\n                  <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={handleToggleFilesPanel} data-testid=\"button-toggle-files\">\n                    <ChevronLeft className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          \n            <div className=\"p-2\">\n              {files.map((file) => (\n                <div\n                  key={file.id}\n                  className={`flex items-center gap-2 px-2 py-1.5 rounded cursor-pointer hover-elevate text-sm ${\n                    activeFile === file.id ? 'bg-primary/10 text-primary' : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                  onClick={() => setActiveFile(file.id)}\n                  data-testid={`file-${file.id}`}\n                >\n                  <span>{getLanguageIcon(file.language)}</span>\n                  <span className=\"truncate\">{file.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Toggle button when files panel is hidden */}\n        {!showFilesPanel && (\n          <div className=\"border-r bg-muted/30 flex items-start pt-3\">\n            <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={handleToggleFilesPanel} data-testid=\"button-show-files\">\n              <ChevronRight className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        )}\n\n        {/* Editor and AI Panel */}\n        <div className=\"flex-1 flex\">\n          {/* Code Editor */}\n          <div className=\"flex-1 flex flex-col\">\n            <div className=\"border-b px-4 py-2 bg-card\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span>{getLanguageIcon(activeFileData?.language || '')}</span>\n                  <span className=\"font-medium\">{activeFileData?.name}</span>\n                </div>\n                \n                <Select value={activeFileData?.language} onValueChange={handleLanguageChange}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                    <SelectItem value=\"typescript\">TypeScript</SelectItem>\n                    <SelectItem value=\"css\">CSS</SelectItem>\n                    <SelectItem value=\"html\">HTML</SelectItem>\n                    <SelectItem value=\"python\">Python</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex-1\">\n              <Editor\n                height=\"100%\"\n                defaultLanguage={activeFileData?.language || \"javascript\"}\n                language={activeFileData?.language || \"javascript\"}\n                value={activeFileData?.content || \"\"}\n                onMount={handleEditorDidMount}\n                onChange={handleCodeChange}\n                options={{\n                  fontSize: 14,\n                  minimap: { enabled: true },\n                  lineNumbers: 'on',\n                  roundedSelection: false,\n                  scrollBeyondLastLine: false,\n                  automaticLayout: true,\n                  tabSize: 2,\n                  wordWrap: 'on'\n                }}\n                data-testid=\"monaco-editor\"\n              />\n            </div>\n          </div>\n\n          {/* AI Assistant Panel */}\n          {showAssistantPanel && (\n            <div className=\"w-72 border-l bg-muted/30 flex flex-col overflow-hidden\">\n              <div className=\"p-3 border-b bg-card\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium flex items-center gap-2 text-sm\">\n                    <Sparkles className=\"w-4 h-4 text-primary\" />\n                    AI Assistant\n                  </h3>\n                  <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={handleToggleAssistantPanel} data-testid=\"button-toggle-assistant\">\n                    <ChevronRight className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n\n            <div className=\"flex-1 p-3 space-y-3 overflow-y-auto overflow-x-hidden\">\n              {/* AI Action Buttons */}\n              <div className=\"space-y-2\">\n                <Button \n                  className=\"w-full justify-start h-8 px-3 text-sm\" \n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleGenerateCode}\n                  disabled={isAIProcessing}\n                  data-testid=\"button-generate-code\"\n                >\n                  <Lightbulb className=\"w-4 h-4 mr-2\" />\n                  <span className=\"truncate\">Generate Code</span>\n                </Button>\n                \n                <Button \n                  className=\"w-full justify-start h-8 px-3 text-sm\" \n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleDebugCode}\n                  disabled={isAIProcessing}\n                  data-testid=\"button-debug-code\"\n                >\n                  <Bug className=\"w-4 h-4 mr-2\" />\n                  <span className=\"truncate\">Debug Code</span>\n                </Button>\n                \n                <Button \n                  className=\"w-full justify-start h-8 px-3 text-sm\" \n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleExplainCode}\n                  disabled={isAIProcessing}\n                  data-testid=\"button-explain-code\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  <span className=\"truncate\">Explain Code</span>\n                </Button>\n              </div>\n\n              {/* AI Response */}\n              {(aiSuggestion || isAIProcessing) && (\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Bot className=\"w-4 h-4\" />\n                      {isAIProcessing ? \"AI is thinking...\" : \"AI Suggestion\"}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {isAIProcessing ? (\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                        Analyzing your code...\n                      </div>\n                    ) : (\n                      <div className=\"text-sm leading-relaxed whitespace-pre-wrap break-words overflow-hidden\">{aiSuggestion}</div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Code Snippets */}\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-muted-foreground\">Quick Templates</h4>\n                <div className=\"space-y-1\">\n                  <Button \n                    className=\"w-full justify-start text-xs h-8 px-2\" \n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCodeChange(activeFileData?.content + \"\\n\\n// AI Template: React Component\\nfunction MyComponent() {\\n  return <div>Hello AI!</div>;\\n}\")}\n                    data-testid=\"template-react\"\n                  >\n                    <span className=\"truncate\">React Component</span>\n                  </Button>\n                  <Button \n                    className=\"w-full justify-start text-xs h-8 px-2\" \n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCodeChange(activeFileData?.content + \"\\n\\n// AI Template: Async Function\\nasync function fetchData() {\\n  try {\\n    const response = await fetch('/api/data');\\n    return response.json();\\n  } catch (error) {\\n    console.error('Error:', error);\\n  }\\n}\")}\n                    data-testid=\"template-async\"\n                  >\n                    <span className=\"truncate\">Async Function</span>\n                  </Button>\n                  <Button \n                    className=\"w-full justify-start text-xs h-8 px-2\" \n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCodeChange(activeFileData?.content + \"\\n\\n// AI Template: API Route\\napp.get('/api/endpoint', (req, res) => {\\n  res.json({ message: 'Hello from AI!' });\\n});\")}\n                    data-testid=\"template-api\"\n                  >\n                    <span className=\"truncate\">API Route</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n            </div>\n          )}\n          \n          {/* Toggle button when assistant panel is hidden */}\n          {!showAssistantPanel && (\n            <div className=\"border-l bg-muted/30 flex items-start pt-3\">\n              <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={handleToggleAssistantPanel} data-testid=\"button-show-assistant\">\n                <ChevronLeft className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Language Change Confirmation Dialog */}\n      <AlertDialog open={showLanguageConfirmation} onOpenChange={setShowLanguageConfirmation}>\n        <AlertDialogContent data-testid=\"dialog-language-change\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-amber-500\" />\n              Convert Project Language?\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              You're switching from {pendingLanguageChange?.currentLanguage} to {pendingLanguageChange?.newLanguage}. \n              This will replace your current file content with a new template for the selected language.\n              \n              <div className=\"mt-3 p-3 bg-muted/50 rounded-lg text-sm\">\n                <strong>What will happen:</strong>\n                <ul className=\"list-disc list-inside mt-1 space-y-1\">\n                  <li>File extension will be updated</li>\n                  <li>Current content will be replaced with {pendingLanguageChange?.newLanguage} template</li>\n                  <li>Your previous code will be lost</li>\n                </ul>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => {\n                setShowLanguageConfirmation(false);\n                setPendingLanguageChange(null);\n              }}\n              data-testid=\"button-cancel-language-change\"\n            >\n              Keep Current Language\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (pendingLanguageChange) {\n                  applyLanguageChange(pendingLanguageChange.newLanguage);\n                }\n                setShowLanguageConfirmation(false);\n                setPendingLanguageChange(null);\n              }}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-confirm-language-change\"\n            >\n              Convert to {pendingLanguageChange?.newLanguage}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Terminal Panel */}\n      <TerminalPanel\n        isVisible={showTerminal}\n        onToggle={handleToggleTerminal}\n        isRunning={isCodeRunning}\n        onRun={handleRunCode}\n        onStop={handleStopCode}\n        htmlContent={htmlOutput}\n      />\n    </div>\n  );\n}","size_bytes":31020},"client/src/components/CollaborationPanel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Users, Video, MessageSquare, Share2, Mic, MicOff, VideoOff } from \"lucide-react\";\n\ninterface Collaborator {\n  id: number;\n  name: string;\n  avatar: string;\n  status: 'online' | 'away' | 'busy';\n  role: string;\n  currentTool: string;\n}\n\ninterface Activity {\n  id: number;\n  user: string;\n  action: string;\n  timestamp: string;\n  tool: string;\n}\n\nexport default function CollaborationPanel() {\n  // TODO: Remove mock functionality\n  const collaborators: Collaborator[] = [\n    {\n      id: 1,\n      name: \"Sarah Chen\",\n      avatar: \"/api/placeholder/32/32\",\n      status: 'online',\n      role: \"3D Artist\",\n      currentTool: \"3D Designer\"\n    },\n    {\n      id: 2,\n      name: \"Mike Rodriguez\",\n      avatar: \"/api/placeholder/32/32\", \n      status: 'online',\n      role: \"Music Producer\",\n      currentTool: \"Audio Studio\"\n    },\n    {\n      id: 3,\n      name: \"Emma Watson\",\n      avatar: \"/api/placeholder/32/32\",\n      status: 'away',\n      role: \"Video Editor\", \n      currentTool: \"Video Suite\"\n    },\n    {\n      id: 4,\n      name: \"David Kim\",\n      avatar: \"/api/placeholder/32/32\",\n      status: 'busy',\n      role: \"Developer\",\n      currentTool: \"Code Editor\"\n    }\n  ];\n\n  const recentActivity: Activity[] = [\n    { id: 1, user: \"Sarah\", action: \"Updated 3D model materials\", timestamp: \"2m ago\", tool: \"3D Design\" },\n    { id: 2, user: \"Mike\", action: \"Added new melody track\", timestamp: \"5m ago\", tool: \"Music\" },\n    { id: 3, user: \"Emma\", action: \"Applied color correction\", timestamp: \"8m ago\", tool: \"Video\" },\n    { id: 4, user: \"David\", action: \"Optimized render pipeline\", timestamp: \"12m ago\", tool: \"Code\" }\n  ];\n\n  const handleStartCall = () => {\n    console.log('Starting video call');\n  };\n\n  const handleToggleMic = () => {\n    console.log('Toggling microphone');\n  };\n\n  const handleToggleVideo = () => {\n    console.log('Toggling video');\n  };\n\n  const handleOpenChat = () => {\n    console.log('Opening chat');\n  };\n\n  const handleShareProject = () => {\n    console.log('Sharing project');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch(status) {\n      case 'online': return 'bg-green-500';\n      case 'away': return 'bg-yellow-500'; \n      case 'busy': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Users className=\"w-5 h-5 text-primary\" />\n            Team Collaboration\n          </CardTitle>\n          <Badge variant=\"outline\" data-testid=\"badge-collaborators-count\">\n            {collaborators.filter(c => c.status === 'online').length} online\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Video Call Controls */}\n        <div className=\"flex gap-2\">\n          <Button \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={handleStartCall}\n            data-testid=\"button-start-call\"\n          >\n            <Video className=\"w-3 h-3 mr-1\" />\n            Start Call\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={handleToggleMic}\n            data-testid=\"button-toggle-mic\"\n          >\n            <Mic className=\"w-3 h-3\" />\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={handleToggleVideo}\n            data-testid=\"button-toggle-video\"\n          >\n            <VideoOff className=\"w-3 h-3\" />\n          </Button>\n        </div>\n\n        {/* Active Collaborators */}\n        <div className=\"space-y-3\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">Active Now</h4>\n          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n            {collaborators.map((collaborator) => (\n              <div \n                key={collaborator.id}\n                className=\"flex items-center gap-3 p-2 rounded-lg hover-elevate cursor-pointer\"\n                data-testid={`collaborator-${collaborator.id}`}\n              >\n                <div className=\"relative\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={collaborator.avatar} alt={collaborator.name} />\n                    <AvatarFallback className=\"text-xs\">\n                      {collaborator.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 ${getStatusColor(collaborator.status)} rounded-full border-2 border-background`} />\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <p className=\"text-sm font-medium truncate\">{collaborator.name}</p>\n                    <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-role-${collaborator.id}`}>\n                      {collaborator.role}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground truncate\">\n                    Working in {collaborator.currentTool}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"space-y-3\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">Recent Activity</h4>\n          <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n            {recentActivity.map((activity) => (\n              <div key={activity.id} className=\"text-xs space-y-1\" data-testid={`activity-${activity.id}`}>\n                <div className=\"flex justify-between items-start\">\n                  <span className=\"font-medium\">{activity.user}</span>\n                  <span className=\"text-muted-foreground\">{activity.timestamp}</span>\n                </div>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  {activity.action}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            className=\"flex-1\"\n            onClick={handleOpenChat}\n            data-testid=\"button-open-chat\"\n          >\n            <MessageSquare className=\"w-3 h-3 mr-1\" />\n            Chat\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={handleShareProject}\n            data-testid=\"button-share-project\"\n          >\n            <Share2 className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7159},"client/src/components/CreativeModule.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ExternalLink, Play, Download, Share2, Bot } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { downloadHandlers } from \"@/lib/download-handlers\";\nimport { shareHandlers, shareUrl } from \"@/lib/share-handlers\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CreativeModuleProps {\n  title: string;\n  description: string;\n  image: string;\n  features: string[];\n  progress?: number;\n  status?: 'active' | 'processing' | 'complete';\n  aiSuggestions?: number;\n}\n\nexport default function CreativeModule({ \n  title, \n  description, \n  image, \n  features, \n  progress = 0,\n  status = 'active',\n  aiSuggestions = 0\n}: CreativeModuleProps) {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const handleOpen = () => {\n    console.log(`Opening ${title} module`);\n    \n    // Navigate to specific creative tool\n    if (title.toLowerCase().includes('code')) {\n      navigate('/code');\n    } else if (title.toLowerCase().includes('3d') || title.toLowerCase().includes('design')) {\n      navigate('/3d');\n    } else if (title.toLowerCase().includes('music')) {\n      navigate('/music');\n    } else if (title.toLowerCase().includes('video')) {\n      navigate('/video');\n    } else {\n      console.log(`${title} tool will be available soon!`);\n    }\n  };\n\n  const handlePreview = () => {\n    console.log(`Previewing ${title}`);\n    \n    // Navigate to the tool with preview parameter\n    if (title.toLowerCase().includes('code')) {\n      navigate('/code?preview=1');\n    } else if (title.toLowerCase().includes('3d') || title.toLowerCase().includes('design')) {\n      navigate('/3d?preview=1');\n    } else if (title.toLowerCase().includes('music')) {\n      navigate('/music?preview=1');\n    } else if (title.toLowerCase().includes('video')) {\n      navigate('/video?preview=1');\n    }\n  };\n\n  const handleDownload = async () => {\n    console.log(`Downloading from ${title}`);\n    \n    try {\n      if (title.toLowerCase().includes('code')) {\n        await downloadHandlers.downloadCode();\n        toast({ title: \"Download started\", description: \"Code files exported successfully\" });\n      } else if (title.toLowerCase().includes('3d') || title.toLowerCase().includes('design')) {\n        await downloadHandlers.download3D();\n        toast({ title: \"Download started\", description: \"3D scene exported successfully\" });\n      } else if (title.toLowerCase().includes('music')) {\n        await downloadHandlers.downloadMusic();\n        toast({ title: \"Download started\", description: \"Music project exported successfully\" });\n      } else if (title.toLowerCase().includes('video')) {\n        await downloadHandlers.downloadVideo();\n        toast({ title: \"Download started\", description: \"Video project exported successfully\" });\n      }\n    } catch (error) {\n      console.error('Download error:', error);\n      toast({ title: \"Download failed\", description: \"Unable to export project\", variant: \"destructive\" });\n    }\n  };\n\n  const handleShare = async () => {\n    console.log(`Sharing ${title} project`);\n    \n    try {\n      let shareUrlResult = '';\n      \n      if (title.toLowerCase().includes('code')) {\n        shareUrlResult = await shareHandlers.shareCode();\n      } else if (title.toLowerCase().includes('3d') || title.toLowerCase().includes('design')) {\n        shareUrlResult = await shareHandlers.share3D();\n      } else if (title.toLowerCase().includes('music')) {\n        shareUrlResult = await shareHandlers.shareMusic();\n      } else if (title.toLowerCase().includes('video')) {\n        shareUrlResult = await shareHandlers.shareVideo();\n      }\n      \n      if (shareUrlResult) {\n        await shareUrl(shareUrlResult, `${title} Project`);\n        toast({ title: \"Share link created\", description: \"Project shared successfully\" });\n      }\n    } catch (error) {\n      console.error('Share error:', error);\n      toast({ title: \"Share failed\", description: \"Unable to create share link\", variant: \"destructive\" });\n    }\n  };\n\n  const getStatusColor = () => {\n    switch(status) {\n      case 'processing': return 'bg-yellow-500';\n      case 'complete': return 'bg-green-500';\n      default: return 'bg-primary';\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate transition-all duration-300 overflow-hidden\">\n      <div className=\"relative\">\n        <div \n          className=\"h-48 bg-cover bg-center bg-gray-100 dark:bg-gray-800\"\n          style={{ backgroundImage: `url(${image})` }}\n        />\n        <div className=\"absolute top-3 right-3 flex gap-2\">\n          <Badge variant=\"secondary\" className=\"bg-background/80 backdrop-blur-sm\" data-testid={`badge-status-${title.toLowerCase().replace(' ', '-')}`}>\n            <div className={`w-2 h-2 rounded-full mr-1 ${getStatusColor()}`} />\n            {status}\n          </Badge>\n          {aiSuggestions > 0 && (\n            <Badge className=\"bg-primary/80 backdrop-blur-sm text-primary-foreground\" data-testid={`badge-ai-suggestions-${title.toLowerCase().replace(' ', '-')}`}>\n              <Bot className=\"w-3 h-3 mr-1\" />\n              {aiSuggestions} AI\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <CardTitle className=\"text-lg font-display\" data-testid={`title-${title.toLowerCase().replace(' ', '-')}`}>\n              {title}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`description-${title.toLowerCase().replace(' ', '-')}`}>\n              {description}\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">Features</h4>\n          <div className=\"flex flex-wrap gap-1\">\n            {features.map((feature, index) => (\n              <Badge \n                key={index} \n                variant=\"outline\" \n                className=\"text-xs\"\n                data-testid={`badge-feature-${feature.toLowerCase().replace(' ', '-')}`}\n              >\n                {feature}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={handlePreview}\n            data-testid={`button-preview-${title.toLowerCase().replace(' ', '-')}`}\n          >\n            <Play className=\"w-3 h-3 mr-1\" />\n            Preview\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6846},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Bell, Search, Settings, User, Menu, Sparkles } from \"lucide-react\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { useLocation } from \"wouter\";\nimport NotificationsDropdown from \"./NotificationsDropdown\";\nimport SearchDropdown from \"./SearchDropdown\";\n\nexport default function Header() {\n  const [, navigate] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showSearch, setShowSearch] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0); // Start with no notifications\n\n  const handleSearch = () => {\n    setShowSearch(!showSearch);\n  };\n\n  const handleNotifications = () => {\n    setShowNotifications(!showNotifications);\n  };\n\n  const handleProfile = () => {\n    navigate('/profile');\n  };\n\n  const handleMenu = () => {\n    console.log('Menu clicked');\n  };\n\n  const handleNavigate = (path: string) => {\n    navigate(path);\n  };\n\n  return (\n    <header className=\"border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center gap-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"md:hidden\"\n              onClick={handleMenu}\n              data-testid=\"button-menu\"\n            >\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n            \n            <button \n              className=\"flex items-center gap-2 hover-elevate rounded-lg p-2 -m-2 transition-colors\"\n              onClick={() => handleNavigate('/')}\n              data-testid=\"button-logo-home\"\n            >\n              <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n                <Sparkles className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <h1 className=\"font-display text-xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                CreativeAI\n              </h1>\n            </button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"hidden md:flex items-center gap-6\">\n            <Button variant=\"ghost\" className=\"text-sm font-medium\" onClick={() => handleNavigate('/studio')} data-testid=\"button-nav-studio\">\n              Studio\n            </Button>\n            <Button variant=\"ghost\" className=\"text-sm font-medium\" onClick={() => handleNavigate('/projects')} data-testid=\"button-nav-projects\">\n              Projects\n            </Button>\n            <Button variant=\"ghost\" className=\"text-sm font-medium\" onClick={() => handleNavigate('/gallery')} data-testid=\"button-nav-gallery\">\n              Gallery\n            </Button>\n            <Button variant=\"ghost\" className=\"text-sm font-medium\" onClick={() => handleNavigate('/learn')} data-testid=\"button-nav-learn\">\n              Learn\n            </Button>\n          </nav>\n\n          {/* Actions */}\n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={handleSearch}\n                data-testid=\"button-search\"\n              >\n                <Search className=\"w-4 h-4\" />\n              </Button>\n              \n              <SearchDropdown \n                isOpen={showSearch} \n                onClose={() => setShowSearch(false)}\n              />\n            </div>\n            \n            <div className=\"relative\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={handleNotifications}\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"w-4 h-4\" />\n              </Button>\n              {unreadCount > 0 && (\n                <Badge className=\"absolute -top-2 -right-2 w-5 h-5 p-0 text-xs bg-destructive text-destructive-foreground flex items-center justify-center\" data-testid=\"badge-notification-count\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n\n            <ThemeToggle />\n\n            <div className=\"relative\">\n              <Avatar className=\"w-8 h-8 hover-elevate cursor-pointer\" onClick={handleProfile} data-testid=\"avatar-user\">\n                <AvatarImage src=\"/api/placeholder/32/32\" alt=\"User\" />\n                <AvatarFallback>\n                  <User className=\"w-4 h-4\" />\n                </AvatarFallback>\n              </Avatar>\n              \n              <NotificationsDropdown \n                isOpen={showNotifications} \n                onClose={() => setShowNotifications(false)}\n                onUnreadCountChange={setUnreadCount}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5098},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Sparkles, Users, Zap } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport heroImage from \"@assets/generated_images/AI_Creative_Studio_Hero_daee97ae.png\";\n\nexport default function Hero() {\n  const [, navigate] = useLocation();\n\n  const handleGetStarted = () => {\n    console.log('Get started clicked');\n    navigate('/studio');\n  };\n\n  const handleWatchDemo = () => {\n    console.log('Watch demo clicked');\n    navigate('/learn');\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Hero Background with Dark Wash */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `linear-gradient(45deg, rgba(0,0,0,0.7) 0%, rgba(67,56,202,0.4) 50%, rgba(0,0,0,0.6) 100%), url(${heroImage})`\n        }}\n      />\n      \n      {/* Content */}\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 py-16 text-center\">\n        <div className=\"mb-8\">\n          <Badge variant=\"outline\" className=\"bg-background/20 backdrop-blur-sm border-primary/20 text-white mb-4\" data-testid=\"badge-new\">\n            <Sparkles className=\"w-3 h-3 mr-1\" />\n            Powered by Advanced AI\n          </Badge>\n          \n          <h1 className=\"font-display text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight\">\n            The Ultimate\n            <span className=\"text-white block\">\n              Creative AI Studio\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-gray-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n            Design in 3D, compose music, edit videos, and code—all powered by cutting-edge AI. \n            Collaborate in real-time and bring your wildest creative visions to life.\n          </p>\n        </div>\n\n        {/* Feature Highlights */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          <div className=\"flex items-center bg-background/10 backdrop-blur-sm rounded-lg px-4 py-2 text-white\">\n            <Zap className=\"w-4 h-4 mr-2 text-primary\" />\n            <span className=\"text-sm font-medium\">AI-Powered Tools</span>\n          </div>\n          <div className=\"flex items-center bg-background/10 backdrop-blur-sm rounded-lg px-4 py-2 text-white\">\n            <Users className=\"w-4 h-4 mr-2 text-primary\" />\n            <span className=\"text-sm font-medium\">Real-time Collaboration</span>\n          </div>\n        </div>\n\n        {/* CTA Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button \n            size=\"lg\" \n            className=\"text-lg px-8 py-3 bg-primary hover:bg-primary/90 text-primary-foreground\"\n            onClick={handleGetStarted}\n            data-testid=\"button-get-started\"\n          >\n            <Sparkles className=\"w-5 h-5 mr-2\" />\n            Start Creating Now\n          </Button>\n          <Button \n            size=\"lg\" \n            variant=\"outline\" \n            className=\"text-lg px-8 py-3 bg-background/20 backdrop-blur-sm border-white/30 text-white hover:bg-background/30\"\n            onClick={handleWatchDemo}\n            data-testid=\"button-watch-demo\"\n          >\n            <Play className=\"w-5 h-5 mr-2\" />\n            Watch Demo\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3463},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const [isDark, setIsDark] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('theme') === 'dark' || \n             (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches);\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (isDark) {\n      root.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      root.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  }, [isDark]);\n\n  const toggleTheme = () => {\n    setIsDark(prev => !prev);\n    console.log('Theme toggled to:', !isDark ? 'dark' : 'light');\n  };\n\n  return (\n    <Button \n      variant=\"ghost\" \n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {isDark ? (\n        <Sun className=\"w-4 h-4\" />\n      ) : (\n        <Moon className=\"w-4 h-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1136},"client/src/components/ThreeDDesigner.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { replitAI } from \"@/lib/replit-ai\";\nimport { projectManager } from \"@/lib/project-manager\";\nimport { isPreviewMode } from \"@/lib/utils/export-utils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport * as THREE from \"three\";\nimport { \n  Save, \n  Download, \n  RotateCcw,\n  Move3D,\n  Plus,\n  Trash2,\n  Box as BoxIcon,\n  Circle,\n  Cylinder as CylinderIcon,\n  Lightbulb,\n  Bot,\n  Sparkles,\n  Play,\n  Settings,\n  RotateCw,\n  ZoomIn,\n  ZoomOut\n} from \"lucide-react\";\n\ninterface SceneObject {\n  id: string;\n  type: 'box' | 'sphere' | 'cylinder' | 'torus' | 'plane' | 'helix' | 'spiral' | 'pyramid' | 'tower' | 'ring' | 'coil';\n  position: [number, number, number];\n  rotation: [number, number, number];\n  scale: [number, number, number];\n  color: string;\n  material: 'standard' | 'basic' | 'phong' | 'wireframe';\n  name: string;\n  mesh?: THREE.Mesh;\n  parameters?: { [key: string]: any };\n  aiPrompt?: string; // Store the original AI prompt that created this object\n}\n\ninterface Scene3D {\n  id: string;\n  name: string;\n  objects: SceneObject[];\n  environment: string;\n  camera: {\n    position: [number, number, number];\n    target: [number, number, number];\n  };\n}\n\nexport default function ThreeDDesigner() {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene>();\n  const rendererRef = useRef<THREE.WebGLRenderer>();\n  const cameraRef = useRef<THREE.PerspectiveCamera>();\n  const raycasterRef = useRef<THREE.Raycaster>();\n  const mouseRef = useRef<THREE.Vector2>();\n  const animationIdRef = useRef<number>();\n  const meshMapRef = useRef<Map<string, THREE.Mesh>>(new Map());\n\n  const [scene3D, setScene3D] = useState<Scene3D>({\n    id: 'default',\n    name: 'Untitled Scene',\n    objects: [],\n    environment: 'studio',\n    camera: {\n      position: [10, 10, 10],\n      target: [0, 0, 0]\n    }\n  });\n\n  const [selectedObjectId, setSelectedObjectId] = useState<string | null>(null);\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiPrompt, setAiPrompt] = useState(\"\");\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [showPreviewModal, setShowPreviewModal] = useState(false);\n  const [cameraControls, setCameraControls] = useState({\n    autoRotate: false,\n    zoom: 1\n  });\n  \n  const [webglError, setWebglError] = useState<string | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isDraggingObject, setIsDraggingObject] = useState<string | null>(null);\n  const [dragStartPosition, setDragStartPosition] = useState<[number, number, number] | null>(null);\n  const [isRotatingObject, setIsRotatingObject] = useState<string | null>(null);\n  const [rotationStartAngles, setRotationStartAngles] = useState<[number, number, number] | null>(null);\n\n  const selectedObject = scene3D.objects.find(obj => obj.id === selectedObjectId);\n\n  // Auto-open preview if in preview mode\n  useEffect(() => {\n    if (isPreviewMode()) {\n      setShowPreviewModal(true);\n    }\n  }, []);\n\n  // Initialize Three.js scene\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    try {\n      // Check WebGL support first\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      \n      if (!gl) {\n        setWebglError('WebGL is not supported in this browser. Please use a modern browser with WebGL support.');\n        return;\n      }\n\n      // Scene setup\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0xf0f0f0);\n      sceneRef.current = scene;\n\n      // Camera setup\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        mountRef.current.clientWidth / mountRef.current.clientHeight,\n        0.1,\n        1000\n      );\n      camera.position.set(10, 10, 10);\n      camera.lookAt(0, 0, 0);\n      cameraRef.current = camera;\n\n      // Renderer setup with error handling\n      let renderer: THREE.WebGLRenderer;\n      try {\n        renderer = new THREE.WebGLRenderer({ \n          antialias: true,\n          failIfMajorPerformanceCaveat: false,\n          preserveDrawingBuffer: true\n        });\n      } catch (error) {\n        console.warn('WebGL renderer failed, trying fallback...', error);\n        try {\n          renderer = new THREE.WebGLRenderer({ \n            antialias: false,\n            failIfMajorPerformanceCaveat: false,\n            preserveDrawingBuffer: false\n          });\n        } catch (fallbackError) {\n          setWebglError('Failed to create 3D renderer. Your browser may not support WebGL or it may be disabled.');\n          return;\n        }\n      }\n      \n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n      rendererRef.current = renderer;\n      mountRef.current.appendChild(renderer.domElement);\n\n      setIsInitialized(true);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(50, 50, 50);\n      directionalLight.castShadow = true;\n      directionalLight.shadow.mapSize.width = 2048;\n      directionalLight.shadow.mapSize.height = 2048;\n      scene.add(directionalLight);\n\n      // Grid helper\n      const gridHelper = new THREE.GridHelper(20, 20, 0x888888, 0xcccccc);\n      scene.add(gridHelper);\n\n      // Raycaster for object selection\n      const raycaster = new THREE.Raycaster();\n      const mouse = new THREE.Vector2();\n      raycasterRef.current = raycaster;\n      mouseRef.current = mouse;\n\n      // Mouse events\n      const handleMouseClick = (event: MouseEvent) => {\n        const rect = renderer.domElement.getBoundingClientRect();\n        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n        raycaster.setFromCamera(mouse, camera);\n        const intersects = raycaster.intersectObjects(scene.children, true);\n\n        // Filter out wireframes and non-scene objects\n        const validIntersects = intersects.filter(intersect => \n          !intersect.object.userData.isSelectionWireframe && \n          intersect.object.userData.isSceneObject\n        );\n\n        if (validIntersects.length > 0) {\n          const clickedObjectId = validIntersects[0].object.userData.objectId;\n          if (clickedObjectId) {\n            setSelectedObjectId(clickedObjectId);\n          }\n        } else {\n          setSelectedObjectId(null);\n        }\n      };\n\n      // Mouse controls for camera\n      let isDragging = false;\n      let previousMousePosition = { x: 0, y: 0 };\n      let dragStartMouse = { x: 0, y: 0 };\n      let isObjectDragging = false; // Local variable for immediate dragging state\n      let draggingObjectId: string | null = null;\n      let objectDragStartPosition: [number, number, number] | null = null;\n      let isObjectRotating = false; // Local variable for rotation mode\n      let rotatingObjectId: string | null = null;\n      let objectRotationStart: [number, number, number] | null = null;\n\n      const handleMouseDown = (event: MouseEvent) => {\n        const rect = renderer.domElement.getBoundingClientRect();\n        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n        // Check if Shift key is held for rotation\n        if (event.shiftKey) {\n          raycaster.setFromCamera(mouse, camera);\n          const intersects = raycaster.intersectObjects(scene.children, true);\n          \n          const validIntersects = intersects.filter(intersect => \n            !intersect.object.userData.isSelectionWireframe && \n            intersect.object.userData.isSceneObject\n          );\n\n          if (validIntersects.length > 0) {\n            const clickedObjectId = validIntersects[0].object.userData.objectId;\n            if (clickedObjectId) {\n              // Start object rotation\n              setIsRotatingObject(clickedObjectId);\n              setSelectedObjectId(clickedObjectId);\n              isObjectRotating = true;\n              rotatingObjectId = clickedObjectId;\n              \n              // Store the object's current rotation as rotation start\n              const objToRotate = scene3D.objects.find(obj => obj.id === clickedObjectId);\n              if (objToRotate) {\n                setRotationStartAngles([...objToRotate.rotation]);\n                objectRotationStart = [...objToRotate.rotation];\n              }\n              \n              dragStartMouse = { x: event.clientX, y: event.clientY };\n              event.preventDefault();\n              event.stopPropagation();\n              return; // Don't start camera dragging\n            }\n          }\n        }\n        // Check if Ctrl key is held and if we're clicking on an object\n        else if (event.ctrlKey || event.metaKey) {\n          raycaster.setFromCamera(mouse, camera);\n          const intersects = raycaster.intersectObjects(scene.children, true);\n          \n          const validIntersects = intersects.filter(intersect => \n            !intersect.object.userData.isSelectionWireframe && \n            intersect.object.userData.isSceneObject\n          );\n\n          if (validIntersects.length > 0) {\n            const clickedObjectId = validIntersects[0].object.userData.objectId;\n            if (clickedObjectId) {\n              // Start object dragging\n              setIsDraggingObject(clickedObjectId);\n              setSelectedObjectId(clickedObjectId);\n              isObjectDragging = true;\n              draggingObjectId = clickedObjectId;\n              \n              // Store the object's current position as drag start position\n              const objToMove = scene3D.objects.find(obj => obj.id === clickedObjectId);\n              if (objToMove) {\n                setDragStartPosition([...objToMove.position]);\n                objectDragStartPosition = [...objToMove.position];\n              }\n              \n              dragStartMouse = { x: event.clientX, y: event.clientY };\n              event.preventDefault();\n              event.stopPropagation();\n              return; // Don't start camera dragging\n            }\n          }\n        }\n\n        // Normal camera dragging (when Ctrl is not held or no object clicked)\n        isDragging = true;\n        previousMousePosition = { x: event.clientX, y: event.clientY };\n      };\n\n      const handleMouseMove = (event: MouseEvent) => {\n        if (isObjectRotating && rotatingObjectId && objectRotationStart) {\n          // Handle object rotation - calculate rotation from mouse movement\n          const rotationScale = 0.01; // Adjust sensitivity\n          const totalDeltaX = event.clientX - dragStartMouse.x;\n          const totalDeltaY = event.clientY - dragStartMouse.y;\n          \n          // Map mouse movement to rotation: horizontal = Y rotation, vertical = X rotation\n          const newRotation: [number, number, number] = [\n            objectRotationStart[0] + totalDeltaY * rotationScale, // X rotation (pitch) from vertical mouse movement\n            objectRotationStart[1] + totalDeltaX * rotationScale, // Y rotation (yaw) from horizontal mouse movement  \n            objectRotationStart[2] // Keep Z rotation unchanged\n          ];\n\n          updateObject(rotatingObjectId, { rotation: newRotation });\n\n          return;\n        }\n        else if (isObjectDragging && draggingObjectId && objectDragStartPosition) {\n          // Handle object dragging - calculate total movement from drag start\n          const movementScale = 0.02; // Adjust sensitivity\n          const totalDeltaX = event.clientX - dragStartMouse.x;\n          const totalDeltaY = event.clientY - dragStartMouse.y;\n          \n          const newPosition: [number, number, number] = [\n            objectDragStartPosition[0] + totalDeltaX * movementScale,\n            objectDragStartPosition[1] - totalDeltaY * movementScale, // Negative Y for intuitive up/down movement\n            objectDragStartPosition[2]\n          ];\n\n          updateObject(draggingObjectId, { position: newPosition });\n\n          return;\n        }\n\n        if (!isDragging) return;\n\n        const deltaX = event.clientX - previousMousePosition.x;\n        const deltaY = event.clientY - previousMousePosition.y;\n\n        // Rotate camera around the scene\n        const spherical = new THREE.Spherical();\n        spherical.setFromVector3(camera.position);\n        spherical.theta -= deltaX * 0.01;\n        spherical.phi += deltaY * 0.01;\n        spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, spherical.phi));\n\n        camera.position.setFromSpherical(spherical);\n        camera.lookAt(0, 0, 0);\n\n        previousMousePosition = { x: event.clientX, y: event.clientY };\n      };\n\n      const handleMouseUp = () => {\n        isDragging = false;\n        isObjectDragging = false;\n        draggingObjectId = null;\n        objectDragStartPosition = null;\n        isObjectRotating = false;\n        rotatingObjectId = null;\n        objectRotationStart = null;\n        setIsDraggingObject(null);\n        setDragStartPosition(null);\n        setIsRotatingObject(null);\n        setRotationStartAngles(null);\n      };\n\n      const handleWheel = (event: WheelEvent) => {\n        const scale = event.deltaY > 0 ? 1.1 : 0.9;\n        camera.position.multiplyScalar(scale);\n        setCameraControls(prev => ({ ...prev, zoom: prev.zoom * scale }));\n      };\n\n      renderer.domElement.addEventListener('click', handleMouseClick);\n      renderer.domElement.addEventListener('mousedown', handleMouseDown);\n      renderer.domElement.addEventListener('mousemove', handleMouseMove);\n      renderer.domElement.addEventListener('mouseup', handleMouseUp);\n      renderer.domElement.addEventListener('wheel', handleWheel);\n\n      // Animation loop\n      const animate = () => {\n        if (cameraControls.autoRotate) {\n          const time = Date.now() * 0.001;\n          camera.position.x = Math.cos(time) * 15;\n          camera.position.z = Math.sin(time) * 15;\n          camera.lookAt(0, 0, 0);\n        }\n\n        renderer.render(scene, camera);\n        animationIdRef.current = requestAnimationFrame(animate);\n      };\n      animate();\n\n      // Handle resize\n      const handleResize = () => {\n        if (!mountRef.current) return;\n        camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      };\n\n      window.addEventListener('resize', handleResize);\n\n      return () => {\n        if (animationIdRef.current) {\n          cancelAnimationFrame(animationIdRef.current);\n        }\n        \n        if (renderer?.domElement) {\n          renderer.domElement.removeEventListener('click', handleMouseClick);\n          renderer.domElement.removeEventListener('mousedown', handleMouseDown);\n          renderer.domElement.removeEventListener('mousemove', handleMouseMove);\n          renderer.domElement.removeEventListener('mouseup', handleMouseUp);\n          renderer.domElement.removeEventListener('wheel', handleWheel);\n          \n          if (mountRef.current && renderer.domElement && mountRef.current.contains(renderer.domElement)) {\n            mountRef.current.removeChild(renderer.domElement);\n          }\n          renderer.dispose();\n        }\n        \n        window.removeEventListener('resize', handleResize);\n      };\n    } catch (initError) {\n      console.error('Failed to initialize 3D scene:', initError);\n      setWebglError('Failed to initialize 3D graphics. This may be due to browser limitations or hardware compatibility.');\n    }\n  }, [cameraControls.autoRotate]);\n\n  // Update objects in scene when state changes\n  useEffect(() => {\n    if (!sceneRef.current) return;\n\n    // Clear existing meshes and wireframes\n    const objectsToRemove = sceneRef.current.children.filter(child => \n      (child instanceof THREE.Mesh && child.userData.isSceneObject) ||\n      child.userData.isSelectionWireframe\n    );\n    objectsToRemove.forEach(obj => sceneRef.current!.remove(obj));\n\n    // Clear mesh map\n    meshMapRef.current.clear();\n\n    // Add all objects from state\n    scene3D.objects.forEach(obj => {\n      const mesh = createMesh(obj);\n      if (mesh) {\n        mesh.userData.isSceneObject = true;\n        mesh.userData.objectId = obj.id;\n        sceneRef.current!.add(mesh);\n        \n        // Store mesh in external map (no state mutation)\n        meshMapRef.current.set(obj.id, mesh);\n      }\n    });\n\n    // Add selection wireframe for selected object\n    if (selectedObjectId) {\n      const selectedMesh = meshMapRef.current.get(selectedObjectId);\n      if (selectedMesh) {\n        const wireframe = new THREE.WireframeGeometry(selectedMesh.geometry);\n        const line = new THREE.LineSegments(wireframe, new THREE.LineBasicMaterial({ color: 0xffff00 }));\n        line.position.copy(selectedMesh.position);\n        line.rotation.copy(selectedMesh.rotation);\n        line.scale.copy(selectedMesh.scale);\n        line.userData.isSelectionWireframe = true;\n        sceneRef.current.add(line);\n      }\n    }\n  }, [scene3D.objects, selectedObjectId]);\n\n  // Procedural geometry generators\n  const createHelixGeometry = (radius = 1, height = 4, turns = 3, segments = 64) => {\n    const points = [];\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const angle = t * turns * Math.PI * 2;\n      const x = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      const y = (t - 0.5) * height;\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    \n    const curve = new THREE.CatmullRomCurve3(points);\n    const tubeGeometry = new THREE.TubeGeometry(curve, segments, 0.1, 8, false);\n    return tubeGeometry;\n  };\n\n  const createSpiralGeometry = (innerRadius = 0.5, outerRadius = 2, height = 3, turns = 4) => {\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    const indices = [];\n    const segments = 128;\n    \n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const angle = t * turns * Math.PI * 2;\n      const radius = innerRadius + (outerRadius - innerRadius) * t;\n      const x = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      const y = (t - 0.5) * height;\n      \n      vertices.push(x, y, z);\n      vertices.push(x, y - 0.1, z); // Bottom vertex\n      \n      if (i < segments) {\n        const base = i * 2;\n        indices.push(base, base + 1, base + 2);\n        indices.push(base + 1, base + 3, base + 2);\n      }\n    }\n    \n    geometry.setIndex(indices);\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    return geometry;\n  };\n\n  const createPyramidGeometry = (baseSize = 2, height = 3, sides = 4) => {\n    const geometry = new THREE.ConeGeometry(baseSize, height, sides);\n    return geometry;\n  };\n\n  const createTowerGeometry = (baseRadius = 1, topRadius = 0.5, height = 4, levels = 3) => {\n    // Guard against invalid levels\n    if (levels < 1) levels = 1;\n    \n    const levelHeight = height / levels;\n    const geometries: THREE.BufferGeometry[] = [];\n    \n    for (let i = 0; i < levels; i++) {\n      const t = levels === 1 ? 0 : i / (levels - 1);\n      const currentRadius = baseRadius + (topRadius - baseRadius) * t;\n      const nextRadius = levels === 1 ? topRadius : baseRadius + (topRadius - baseRadius) * (i + 1) / (levels - 1);\n      \n      const cylinderGeometry = new THREE.CylinderGeometry(nextRadius, currentRadius, levelHeight, 8);\n      \n      // Position the level\n      const matrix = new THREE.Matrix4();\n      matrix.makeTranslation(0, i * levelHeight - height / 2 + levelHeight / 2, 0);\n      cylinderGeometry.applyMatrix4(matrix);\n      \n      geometries.push(cylinderGeometry);\n    }\n    \n    // Merge all level geometries into one\n    const mergedGeometry = new THREE.BufferGeometry();\n    const vertices: number[] = [];\n    const normals: number[] = [];\n    const indices: number[] = [];\n    let vertexOffset = 0;\n    \n    geometries.forEach(geometry => {\n      const positionAttribute = geometry.getAttribute('position');\n      const normalAttribute = geometry.getAttribute('normal');\n      const geometryIndices = geometry.getIndex();\n      \n      if (positionAttribute && normalAttribute && geometryIndices) {\n        // Add vertices and normals\n        for (let i = 0; i < positionAttribute.count; i++) {\n          vertices.push(\n            positionAttribute.getX(i),\n            positionAttribute.getY(i),\n            positionAttribute.getZ(i)\n          );\n          normals.push(\n            normalAttribute.getX(i),\n            normalAttribute.getY(i),\n            normalAttribute.getZ(i)\n          );\n        }\n        \n        // Add indices with offset\n        for (let i = 0; i < geometryIndices.count; i++) {\n          indices.push(geometryIndices.getX(i) + vertexOffset);\n        }\n        \n        vertexOffset += positionAttribute.count;\n      }\n      \n      geometry.dispose();\n    });\n    \n    mergedGeometry.setIndex(indices);\n    mergedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    mergedGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n    \n    return mergedGeometry;\n  };\n\n  const createRingGeometry = (innerRadius = 0.5, outerRadius = 1.5, thickness = 0.2) => {\n    // Validate inputs\n    if (innerRadius >= outerRadius) {\n      innerRadius = Math.max(0.1, outerRadius - 0.5);\n    }\n    \n    // Calculate proper torus parameters\n    const majorRadius = (innerRadius + outerRadius) / 2;\n    const tubeRadius = (outerRadius - innerRadius) / 2;\n    \n    // Ensure minimum tube radius for visibility\n    const finalTubeRadius = Math.max(tubeRadius, thickness);\n    \n    return new THREE.TorusGeometry(majorRadius, finalTubeRadius, 16, 100);\n  };\n\n  const createCoilGeometry = (radius = 1, height = 3, turns = 5, coilRadius = 0.15) => {\n    const points = [];\n    const segments = turns * 16;\n    \n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const angle = t * turns * Math.PI * 2;\n      const x = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      const y = (t - 0.5) * height;\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    \n    const curve = new THREE.CatmullRomCurve3(points);\n    return new THREE.TubeGeometry(curve, segments, coilRadius, 8, false);\n  };\n\n  const createMesh = (obj: SceneObject): THREE.Mesh | null => {\n    let geometry: THREE.BufferGeometry;\n\n    switch (obj.type) {\n      case 'box':\n        geometry = new THREE.BoxGeometry(1, 1, 1);\n        break;\n      case 'sphere':\n        geometry = new THREE.SphereGeometry(1, 32, 32);\n        break;\n      case 'cylinder':\n        geometry = new THREE.CylinderGeometry(1, 1, 2, 32);\n        break;\n      case 'torus':\n        geometry = new THREE.TorusGeometry(1, 0.4, 16, 100);\n        break;\n      case 'plane':\n        geometry = new THREE.PlaneGeometry(2, 2);\n        break;\n      case 'helix':\n        geometry = createHelixGeometry(\n          obj.parameters?.radius || 1,\n          obj.parameters?.height || 4,\n          obj.parameters?.turns || 3,\n          obj.parameters?.segments || 64\n        );\n        break;\n      case 'spiral':\n        geometry = createSpiralGeometry(\n          obj.parameters?.innerRadius || 0.5,\n          obj.parameters?.outerRadius || 2,\n          obj.parameters?.height || 3,\n          obj.parameters?.turns || 4\n        );\n        break;\n      case 'pyramid':\n        geometry = createPyramidGeometry(\n          obj.parameters?.baseSize || 2,\n          obj.parameters?.height || 3,\n          obj.parameters?.sides || 4\n        );\n        break;\n      case 'tower':\n        geometry = createTowerGeometry(\n          obj.parameters?.baseRadius || 1,\n          obj.parameters?.topRadius || 0.5,\n          obj.parameters?.height || 4,\n          obj.parameters?.levels || 3\n        );\n        break;\n      case 'ring':\n        geometry = createRingGeometry(\n          obj.parameters?.innerRadius || 0.5,\n          obj.parameters?.outerRadius || 1.5,\n          obj.parameters?.thickness || 0.2\n        );\n        break;\n      case 'coil':\n        geometry = createCoilGeometry(\n          obj.parameters?.radius || 1,\n          obj.parameters?.height || 3,\n          obj.parameters?.turns || 5,\n          obj.parameters?.coilRadius || 0.15\n        );\n        break;\n      default:\n        return null;\n    }\n\n    let material: THREE.Material;\n    const color = new THREE.Color(obj.color);\n\n    switch (obj.material) {\n      case 'wireframe':\n        material = new THREE.MeshBasicMaterial({ color, wireframe: true });\n        break;\n      case 'basic':\n        material = new THREE.MeshBasicMaterial({ color });\n        break;\n      case 'phong':\n        material = new THREE.MeshPhongMaterial({ color });\n        break;\n      default:\n        material = new THREE.MeshStandardMaterial({ color });\n    }\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(...obj.position);\n    mesh.rotation.set(...obj.rotation);\n    mesh.scale.set(...obj.scale);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n\n    return mesh;\n  };\n\n  const addObject = (type: SceneObject['type'], parameters?: { [key: string]: any }, customName?: string, position?: [number, number, number], aiPrompt?: string) => {\n    const newObject: SceneObject = {\n      id: `obj_${Date.now()}`,\n      type,\n      position: position || [0, 1, 0],\n      rotation: [0, 0, 0],\n      scale: [1, 1, 1],\n      color: '#4ecdc4',\n      material: 'standard',\n      name: customName || `${type.charAt(0).toUpperCase() + type.slice(1)} ${scene3D.objects.length + 1}`,\n      parameters,\n      aiPrompt\n    };\n\n    setScene3D(prev => ({\n      ...prev,\n      objects: [...prev.objects, newObject]\n    }));\n    \n    setSelectedObjectId(newObject.id);\n    return newObject;\n  };\n\n  const deleteObject = (objectId: string) => {\n    setScene3D(prev => ({\n      ...prev,\n      objects: prev.objects.filter(obj => obj.id !== objectId)\n    }));\n    \n    if (selectedObjectId === objectId) {\n      setSelectedObjectId(null);\n    }\n  };\n\n  const updateObject = (objectId: string, updates: Partial<SceneObject>) => {\n    setScene3D(prev => ({\n      ...prev,\n      objects: prev.objects.map(obj => \n        obj.id === objectId ? { ...obj, ...updates } : obj\n      )\n    }));\n  };\n\n  const handleSaveScene = () => {\n    const currentProjectId = projectManager.getCurrentProjectId();\n    if (currentProjectId) {\n      projectManager.updateProjectToolData(currentProjectId, '3d', {\n        scenes: [scene3D]\n      });\n      console.log('3D scene saved to project');\n    } else {\n      const newProject = projectManager.createProject(\n        `3D Scene ${new Date().toLocaleDateString()}`,\n        \"Created from 3D Designer\",\n        ['3d']\n      );\n      projectManager.updateProjectToolData(newProject.id, '3d', {\n        scenes: [scene3D]\n      });\n      console.log('New 3D project created and saved');\n    }\n  };\n\n  // Spatial arrangement calculator\n  const calculateSpatialPositions = (prompt: string, count: number) => {\n    const lowercasePrompt = prompt.toLowerCase();\n    const positions: [number, number, number][] = [];\n    const spacing = 3; // Distance between objects\n\n    // Detect spatial keywords and calculate positions accordingly\n    if (lowercasePrompt.includes('next to each other') || lowercasePrompt.includes('in a line') || \n        lowercasePrompt.includes('row') || lowercasePrompt.includes('series')) {\n      // Arrange in a line along X-axis\n      for (let i = 0; i < count; i++) {\n        const x = (i - (count - 1) / 2) * spacing;\n        positions.push([x, 1, 0]);\n      }\n    } else if (lowercasePrompt.includes('circle') || lowercasePrompt.includes('around') || \n               lowercasePrompt.includes('ring formation')) {\n      // Arrange in a circle\n      const radius = Math.max(3, count * 0.8);\n      for (let i = 0; i < count; i++) {\n        const angle = (i / count) * Math.PI * 2;\n        const x = Math.cos(angle) * radius;\n        const z = Math.sin(angle) * radius;\n        positions.push([x, 1, z]);\n      }\n    } else if (lowercasePrompt.includes('scattered') || lowercasePrompt.includes('random') || \n               lowercasePrompt.includes('spread out')) {\n      // Random scattered positions\n      for (let i = 0; i < count; i++) {\n        const x = (Math.random() - 0.5) * 10;\n        const z = (Math.random() - 0.5) * 10;\n        const y = 1 + Math.random() * 2; // Slight height variation\n        positions.push([x, y, z]);\n      }\n    } else if (lowercasePrompt.includes('grid') || lowercasePrompt.includes('square formation')) {\n      // Arrange in a grid\n      const gridSize = Math.ceil(Math.sqrt(count));\n      for (let i = 0; i < count; i++) {\n        const row = Math.floor(i / gridSize);\n        const col = i % gridSize;\n        const x = (col - (gridSize - 1) / 2) * spacing;\n        const z = (row - (gridSize - 1) / 2) * spacing;\n        positions.push([x, 1, z]);\n      }\n    } else if (lowercasePrompt.includes('triangle') || lowercasePrompt.includes('triangular')) {\n      // Arrange in a triangle formation\n      let currentRow = 0;\n      let positionInRow = 0;\n      for (let i = 0; i < count; i++) {\n        if (positionInRow > currentRow) {\n          currentRow++;\n          positionInRow = 0;\n        }\n        const x = (positionInRow - currentRow / 2) * spacing;\n        const z = currentRow * spacing * 0.866; // √3/2 for equilateral triangle\n        positions.push([x, 1, z]);\n        positionInRow++;\n      }\n    } else {\n      // Default: slight offset for multiple objects\n      for (let i = 0; i < count; i++) {\n        const x = i * 2; // Space them out along X-axis by default\n        positions.push([x, 1, 0]);\n      }\n    }\n\n    return positions;\n  };\n\n  // AI prompt parser for 3D model generation\n  const parseAI3DPrompt = (prompt: string) => {\n    const lowercasePrompt = prompt.toLowerCase();\n    const results = [];\n\n    // Pattern matching for different shapes and instructions (disambiguated keywords)\n    const patterns = [\n      {\n        keywords: ['helix', 'dna', 'spring', 'double helix'],\n        type: 'helix',\n        name: 'AI Generated Helix',\n        parameters: { radius: 1, height: 4, turns: 3, segments: 64 },\n        colors: ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4']\n      },\n      {\n        keywords: ['spiral', 'swirl', 'twirl', 'vortex', 'flat spiral'],\n        type: 'spiral',\n        name: 'AI Generated Spiral',\n        parameters: { innerRadius: 0.5, outerRadius: 2, height: 3, turns: 4 },\n        colors: ['#feca57', '#ff9ff3', '#54a0ff', '#5f27cd']\n      },\n      {\n        keywords: ['pyramid', 'triangle', 'pointy', 'egyptian'],\n        type: 'pyramid',\n        name: 'AI Generated Pyramid',\n        parameters: { baseSize: 2, height: 3, sides: 4 },\n        colors: ['#ffb142', '#ff6348', '#ff4757', '#ffa502']\n      },\n      {\n        keywords: ['tower', 'tall', 'skyscraper', 'spire'],\n        type: 'tower',\n        name: 'AI Generated Tower',\n        parameters: { baseRadius: 1, topRadius: 0.5, height: 4, levels: 3 },\n        colors: ['#747d8c', '#a4b0be', '#57606f', '#2f3542']\n      },\n      {\n        keywords: ['ring', 'circle', 'donut', 'torus'],\n        type: 'ring',\n        name: 'AI Generated Ring',\n        parameters: { innerRadius: 0.5, outerRadius: 1.5, thickness: 0.2 },\n        colors: ['#3742fa', '#2f3542', '#ff4757', '#7bed9f']\n      },\n      {\n        keywords: ['coil', 'wire', 'cable', 'tube', 'spring coil'],\n        type: 'coil',\n        name: 'AI Generated Coil',\n        parameters: { radius: 1, height: 3, turns: 5, coilRadius: 0.15 },\n        colors: ['#70a1ff', '#5352ed', '#ff6b81', '#ffa8a8']\n      }\n    ];\n\n    // Check for matches (first match wins to avoid overlaps)\n    let matched = false;\n    for (const pattern of patterns) {\n      if (!matched && pattern.keywords.some(keyword => lowercasePrompt.includes(keyword))) {\n        const color = pattern.colors[Math.floor(Math.random() * pattern.colors.length)];\n        results.push({\n          type: pattern.type,\n          name: pattern.name,\n          parameters: pattern.parameters,\n          color: color\n        });\n        matched = true; // Prevent multiple matches for overlapping keywords\n        break;\n      }\n    }\n\n    // Handle multiple objects and spatial arrangements\n    let count = 1;\n    if (lowercasePrompt.includes('multiple') || lowercasePrompt.includes('several') || \n        lowercasePrompt.includes('many') || lowercasePrompt.includes('series') ||\n        lowercasePrompt.includes('group') || lowercasePrompt.includes('collection')) {\n      count = 3;\n    }\n    \n    // Extract specific numbers from prompt\n    const numberMatches = lowercasePrompt.match(/\\b(\\d+)\\b/g);\n    if (numberMatches) {\n      const num = parseInt(numberMatches[0]);\n      if (num >= 2 && num <= 10) {\n        count = num;\n      }\n    }\n\n    // Special keywords that imply multiple objects\n    if (lowercasePrompt.includes('next to each other') || lowercasePrompt.includes('in a line') ||\n        lowercasePrompt.includes('circle') || lowercasePrompt.includes('grid') ||\n        lowercasePrompt.includes('scattered')) {\n      count = Math.max(count, 3);\n    }\n\n    // Calculate positions for all objects\n    const positions = calculateSpatialPositions(prompt, count);\n\n    // Create multiple objects with different positions\n    if (count > 1 && results.length > 0) {\n      const baseResult = results[0];\n      results.length = 0; // Clear and rebuild with positions\n      \n      for (let i = 0; i < count; i++) {\n        const variation: any = { \n          ...baseResult,\n          position: positions[i],\n          name: `${baseResult.name} ${i + 1}`,\n          parameters: { ...baseResult.parameters }\n        };\n        \n        // Add some variation to make each object unique\n        if (variation.type === 'helix') {\n          variation.parameters.turns = 2 + Math.random() * 3;\n          variation.parameters.radius = 0.8 + Math.random() * 0.8;\n        } else if (variation.type === 'tower') {\n          variation.parameters.height = 3 + Math.random() * 2;\n          variation.parameters.levels = 2 + Math.floor(Math.random() * 3);\n        } else if (variation.type === 'spiral') {\n          variation.parameters.turns = 3 + Math.random() * 2;\n          variation.parameters.outerRadius = 1.5 + Math.random() * 1;\n        }\n        \n        results.push(variation);\n      }\n    } else if (results.length > 0) {\n      // Single object gets the first calculated position\n      (results[0] as any).position = positions[0];\n    }\n\n    // Default fallback\n    if (results.length === 0) {\n      // Try to guess from general terms\n      if (lowercasePrompt.includes('organic') || lowercasePrompt.includes('natural')) {\n        results.push({\n          type: 'helix',\n          name: 'AI Generated Organic Shape',\n          parameters: { radius: 0.8, height: 3, turns: 2.5, segments: 48 },\n          color: '#2ed573',\n          position: [0, 1, 0]\n        });\n      } else if (lowercasePrompt.includes('geometric') || lowercasePrompt.includes('sharp')) {\n        results.push({\n          type: 'pyramid',\n          name: 'AI Generated Geometric Shape',\n          parameters: { baseSize: 1.5, height: 2.5, sides: 6 },\n          color: '#1e90ff',\n          position: [0, 1, 0]\n        });\n      }\n    }\n\n    // Calculate positions for all objects if not already set\n    if (results.length > 0 && !results[0].position) {\n      const positions = calculateSpatialPositions(prompt, results.length);\n      results.forEach((result, index) => {\n        (result as any).position = positions[index];\n      });\n    }\n\n    return results;\n  };\n\n  const handleGenerateAI3D = async () => {\n    if (!aiPrompt.trim()) return;\n    \n    setIsAIProcessing(true);\n    try {\n      // Parse the prompt to identify 3D models to create\n      const modelSpecs = parseAI3DPrompt(aiPrompt);\n      \n      const response = await replitAI.generateResponse(\n        `Create a 3D scene description for: \"${aiPrompt}\". I am about to generate actual 3D models based on your prompt. ${\n          modelSpecs.length > 0 \n            ? `I will create: ${modelSpecs.map(spec => spec.name).join(', ')}.` \n            : 'Suggest what 3D objects would best represent this concept.'\n        } Provide artistic guidance about colors, composition, and visual storytelling.`,\n        {\n          tool: \"3D Designer\",\n          project: \"AI Creative Platform\",\n          currentWork: `Creating 3D models for: ${aiPrompt}`\n        }\n      );\n      \n      setAiSuggestion(response.content);\n      \n      // Generate the actual 3D models\n      if (modelSpecs.length > 0) {\n        let delay = 800; // Start after AI response\n        modelSpecs.forEach((spec, index) => {\n          setTimeout(() => {\n            const newObject = addObject(spec.type as SceneObject['type'], spec.parameters, spec.name, spec.position, aiPrompt);\n            // Update color\n            if (newObject) {\n              updateObject(newObject.id, { color: spec.color });\n            }\n          }, delay + index * 300); // Stagger creation\n        });\n        \n        // Update AI suggestion to include generation status\n        setTimeout(() => {\n          setAiSuggestion(prev => \n            prev + `\\n\\nGenerated ${modelSpecs.length} 3D model${modelSpecs.length > 1 ? 's' : ''} based on your prompt!`\n          );\n        }, delay + modelSpecs.length * 300 + 200);\n      } else {\n        // Fallback: Create a simple shape\n        setTimeout(() => {\n          addObject('sphere', { radius: 1 }, 'AI Interpretation', [0, 1, 0], aiPrompt);\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('AI 3D generation error:', error);\n      setAiSuggestion(\"Sorry, AI assistance is temporarily unavailable.\");\n    } finally {\n      setIsAIProcessing(false);\n    }\n  };\n\n  const handleClearScene = () => {\n    setScene3D(prev => ({\n      ...prev,\n      objects: []\n    }));\n    setSelectedObjectId(null);\n  };\n\n  const exportScene = () => {\n    const sceneData = JSON.stringify(scene3D, null, 2);\n    const blob = new Blob([sceneData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${scene3D.name.replace(/\\s+/g, '_')}_3d_scene.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const resetCamera = () => {\n    if (cameraRef.current) {\n      cameraRef.current.position.set(10, 10, 10);\n      cameraRef.current.lookAt(0, 0, 0);\n      setCameraControls(prev => ({ ...prev, zoom: 1 }));\n    }\n  };\n\n  const zoomIn = () => {\n    if (cameraRef.current) {\n      const scale = 0.8; // Zoom in by moving camera closer\n      cameraRef.current.position.multiplyScalar(scale);\n      setCameraControls(prev => ({ ...prev, zoom: prev.zoom * scale }));\n    }\n  };\n\n  const zoomOut = () => {\n    if (cameraRef.current) {\n      const scale = 1.25; // Zoom out by moving camera farther\n      cameraRef.current.position.multiplyScalar(scale);\n      setCameraControls(prev => ({ ...prev, zoom: prev.zoom * scale }));\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex bg-background\">\n      {/* Header */}\n      <div className=\"absolute top-0 left-0 right-0 z-10 border-b px-4 py-2 flex items-center justify-between bg-card/80 backdrop-blur-sm\">\n        <div>\n          <h1 className=\"font-semibold text-lg\">3D Designer</h1>\n          <p className=\"text-xs text-muted-foreground\">\n            {projectManager.getCurrentProject()?.name || \"No active project\"}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Badge className=\"bg-primary/10 text-primary\" data-testid=\"badge-ai-3d\">\n            <Bot className=\"w-3 h-3 mr-1\" />\n            AI Powered\n          </Badge>\n          <Button size=\"sm\" onClick={handleSaveScene} data-testid=\"button-save-3d\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" onClick={exportScene} data-testid=\"button-export-3d\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" onClick={resetCamera} data-testid=\"button-reset-camera\">\n            <RotateCcw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Left Panel - Tools */}\n      <div className=\"w-80 border-r bg-muted/30 mt-16 overflow-y-auto\">\n        <Tabs defaultValue=\"objects\" className=\"h-full\">\n          <TabsList className=\"grid w-full grid-cols-3 m-2\">\n            <TabsTrigger value=\"objects\">Objects</TabsTrigger>\n            <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n            <TabsTrigger value=\"ai\">AI</TabsTrigger>\n          </TabsList>\n          \n          {/* Objects Tab */}\n          <TabsContent value=\"objects\" className=\"p-4 space-y-4\">\n            <div>\n              <h3 className=\"font-medium mb-3\">Add Objects</h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => addObject('box')}\n                  data-testid=\"button-add-box\"\n                >\n                  <BoxIcon className=\"w-4 h-4 mr-2\" />\n                  Box\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => addObject('sphere')}\n                  data-testid=\"button-add-sphere\"\n                >\n                  <Circle className=\"w-4 h-4 mr-2\" />\n                  Sphere\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => addObject('cylinder')}\n                  data-testid=\"button-add-cylinder\"\n                >\n                  <CylinderIcon className=\"w-4 h-4 mr-2\" />\n                  Cylinder\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => addObject('torus')}\n                  data-testid=\"button-add-torus\"\n                >\n                  <Circle className=\"w-4 h-4 mr-2\" />\n                  Torus\n                </Button>\n              </div>\n            </div>\n\n            {/* Camera Controls */}\n            <div>\n              <h3 className=\"font-medium mb-3\">Camera</h3>\n              <div className=\"space-y-2\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={zoomIn}\n                    data-testid=\"button-zoom-in\"\n                  >\n                    <ZoomIn className=\"w-4 h-4 mr-1\" />\n                    Zoom In\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={zoomOut}\n                    data-testid=\"button-zoom-out\"\n                  >\n                    <ZoomOut className=\"w-4 h-4 mr-1\" />\n                    Zoom Out\n                  </Button>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  onClick={() => setCameraControls(prev => ({ ...prev, autoRotate: !prev.autoRotate }))}\n                  data-testid=\"button-auto-rotate\"\n                >\n                  <RotateCw className=\"w-4 h-4 mr-2\" />\n                  {cameraControls.autoRotate ? 'Stop' : 'Start'} Auto Rotate\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  onClick={resetCamera}\n                  data-testid=\"button-reset-view\"\n                >\n                  <Move3D className=\"w-4 h-4 mr-2\" />\n                  Reset View\n                </Button>\n              </div>\n            </div>\n\n            {/* Scene Objects List */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-medium\">Scene Objects</h3>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\" \n                  onClick={handleClearScene}\n                  disabled={scene3D.objects.length === 0}\n                  data-testid=\"button-clear-scene\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Clear\n                </Button>\n              </div>\n              \n              <div className=\"space-y-1 max-h-48 overflow-y-auto\">\n                {scene3D.objects.map((obj) => (\n                  <div\n                    key={obj.id}\n                    className={`flex items-center justify-between p-2 rounded cursor-pointer hover-elevate ${\n                      selectedObjectId === obj.id ? 'bg-primary/10 border border-primary/20' : 'bg-card'\n                    }`}\n                    onClick={() => setSelectedObjectId(obj.id)}\n                    data-testid={`object-item-${obj.id}`}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded\" \n                        style={{ backgroundColor: obj.color }}\n                      />\n                      <span className=\"text-sm truncate\">{obj.name}</span>\n                    </div>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      className=\"h-6 w-6\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        deleteObject(obj.id);\n                      }}\n                      data-testid={`button-delete-${obj.id}`}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                {scene3D.objects.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Lightbulb className=\"w-8 h-8 mx-auto mb-2\" />\n                    <p className=\"text-sm\">No objects in scene</p>\n                    <p className=\"text-xs\">Add objects to start designing</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Properties Tab */}\n          <TabsContent value=\"properties\" className=\"p-4 space-y-4\">\n            {selectedObject ? (\n              <div className=\"space-y-4\">\n                <h3 className=\"font-medium\">Object Properties</h3>\n                \n                {/* Object Name */}\n                <div>\n                  <Label htmlFor=\"object-name\">Name</Label>\n                  <Input\n                    id=\"object-name\"\n                    value={selectedObject.name}\n                    onChange={(e) => updateObject(selectedObject.id, { name: e.target.value })}\n                    data-testid=\"input-object-name\"\n                  />\n                </div>\n\n                {/* Color */}\n                <div>\n                  <Label htmlFor=\"object-color\">Color</Label>\n                  <Input\n                    id=\"object-color\"\n                    type=\"color\"\n                    value={selectedObject.color}\n                    onChange={(e) => updateObject(selectedObject.id, { color: e.target.value })}\n                    data-testid=\"input-object-color\"\n                  />\n                </div>\n\n                {/* Material */}\n                <div>\n                  <Label htmlFor=\"object-material\">Material</Label>\n                  <Select \n                    value={selectedObject.material} \n                    onValueChange={(value) => updateObject(selectedObject.id, { material: value as SceneObject['material'] })}\n                  >\n                    <SelectTrigger data-testid=\"select-material\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"standard\">Standard</SelectItem>\n                      <SelectItem value=\"basic\">Basic</SelectItem>\n                      <SelectItem value=\"phong\">Phong</SelectItem>\n                      <SelectItem value=\"wireframe\">Wireframe</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* AI Prompt (if object was AI-generated) */}\n                {selectedObject.aiPrompt && (\n                  <div>\n                    <Label htmlFor=\"ai-prompt\">Original AI Prompt</Label>\n                    <Input\n                      id=\"ai-prompt\"\n                      value={selectedObject.aiPrompt}\n                      onChange={(e) => updateObject(selectedObject.id, { aiPrompt: e.target.value })}\n                      placeholder=\"Enter AI prompt to regenerate...\"\n                      data-testid=\"input-ai-prompt-edit\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Edit this prompt and regenerate to modify the object\n                    </p>\n                  </div>\n                )}\n\n                {/* Position */}\n                <div>\n                  <Label>Position</Label>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {(['X', 'Y', 'Z'] as const).map((axis, idx) => (\n                      <div key={axis}>\n                        <Label className=\"text-xs\">{axis}</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={selectedObject.position[idx]}\n                          onChange={(e) => {\n                            const newPosition = [...selectedObject.position] as [number, number, number];\n                            newPosition[idx] = parseFloat(e.target.value) || 0;\n                            updateObject(selectedObject.id, { position: newPosition });\n                          }}\n                          onFocus={(e) => e.target.select()}\n                          className=\"[&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [-moz-appearance:textfield]\"\n                          data-testid={`input-position-${axis.toLowerCase()}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Rotation */}\n                <div>\n                  <Label>Rotation (radians)</Label>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {(['X', 'Y', 'Z'] as const).map((axis, idx) => (\n                      <div key={axis}>\n                        <Label className=\"text-xs\">{axis}</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={selectedObject.rotation[idx]}\n                          onChange={(e) => {\n                            const newRotation = [...selectedObject.rotation] as [number, number, number];\n                            newRotation[idx] = parseFloat(e.target.value) || 0;\n                            updateObject(selectedObject.id, { rotation: newRotation });\n                          }}\n                          onFocus={(e) => e.target.select()}\n                          className=\"[&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [-moz-appearance:textfield]\"\n                          data-testid={`input-rotation-${axis.toLowerCase()}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Scale */}\n                <div>\n                  <Label>Scale</Label>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {(['X', 'Y', 'Z'] as const).map((axis, idx) => (\n                      <div key={axis}>\n                        <Label className=\"text-xs\">{axis}</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          min=\"0.1\"\n                          value={selectedObject.scale[idx]}\n                          onChange={(e) => {\n                            const newScale = [...selectedObject.scale] as [number, number, number];\n                            newScale[idx] = Math.max(0.1, parseFloat(e.target.value) || 1);\n                            updateObject(selectedObject.id, { scale: newScale });\n                          }}\n                          onFocus={(e) => e.target.select()}\n                          className=\"[&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [-moz-appearance:textfield]\"\n                          data-testid={`input-scale-${axis.toLowerCase()}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Move3D className=\"w-8 h-8 mx-auto mb-2\" />\n                <p className=\"text-sm\">No object selected</p>\n                <p className=\"text-xs\">Click an object to edit properties</p>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* AI Tab */}\n          <TabsContent value=\"ai\" className=\"p-4 space-y-4\">\n            <div>\n              <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4 text-primary\" />\n                AI 3D Assistant\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <Label htmlFor=\"ai-prompt\">Describe 3D models to create</Label>\n                  <Input\n                    id=\"ai-prompt\"\n                    placeholder=\"E.g., 'draw a helix', 'create a spiral tower'...\"\n                    value={aiPrompt}\n                    onChange={(e) => setAiPrompt(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleGenerateAI3D()}\n                    data-testid=\"input-ai-prompt\"\n                  />\n                </div>\n                \n                <Button \n                  className=\"w-full\" \n                  onClick={handleGenerateAI3D}\n                  disabled={isAIProcessing || !aiPrompt.trim()}\n                  data-testid=\"button-generate-ai-3d\"\n                >\n                  {isAIProcessing ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                      Creating 3D Models...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Generate & Render\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {/* Quick AI Actions */}\n              <div className=\"mt-4\">\n                <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Quick Generate</h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => {\n                      setAiPrompt('draw a helix');\n                      setTimeout(() => handleGenerateAI3D(), 100);\n                    }}\n                    disabled={isAIProcessing}\n                    data-testid=\"button-quick-helix\"\n                  >\n                    <Lightbulb className=\"w-3 h-3 mr-1\" />\n                    Helix\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => {\n                      setAiPrompt('create a spiral');\n                      setTimeout(() => handleGenerateAI3D(), 100);\n                    }}\n                    disabled={isAIProcessing}\n                    data-testid=\"button-quick-spiral\"\n                  >\n                    <Lightbulb className=\"w-3 h-3 mr-1\" />\n                    Spiral\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => {\n                      setAiPrompt('build a tower');\n                      setTimeout(() => handleGenerateAI3D(), 100);\n                    }}\n                    disabled={isAIProcessing}\n                    data-testid=\"button-quick-tower\"\n                  >\n                    <Lightbulb className=\"w-3 h-3 mr-1\" />\n                    Tower\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => {\n                      setAiPrompt('organic coil structure');\n                      setTimeout(() => handleGenerateAI3D(), 100);\n                    }}\n                    disabled={isAIProcessing}\n                    data-testid=\"button-quick-organic\"\n                  >\n                    <Lightbulb className=\"w-3 h-3 mr-1\" />\n                    Organic\n                  </Button>\n                </div>\n              </div>\n\n              {/* AI Response */}\n              {(aiSuggestion || isAIProcessing) && (\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Bot className=\"w-4 h-4\" />\n                      {isAIProcessing ? \"AI is thinking...\" : \"AI Suggestions\"}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {isAIProcessing ? (\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                        Analyzing your request and generating 3D models...\n                      </div>\n                    ) : (\n                      <div className=\"text-sm leading-relaxed whitespace-pre-wrap\">{aiSuggestion}</div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Main 3D Canvas */}\n      <div className=\"flex-1 mt-16 relative\">\n        {webglError ? (\n          <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n            <Card className=\"max-w-md mx-4\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-destructive\">\n                  <Settings className=\"w-5 h-5\" />\n                  3D Graphics Unavailable\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {webglError}\n                </p>\n                <div className=\"space-y-2 text-sm\">\n                  <p className=\"font-medium\">To enable 3D features:</p>\n                  <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                    <li>Use a modern browser (Chrome, Firefox, Safari, Edge)</li>\n                    <li>Enable hardware acceleration in browser settings</li>\n                    <li>Update your graphics drivers</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div \n            ref={mountRef} \n            className={`w-full h-full bg-gray-100 ${isDraggingObject ? 'cursor-move' : isRotatingObject ? 'cursor-crosshair' : 'cursor-default'}`}\n            data-testid=\"three-canvas\"\n          />\n        )}\n\n        {/* Canvas Instructions */}\n        <div className=\"absolute top-4 right-4 bg-card/80 backdrop-blur-sm rounded-lg p-3 border text-sm\">\n          <p className=\"font-medium mb-1\">3D Controls:</p>\n          <p className=\"text-xs text-muted-foreground\">• Click & drag to rotate</p>\n          <p className=\"text-xs text-muted-foreground\">• Scroll to zoom</p>\n          <p className=\"text-xs text-muted-foreground\">• Click objects to select</p>\n          <p className=\"text-xs text-muted-foreground\">• Ctrl+drag objects to move</p>\n          <p className=\"text-xs text-muted-foreground\">• Shift+drag objects to rotate</p>\n        </div>\n\n        {/* Drag mode indicator */}\n        {isDraggingObject && (\n          <div className=\"absolute top-4 left-4 bg-primary text-primary-foreground px-3 py-2 rounded-lg shadow-lg z-10\">\n            <div className=\"flex items-center gap-2\">\n              <Move3D className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Moving Object</span>\n            </div>\n          </div>\n        )}\n\n        {/* Rotation mode indicator */}\n        {isRotatingObject && (\n          <div className=\"absolute top-4 left-4 bg-secondary text-secondary-foreground px-3 py-2 rounded-lg shadow-lg z-10\">\n            <div className=\"flex items-center gap-2\">\n              <RotateCcw className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Rotating Object</span>\n            </div>\n          </div>\n        )}\n\n        {/* Scene Info */}\n        <div className=\"absolute bottom-4 left-4 bg-card/80 backdrop-blur-sm rounded-lg p-3 border\">\n          <p className=\"text-sm font-medium\">{scene3D.name}</p>\n          <p className=\"text-xs text-muted-foreground\">\n            {scene3D.objects.length} object{scene3D.objects.length !== 1 ? 's' : ''}\n            {selectedObjectId && ` • ${selectedObject?.name} selected`}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":62949},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/project-manager.ts":{"content":"import { format } from \"date-fns\";\n\nexport interface CreativeProject {\n  id: string;\n  name: string;\n  description: string;\n  thumbnail?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  tools: string[];\n  data: {\n    codeFiles?: CodeFile[];\n    models3D?: any[];\n    musicTracks?: any[];\n    videoClips?: any[];\n    collaborators?: string[];\n    [key: string]: any; // Allow dynamic tool data\n  };\n  settings: {\n    aiAssistanceEnabled: boolean;\n    theme: 'dark' | 'light' | 'auto';\n    autoSave: boolean;\n  };\n}\n\nexport interface CodeFile {\n  id: string;\n  name: string;\n  language: string;\n  content: string;\n}\n\nclass ProjectManager {\n  private readonly STORAGE_KEY = 'creativeStudio_projects';\n  private readonly CURRENT_PROJECT_KEY = 'creativeStudio_currentProject';\n  \n  // Get all saved projects\n  getAllProjects(): CreativeProject[] {\n    try {\n      const saved = localStorage.getItem(this.STORAGE_KEY);\n      if (saved) {\n        const projects = JSON.parse(saved);\n        // Convert date strings back to Date objects\n        return projects.map((p: any) => ({\n          ...p,\n          createdAt: new Date(p.createdAt),\n          updatedAt: new Date(p.updatedAt)\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to load projects:', error);\n    }\n    return [];\n  }\n\n  // Create a new project\n  createProject(name: string, description: string = \"\", tools: string[] = []): CreativeProject {\n    const project: CreativeProject = {\n      id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      description,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      tools,\n      data: {},\n      settings: {\n        aiAssistanceEnabled: true,\n        theme: 'auto',\n        autoSave: true\n      }\n    };\n\n    this.saveProject(project);\n    this.setCurrentProject(project.id);\n    return project;\n  }\n\n  // Save/update a project\n  saveProject(project: CreativeProject): void {\n    try {\n      const projects = this.getAllProjects();\n      const existingIndex = projects.findIndex(p => p.id === project.id);\n      \n      project.updatedAt = new Date();\n      \n      if (existingIndex >= 0) {\n        projects[existingIndex] = project;\n      } else {\n        projects.push(project);\n      }\n      \n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(projects));\n      console.log(`Project \"${project.name}\" saved successfully`);\n    } catch (error) {\n      console.error('Failed to save project:', error);\n      throw new Error('Failed to save project');\n    }\n  }\n\n  // Load a specific project\n  getProject(id: string): CreativeProject | null {\n    const projects = this.getAllProjects();\n    return projects.find(p => p.id === id) || null;\n  }\n\n  // Delete a project\n  deleteProject(id: string): boolean {\n    try {\n      const projects = this.getAllProjects();\n      const filteredProjects = projects.filter(p => p.id !== id);\n      \n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredProjects));\n      \n      // Clear current project if it was deleted\n      if (this.getCurrentProjectId() === id) {\n        localStorage.removeItem(this.CURRENT_PROJECT_KEY);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to delete project:', error);\n      return false;\n    }\n  }\n\n  // Duplicate a project\n  duplicateProject(id: string, newName?: string): CreativeProject | null {\n    const originalProject = this.getProject(id);\n    if (!originalProject) return null;\n\n    const duplicatedProject: CreativeProject = {\n      ...originalProject,\n      id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name: newName || `${originalProject.name} (Copy)`,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.saveProject(duplicatedProject);\n    return duplicatedProject;\n  }\n\n  // Set current active project\n  setCurrentProject(id: string): void {\n    localStorage.setItem(this.CURRENT_PROJECT_KEY, id);\n  }\n\n  // Get current active project ID\n  getCurrentProjectId(): string | null {\n    return localStorage.getItem(this.CURRENT_PROJECT_KEY);\n  }\n\n  // Get current active project\n  getCurrentProject(): CreativeProject | null {\n    const currentId = this.getCurrentProjectId();\n    return currentId ? this.getProject(currentId) : null;\n  }\n\n  // Update project data for a specific tool\n  updateProjectToolData(projectId: string, tool: string, data: any): void {\n    const project = this.getProject(projectId);\n    if (!project) return;\n\n    // Update tool data\n    switch (tool.toLowerCase()) {\n      case 'code':\n        project.data.codeFiles = data;\n        break;\n      case '3d':\n        project.data.models3D = data;\n        break;\n      case 'music':\n        project.data.musicTracks = data;\n        break;\n      case 'video':\n        project.data.videoClips = data;\n        break;\n      default:\n        project.data[tool] = data;\n    }\n\n    // Add tool to tools array if not already present\n    if (!project.tools.includes(tool)) {\n      project.tools.push(tool);\n    }\n\n    this.saveProject(project);\n  }\n\n  // Get projects by tool\n  getProjectsByTool(tool: string): CreativeProject[] {\n    return this.getAllProjects().filter(p => p.tools.includes(tool));\n  }\n\n  // Import project from file\n  importProject(projectData: any): CreativeProject | null {\n    try {\n      const project: CreativeProject = {\n        ...projectData,\n        id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(projectData.createdAt || Date.now()),\n        updatedAt: new Date(),\n      };\n      \n      this.saveProject(project);\n      return project;\n    } catch (error) {\n      console.error('Failed to import project:', error);\n      return null;\n    }\n  }\n\n  // Export project to downloadable file\n  exportProject(id: string): void {\n    const project = this.getProject(id);\n    if (!project) return;\n\n    const exportData = {\n      ...project,\n      exportedAt: new Date().toISOString(),\n      version: \"1.0\"\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${project.name.replace(/\\s+/g, '_')}_project.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  // Get project statistics\n  getProjectStats(): {\n    totalProjects: number;\n    totalTools: number;\n    recentProjects: CreativeProject[];\n    topTools: { tool: string; count: number }[];\n  } {\n    const projects = this.getAllProjects();\n    const toolCounts = new Map<string, number>();\n\n    projects.forEach(project => {\n      project.tools.forEach(tool => {\n        toolCounts.set(tool, (toolCounts.get(tool) || 0) + 1);\n      });\n    });\n\n    const topTools = Array.from(toolCounts.entries())\n      .map(([tool, count]) => ({ tool, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      totalProjects: projects.length,\n      totalTools: toolCounts.size,\n      recentProjects: projects\n        .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())\n        .slice(0, 6),\n      topTools\n    };\n  }\n\n  // Search projects\n  searchProjects(query: string): CreativeProject[] {\n    const projects = this.getAllProjects();\n    const searchTerm = query.toLowerCase();\n    \n    return projects.filter(project =>\n      project.name.toLowerCase().includes(searchTerm) ||\n      project.description.toLowerCase().includes(searchTerm) ||\n      project.tools.some(tool => tool.toLowerCase().includes(searchTerm))\n    );\n  }\n}\n\n// Export singleton instance\nexport const projectManager = new ProjectManager();\n\n// Utility functions\nexport const formatProjectDate = (date: Date): string => {\n  return format(date, 'MMM d, yyyy');\n};\n\nexport const getProjectIcon = (tools: string[]): string => {\n  if (tools.includes('code')) return '💻';\n  if (tools.includes('3d')) return '🎯';\n  if (tools.includes('music')) return '🎵';\n  if (tools.includes('video')) return '🎬';\n  return '🎨';\n};\n\nexport const getToolDisplayName = (tool: string): string => {\n  const toolNames: { [key: string]: string } = {\n    'code': 'Code Editor',\n    '3d': '3D Designer',\n    'music': 'Music Studio',\n    'video': 'Video Editor'\n  };\n  \n  return toolNames[tool.toLowerCase()] || tool;\n};","size_bytes":8425},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/replit-ai.ts":{"content":"// Replit AI Integration - Uses Replit's built-in models\n// No external API keys required - works with hackathon account\n\ninterface AIResponse {\n  content: string;\n  suggestions?: string[];\n  type: 'response' | 'suggestion' | 'error';\n}\n\ninterface CreativeContext {\n  tool: string;\n  project: string;\n  currentWork: string;\n}\n\nexport class ReplitAI {\n  private static instance: ReplitAI;\n\n  static getInstance(): ReplitAI {\n    if (!ReplitAI.instance) {\n      ReplitAI.instance = new ReplitAI();\n    }\n    return ReplitAI.instance;\n  }\n\n  // Simulate AI responses using Replit's built-in intelligence\n  // In a real implementation, this would connect to Replit's AI infrastructure\n  async generateResponse(message: string, context?: CreativeContext): Promise<AIResponse> {\n    // Simulate network delay for realistic experience\n    await this.delay(1000 + Math.random() * 1500);\n\n    const responses = this.getContextualResponses(message, context);\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n    \n    return {\n      content: randomResponse.content,\n      suggestions: randomResponse.suggestions,\n      type: 'response'\n    };\n  }\n\n  async generateCreativeSuggestions(tool: string, currentWork: string): Promise<AIResponse> {\n    await this.delay(800);\n    \n    const suggestions = this.getToolSpecificSuggestions(tool, currentWork);\n    \n    return {\n      content: `Based on your current ${tool} work, here are some AI-powered suggestions:`,\n      suggestions: suggestions,\n      type: 'suggestion'\n    };\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private getContextualResponses(message: string, context?: CreativeContext) {\n    const messageWords = message.toLowerCase().split(' ');\n    \n    // 3D Design responses\n    if (messageWords.some(word => ['3d', 'model', 'render', 'material', 'mesh'].includes(word))) {\n      return [\n        {\n          content: \"For 3D modeling, I recommend starting with basic primitives and using subdivision surfaces for organic shapes. Consider your lighting setup early - it dramatically affects how materials appear.\",\n          suggestions: [\"Add ambient occlusion\", \"Try PBR materials\", \"Use HDRI lighting\", \"Enable real-time ray tracing\"]\n        },\n        {\n          content: \"Your 3D scene could benefit from better composition. Try using the rule of thirds and consider the viewing angle. Also, don't forget about texture resolution - higher isn't always better for real-time rendering.\",\n          suggestions: [\"Optimize texture sizes\", \"Use normal maps\", \"Add detail textures\", \"Consider LOD models\"]\n        }\n      ];\n    }\n\n    // Music production responses  \n    if (messageWords.some(word => ['music', 'audio', 'sound', 'melody', 'beat', 'mix'].includes(word))) {\n      return [\n        {\n          content: \"For music composition, start with a strong melodic hook. Layer your sounds gradually - bass foundation first, then drums, melody, and finally harmonics. Don't overcrowd the frequency spectrum.\",\n          suggestions: [\"Add reverb to vocals\", \"Use sidechain compression\", \"Layer string sections\", \"Apply EQ to bass\"]\n        },\n        {\n          content: \"Your mix could use some spatial depth. Try panning different instruments across the stereo field and use reverb to place elements in different 'rooms'. Also consider the dynamic range - modern music benefits from some compression but not too much.\",\n          suggestions: [\"Pan drums center\", \"Add delay to lead\", \"Use chorus on guitars\", \"Apply limiting carefully\"]\n        }\n      ];\n    }\n\n    // Video editing responses\n    if (messageWords.some(word => ['video', 'edit', 'cut', 'transition', 'color', 'grade'].includes(word))) {\n      return [\n        {\n          content: \"For video editing, pacing is everything. Match your cuts to the rhythm of your content - whether that's music, dialogue, or natural movement. Color correction should enhance the story, not distract from it.\",\n          suggestions: [\"Use J and L cuts\", \"Add subtle transitions\", \"Color grade for mood\", \"Stabilize handheld footage\"]\n        },\n        {\n          content: \"Your video flow could be improved with better transition timing. Consider the emotional arc of your story and use cuts to enhance tension or provide relief. Audio is 50% of the experience - don't neglect it.\",\n          suggestions: [\"Sync to music beats\", \"Use motion blur\", \"Add film grain\", \"Balance audio levels\"]\n        }\n      ];\n    }\n\n    // Code development responses\n    if (messageWords.some(word => ['code', 'program', 'function', 'algorithm', 'debug', 'optimize'].includes(word))) {\n      return [\n        {\n          content: \"For creative coding, focus on modularity and reusability. Break complex visual effects into smaller functions. Use consistent naming conventions and comment your creative algorithms - future you will thank you.\",\n          suggestions: [\"Use object pooling\", \"Optimize render loops\", \"Add error handling\", \"Implement caching\"]\n        },\n        {\n          content: \"Your code structure looks good, but consider performance optimization. For real-time graphics, minimize allocations in update loops and batch similar operations together.\",\n          suggestions: [\"Profile performance\", \"Reduce draw calls\", \"Cache calculations\", \"Use web workers\"]\n        }\n      ];\n    }\n\n    // General creative responses\n    return [\n      {\n        content: \"Creativity thrives on constraints. Try limiting your color palette, working with a specific theme, or setting time boundaries. Sometimes the best breakthroughs come from working within limitations.\",\n        suggestions: [\"Set creative constraints\", \"Try new techniques\", \"Study references\", \"Iterate quickly\"]\n      },\n      {\n        content: \"Great creative work often comes from combining unexpected elements. Look for inspiration outside your medium - a musician might find rhythm in architecture, a 3D artist might find forms in nature.\",\n        suggestions: [\"Cross-pollinate ideas\", \"Study other mediums\", \"Take breaks\", \"Collaborate with others\"]\n      },\n      {\n        content: \"The key to creative growth is consistent practice and experimentation. Don't be afraid to create 'bad' work - it's all part of the learning process. Focus on the process rather than just the outcome.\",\n        suggestions: [\"Practice daily\", \"Experiment freely\", \"Share your work\", \"Get feedback\"]\n      }\n    ];\n  }\n\n  private getToolSpecificSuggestions(tool: string, currentWork: string): string[] {\n    switch (tool.toLowerCase()) {\n      case '3d design':\n      case '3d designer':\n        return [\n          \"Try using subdivision surfaces for smoother organic shapes\",\n          \"Add ambient occlusion for more realistic shadows\",\n          \"Consider using PBR materials for photorealistic rendering\",\n          \"Use reference images to improve proportions\",\n          \"Add edge loops to control geometry flow\"\n        ];\n\n      case 'music':\n      case 'music studio':\n        return [\n          \"Layer a subtle string section in the background\",\n          \"Add sidechain compression to create pumping effect\",\n          \"Use reverb to create spatial depth\",\n          \"Try parallel compression on drums\",\n          \"Add harmonic interest with suspended chords\"\n        ];\n\n      case 'video':\n      case 'video editor':\n        return [\n          \"Use J-cuts and L-cuts for more natural dialogue flow\",\n          \"Add subtle color grading to enhance mood\",\n          \"Try match cuts for visual continuity\",\n          \"Use motion blur for smooth action sequences\",\n          \"Balance highlights and shadows in post\"\n        ];\n\n      case 'code':\n      case 'code editor':\n        return [\n          \"Implement object pooling for better performance\",\n          \"Use requestAnimationFrame for smooth animations\",\n          \"Add error boundaries for better debugging\",\n          \"Consider using Web Workers for heavy computations\",\n          \"Cache expensive calculations outside render loops\"\n        ];\n\n      default:\n        return [\n          \"Consider the overall composition and balance\",\n          \"Try using contrasting elements to create interest\",\n          \"Look for inspiration in unexpected places\",\n          \"Iterate quickly and embrace experimentation\",\n          \"Focus on the emotional impact of your work\"\n        ];\n    }\n  }\n}\n\n// Export singleton instance\nexport const replitAI = ReplitAI.getInstance();","size_bytes":8505},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/CodeStudio.tsx":{"content":"import CodeEditor from \"@/components/CodeEditor\";\n\nexport default function CodeStudio() {\n  return <CodeEditor />;\n}","size_bytes":116},"client/src/pages/Gallery.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Search, Filter, Heart, Share2, Download, Eye, ThumbsUp, MessageCircle } from \"lucide-react\";\n\ninterface GalleryItem {\n  id: number;\n  title: string;\n  creator: string;\n  avatar: string;\n  type: '3D' | 'Music' | 'Video' | 'Code';\n  thumbnail: string;\n  likes: number;\n  views: number;\n  comments: number;\n  tags: string[];\n  featured: boolean;\n}\n\nexport default function Gallery() {\n  // TODO: Remove mock functionality - replace with real gallery data\n  const galleryItems: GalleryItem[] = [\n    {\n      id: 1,\n      title: \"Cyberpunk City Skyline\",\n      creator: \"Alex Chen\",\n      avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=32&h=32&fit=crop&crop=face\",\n      type: \"3D\",\n      thumbnail: \"/attached_assets/generated_images/Cyberpunk_city_skyline_db1f6d9d.png\",\n      likes: 342,\n      views: 1250,\n      comments: 28,\n      tags: [\"cyberpunk\", \"architecture\", \"neon\"],\n      featured: true\n    },\n    {\n      id: 2,\n      title: \"Ambient Forest Sounds\",\n      creator: \"Maria Rodriguez\", \n      avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b05c?w=32&h=32&fit=crop&crop=face\",\n      type: \"Music\",\n      thumbnail: \"https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=300&h=200&fit=crop\",\n      likes: 186,\n      views: 890,\n      comments: 15,\n      tags: [\"ambient\", \"nature\", \"relaxing\"],\n      featured: false\n    },\n    {\n      id: 3,\n      title: \"Product Launch Video\",\n      creator: \"David Kim\",\n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\", \n      type: \"Video\",\n      thumbnail: \"/attached_assets/generated_images/Video_production_setup_c38b87a3.png\",\n      likes: 523,\n      views: 2100,\n      comments: 45,\n      tags: [\"commercial\", \"product\", \"motion graphics\"],\n      featured: true\n    },\n    {\n      id: 4,\n      title: \"Interactive Data Visualization\",\n      creator: \"Sarah Johnson\",\n      avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=32&h=32&fit=crop&crop=face\",\n      type: \"Code\",\n      thumbnail: \"/attached_assets/generated_images/Data_visualization_dashboard_75a3380d.png\", \n      likes: 234,\n      views: 756,\n      comments: 19,\n      tags: [\"data viz\", \"d3.js\", \"interactive\"],\n      featured: false\n    },\n    {\n      id: 5,\n      title: \"Fantasy Character Model\",\n      creator: \"Tom Wilson\",\n      avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=32&h=32&fit=crop&crop=face\",\n      type: \"3D\",\n      thumbnail: \"/attached_assets/generated_images/Fantasy_character_model_9e82582e.png\",\n      likes: 445,\n      views: 1680,\n      comments: 67,\n      tags: [\"character\", \"fantasy\", \"game ready\"],\n      featured: false\n    },\n    {\n      id: 6,\n      title: \"Electronic Dance Track\",\n      creator: \"Lisa Park\",\n      avatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=32&h=32&fit=crop&crop=face\",\n      type: \"Music\", \n      thumbnail: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=300&h=200&fit=crop\",\n      likes: 298,\n      views: 1123,\n      comments: 32,\n      tags: [\"edm\", \"electronic\", \"dance\"],\n      featured: true\n    }\n  ];\n\n  const handleLike = (itemId: number) => {\n    console.log('Liking item:', itemId);\n  };\n\n  const handleShare = (itemId: number) => {\n    console.log('Sharing item:', itemId);\n  };\n\n  const handleDownload = (itemId: number) => {\n    console.log('Downloading item:', itemId);\n  };\n\n  const handleViewItem = (itemId: number) => {\n    console.log('Viewing item:', itemId);\n  };\n\n  const getTypeColor = (type: string) => {\n    switch(type) {\n      case '3D': return 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300';\n      case 'Music': return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'Video': return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';\n      case 'Code': return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300';\n      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch(type) {\n      case '3D': return '🎨';\n      case 'Music': return '🎵';\n      case 'Video': return '🎬';\n      case 'Code': return '💻';\n      default: return '📁';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Gallery Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"font-display text-3xl font-bold mb-2\">Creative Gallery</h1>\n          <p className=\"text-muted-foreground\">Discover amazing creations from our community</p>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"flex gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <input \n              type=\"text\" \n              placeholder=\"Search gallery...\"\n              className=\"w-full pl-10 pr-4 py-2 border border-border rounded-lg bg-background\"\n              data-testid=\"input-search-gallery\"\n            />\n          </div>\n          <Button variant=\"outline\" data-testid=\"button-filter-gallery\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filter\n          </Button>\n        </div>\n\n        {/* Gallery Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">{galleryItems.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Items</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">{galleryItems.filter(item => item.type === '3D').length}</div>\n              <div className=\"text-sm text-muted-foreground\">3D Models</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">{galleryItems.filter(item => item.type === 'Music').length}</div>\n              <div className=\"text-sm text-muted-foreground\">Music Tracks</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600 mb-1\">{galleryItems.filter(item => item.type === 'Video').length}</div>\n              <div className=\"text-sm text-muted-foreground\">Videos</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Featured Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"font-display text-2xl font-semibold mb-4\">Featured Creations</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {galleryItems.filter(item => item.featured).map((item) => (\n              <Card key={item.id} className=\"hover-elevate cursor-pointer overflow-hidden\" onClick={() => handleViewItem(item.id)} data-testid={`featured-item-${item.id}`}>\n                <div className=\"relative\">\n                  <div \n                    className=\"h-48 bg-muted bg-cover bg-center\"\n                    style={{ backgroundImage: `url(${item.thumbnail})` }}\n                  />\n                  <div className=\"absolute top-2 left-2\">\n                    <Badge className={getTypeColor(item.type)} data-testid={`badge-type-${item.id}`}>\n                      {getTypeIcon(item.type)} {item.type}\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-2 right-2\">\n                    <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">\n                      ⭐ Featured\n                    </Badge>\n                  </div>\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4 text-white\">\n                    <h3 className=\"font-semibold mb-1\" data-testid={`item-title-${item.id}`}>{item.title}</h3>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Avatar className=\"w-5 h-5\">\n                        <AvatarImage src={item.avatar} alt={item.creator} />\n                        <AvatarFallback className=\"text-xs\">{item.creator[0]}</AvatarFallback>\n                      </Avatar>\n                      <span>{item.creator}</span>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* All Items Grid */}\n        <div className=\"mb-8\">\n          <h2 className=\"font-display text-2xl font-semibold mb-4\">All Creations</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {galleryItems.map((item) => (\n              <Card key={item.id} className=\"hover-elevate overflow-hidden group\" data-testid={`gallery-item-${item.id}`}>\n                <div className=\"relative cursor-pointer\" onClick={() => handleViewItem(item.id)}>\n                  <div \n                    className=\"h-32 bg-muted bg-cover bg-center\"\n                    style={{ backgroundImage: `url(${item.thumbnail})` }}\n                  />\n                  <div className=\"absolute top-2 left-2\">\n                    <Badge className={getTypeColor(item.type)} data-testid={`type-${item.id}`}>\n                      {getTypeIcon(item.type)}\n                    </Badge>\n                  </div>\n                </div>\n\n                <CardContent className=\"p-3\">\n                  <h3 className=\"font-medium mb-2 truncate\" data-testid={`title-${item.id}`}>{item.title}</h3>\n                  \n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Avatar className=\"w-4 h-4\">\n                      <AvatarImage src={item.avatar} alt={item.creator} />\n                      <AvatarFallback className=\"text-xs\">{item.creator[0]}</AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm text-muted-foreground truncate\">{item.creator}</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-1\">\n                        <Eye className=\"w-3 h-3\" />\n                        <span>{item.views}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <ThumbsUp className=\"w-3 h-3\" />\n                        <span>{item.likes}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MessageCircle className=\"w-3 h-3\" />\n                        <span>{item.comments}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {item.tags.slice(0, 2).map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`tag-${item.id}-${index}`}>\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"flex gap-1\">\n                      <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={(e) => { e.stopPropagation(); handleLike(item.id); }} data-testid={`button-like-${item.id}`}>\n                        <Heart className=\"w-3 h-3\" />\n                      </Button>\n                      <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={(e) => { e.stopPropagation(); handleShare(item.id); }} data-testid={`button-share-${item.id}`}>\n                        <Share2 className=\"w-3 h-3\" />\n                      </Button>\n                      <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\" onClick={(e) => { e.stopPropagation(); handleDownload(item.id); }} data-testid={`button-download-${item.id}`}>\n                        <Download className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12922},"client/src/pages/Home.tsx":{"content":"import Hero from \"@/components/Hero\";\nimport CreativeModule from \"@/components/CreativeModule\";\nimport AIAssistant from \"@/components/AIAssistant\";\nimport CollaborationPanel from \"@/components/CollaborationPanel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Zap, Users, Globe, TrendingUp, Award } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\n// Import generated images\nimport threeDImage from \"@assets/generated_images/3D_Design_Interface_68eed078.png\";\nimport musicImage from \"@assets/generated_images/Music_Production_Studio_346551fb.png\";\nimport videoImage from \"@assets/generated_images/Video_Editing_Suite_0f983225.png\";\nimport codeImage from \"@assets/generated_images/AI_Code_Editor_7a973b59.png\";\n\nexport default function Home() {\n  const [, navigate] = useLocation();\n\n  const handleGetStarted = () => {\n    console.log('Get started with creative tools');\n    navigate('/studio');\n  };\n\n  // TODO: Remove mock functionality\n  const stats = [\n    { icon: Users, label: \"Active Users\", value: \"50K+\", trend: \"+23%\" },\n    { icon: Globe, label: \"Projects Created\", value: \"125K+\", trend: \"+45%\" },\n    { icon: TrendingUp, label: \"AI Generations\", value: \"2.3M+\", trend: \"+67%\" },\n    { icon: Award, label: \"Success Rate\", value: \"98.5%\", trend: \"+5%\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <Hero />\n\n      {/* Creative Tools Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <Badge className=\"mb-4 bg-primary/10 text-primary border-primary/20\" data-testid=\"badge-tools\">\n              <Sparkles className=\"w-3 h-3 mr-1\" />\n              Creative Suite\n            </Badge>\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-4\">\n              Your Complete Creative Toolkit\n            </h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Four powerful AI-enhanced tools that work seamlessly together to bring your creative visions to life.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-12\">\n            <CreativeModule\n              title=\"3D Designer\"\n              description=\"AI-powered 3D modeling and animation with real-time rendering\"\n              image={threeDImage}\n              features={[\"Parametric Modeling\", \"Real-time Ray Tracing\", \"AI Materials\", \"Animation Tools\"]}\n              status=\"active\"\n              aiSuggestions={5}\n            />\n            \n            <CreativeModule\n              title=\"Music Studio\"\n              description=\"Intelligent music composition and production suite\"\n              image={musicImage}\n              features={[\"AI Composition\", \"Multi-track Recording\", \"Virtual Instruments\", \"Smart Mixing\"]}\n              status=\"processing\"\n              aiSuggestions={3}\n            />\n            \n            <CreativeModule\n              title=\"Video Editor\"\n              description=\"Professional video editing with AI-powered assistance\"\n              image={videoImage}\n              features={[\"Auto-cut Detection\", \"Color Grading\", \"Motion Graphics\", \"Smart Transitions\"]}\n              status=\"complete\"\n              aiSuggestions={2}\n            />\n            \n            <CreativeModule\n              title=\"Code Editor\"\n              description=\"AI-powered development environment for creative coding\"\n              image={codeImage}\n              features={[\"AI Copilot\", \"Multi-language Support\", \"Real-time Collab\", \"Smart Debugging\"]}\n              status=\"active\"\n              aiSuggestions={8}\n            />\n          </div>\n\n          <div className=\"text-center\">\n            <Button \n              size=\"lg\"\n              onClick={handleGetStarted}\n              data-testid=\"button-start-creating\"\n            >\n              <Zap className=\"w-5 h-5 mr-2\" />\n              Start Creating Now\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <Badge className=\"mb-4 bg-primary/10 text-primary border-primary/20\" data-testid=\"badge-stats\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Platform Statistics\n            </Badge>\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-4\">\n              Powering Creative Excellence Worldwide\n            </h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Join thousands of creators who are pushing the boundaries of what's possible with AI-powered creative tools.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n            {stats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              return (\n                <Card key={index} className=\"text-center hover-elevate\" data-testid={`stat-card-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                      <IconComponent className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div className=\"text-2xl font-bold mb-1\">{stat.value}</div>\n                    <div className=\"text-sm text-muted-foreground mb-2\">{stat.label}</div>\n                    <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-600 border-green-200\" data-testid={`trend-${index}`}>\n                      {stat.trend}\n                    </Badge>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* AI & Collaboration Section */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <Badge className=\"mb-4 bg-primary/10 text-primary border-primary/20\" data-testid=\"badge-ai-collab\">\n              <Users className=\"w-3 h-3 mr-1\" />\n              AI & Collaboration\n            </Badge>\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-4\">\n              Intelligent Assistance & Seamless Teamwork\n            </h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Work smarter with AI-powered suggestions and collaborate in real-time with your team, no matter where they are.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <h3 className=\"font-display text-2xl font-semibold mb-4\">AI-Powered Creative Assistant</h3>\n              <AIAssistant />\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h3 className=\"font-display text-2xl font-semibold mb-4\">Real-time Team Collaboration</h3>\n              <CollaborationPanel />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Highlight */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"text-center hover-elevate\" data-testid=\"feature-ai\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Sparkles className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"font-display text-xl font-semibold mb-4\">AI-Powered Everything</h3>\n                <p className=\"text-muted-foreground\">\n                  Every tool is enhanced with cutting-edge AI to accelerate your creative process and provide intelligent suggestions.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate\" data-testid=\"feature-realtime\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Zap className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"font-display text-xl font-semibold mb-4\">Real-time Everything</h3>\n                <p className=\"text-muted-foreground\">\n                  See changes instantly with real-time rendering, live collaboration, and immediate AI feedback across all tools.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate\" data-testid=\"feature-unified\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Users className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"font-display text-xl font-semibold mb-4\">Unified Workspace</h3>\n                <p className=\"text-muted-foreground\">\n                  All your creative tools in one place with seamless asset sharing and unified project management.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9712},"client/src/pages/Learn.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Play, BookOpen, Video, Code, Palette, Music, Film, Users, Clock, Star, ChevronRight } from \"lucide-react\";\n\ninterface Course {\n  id: number;\n  title: string;\n  description: string;\n  category: 'beginner' | 'intermediate' | 'advanced';\n  type: '3D' | 'Music' | 'Video' | 'Code' | 'General';\n  duration: string;\n  lessons: number;\n  rating: number;\n  enrolled: number;\n  progress: number;\n  thumbnail: string;\n  instructor: string;\n  free: boolean;\n}\n\ninterface Tutorial {\n  id: number;\n  title: string;\n  type: 'video' | 'article' | 'interactive';\n  duration: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  topic: string;\n}\n\nexport default function Learn() {\n  // TODO: Remove mock functionality - replace with real learning data\n  const courses: Course[] = [\n    {\n      id: 1,\n      title: \"3D Modeling Fundamentals with AI\",\n      description: \"Learn the basics of 3D modeling enhanced by AI assistance\",\n      category: 'beginner',\n      type: '3D',\n      duration: \"4 hours\",\n      lessons: 12,\n      rating: 4.8,\n      enrolled: 1250,\n      progress: 65,\n      thumbnail: \"/attached_assets/generated_images/3D_geometric_shapes_render_a3432705.png\",\n      instructor: \"Sarah Chen\",\n      free: true\n    },\n    {\n      id: 2,\n      title: \"AI-Powered Music Production\",\n      description: \"Create professional music with AI composition tools\",\n      category: 'intermediate',\n      type: 'Music',\n      duration: \"6 hours\",\n      lessons: 18,\n      rating: 4.9,\n      enrolled: 890,\n      progress: 30,\n      thumbnail: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=300&h=200&fit=crop\",\n      instructor: \"Mike Rodriguez\",\n      free: false\n    },\n    {\n      id: 3,\n      title: \"Video Editing with Smart AI\",\n      description: \"Master video editing using AI-powered automation\",\n      category: 'beginner',\n      type: 'Video',\n      duration: \"5 hours\",\n      lessons: 15,\n      rating: 4.7,\n      enrolled: 2100,\n      progress: 0,\n      thumbnail: \"https://images.unsplash.com/photo-1574717024653-61fd2cf4d44d?w=300&h=200&fit=crop\",\n      instructor: \"Emma Watson\",\n      free: true\n    },\n    {\n      id: 4,\n      title: \"Creative Coding with AI Copilot\",\n      description: \"Build interactive experiences with AI coding assistance\",\n      category: 'advanced',\n      type: 'Code',\n      duration: \"8 hours\",\n      lessons: 24,\n      rating: 4.6,\n      enrolled: 567,\n      progress: 0,\n      thumbnail: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=300&h=200&fit=crop\",\n      instructor: \"David Kim\",\n      free: false\n    }\n  ];\n\n  const tutorials: Tutorial[] = [\n    { id: 1, title: \"Getting Started with the 3D Designer\", type: 'video', duration: '15 min', difficulty: 'beginner', topic: '3D Modeling' },\n    { id: 2, title: \"AI Music Composition Tips\", type: 'article', duration: '8 min', difficulty: 'intermediate', topic: 'Music Production' },\n    { id: 3, title: \"Color Grading with AI\", type: 'interactive', duration: '20 min', difficulty: 'intermediate', topic: 'Video Editing' },\n    { id: 4, title: \"Debugging with AI Assistant\", type: 'video', duration: '12 min', difficulty: 'beginner', topic: 'Code Development' },\n    { id: 5, title: \"Advanced Lighting Techniques\", type: 'article', duration: '25 min', difficulty: 'advanced', topic: '3D Modeling' },\n    { id: 6, title: \"Team Collaboration Best Practices\", type: 'video', duration: '18 min', difficulty: 'beginner', topic: 'General' }\n  ];\n\n  const handleStartCourse = (courseId: number) => {\n    console.log('Starting course:', courseId);\n  };\n\n  const handleWatchTutorial = (tutorialId: number) => {\n    console.log('Watching tutorial:', tutorialId);\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch(category) {\n      case 'beginner': return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'intermediate': return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'advanced': return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch(type) {\n      case '3D': return <Palette className=\"w-4 h-4\" />;\n      case 'Music': return <Music className=\"w-4 h-4\" />;\n      case 'Video': return <Film className=\"w-4 h-4\" />;\n      case 'Code': return <Code className=\"w-4 h-4\" />;\n      case 'General': return <BookOpen className=\"w-4 h-4\" />;\n      default: return <BookOpen className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTutorialTypeIcon = (type: string) => {\n    switch(type) {\n      case 'video': return <Video className=\"w-4 h-4\" />;\n      case 'article': return <BookOpen className=\"w-4 h-4\" />;\n      case 'interactive': return <Code className=\"w-4 h-4\" />;\n      default: return <BookOpen className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Learn Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"font-display text-3xl font-bold mb-2\">Learning Hub</h1>\n          <p className=\"text-muted-foreground\">Master creative AI tools with expert-led courses and tutorials</p>\n        </div>\n\n        {/* Learning Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">{courses.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Courses</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">{tutorials.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Quick Tutorials</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">{courses.reduce((acc, course) => acc + course.enrolled, 0).toLocaleString()}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Students</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600 mb-1\">{courses.filter(c => c.progress > 0).length}</div>\n              <div className=\"text-sm text-muted-foreground\">In Progress</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* My Learning Progress */}\n        {courses.some(course => course.progress > 0) && (\n          <div className=\"mb-8\">\n            <h2 className=\"font-display text-2xl font-semibold mb-4\">Continue Learning</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {courses.filter(course => course.progress > 0).map((course) => (\n                <Card key={course.id} className=\"hover-elevate\" data-testid={`progress-course-${course.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-4\">\n                      <div \n                        className=\"w-20 h-16 bg-muted rounded-lg bg-cover bg-center flex-shrink-0\"\n                        style={{ backgroundImage: `url(${course.thumbnail})` }}\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-medium mb-1 truncate\">{course.title}</h3>\n                        <p className=\"text-sm text-muted-foreground mb-2\">by {course.instructor}</p>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Progress</span>\n                            <span className=\"font-medium\">{course.progress}%</span>\n                          </div>\n                          <Progress value={course.progress} className=\"h-2\" />\n                        </div>\n                        <Button size=\"sm\" className=\"mt-2\" onClick={() => handleStartCourse(course.id)}>\n                          Continue Learning\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Featured Courses */}\n        <div className=\"mb-8\">\n          <h2 className=\"font-display text-2xl font-semibold mb-4\">Featured Courses</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {courses.map((course) => (\n              <Card key={course.id} className=\"hover-elevate overflow-hidden\" data-testid={`course-${course.id}`}>\n                <div className=\"relative\">\n                  <div \n                    className=\"h-40 bg-muted bg-cover bg-center\"\n                    style={{ backgroundImage: `url(${course.thumbnail})` }}\n                  />\n                  <div className=\"absolute top-2 left-2\">\n                    <Badge className={getCategoryColor(course.category)} data-testid={`badge-category-${course.id}`}>\n                      {course.category}\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-2 right-2 flex gap-1\">\n                    <div className=\"flex items-center gap-1\">\n                      {getTypeIcon(course.type)}\n                    </div>\n                    {course.free && (\n                      <Badge className=\"bg-primary text-primary-foreground\">FREE</Badge>\n                    )}\n                  </div>\n                </div>\n\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold mb-2 line-clamp-2\" data-testid={`course-title-${course.id}`}>\n                    {course.title}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                    {course.description}\n                  </p>\n\n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground mb-3\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      <span>{course.duration}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <BookOpen className=\"w-3 h-3\" />\n                      <span>{course.lessons} lessons</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Users className=\"w-3 h-3\" />\n                      <span>{course.enrolled}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"font-medium\">{course.rating}</span>\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">by {course.instructor}</span>\n                  </div>\n\n                  <Button \n                    className=\"w-full\" \n                    onClick={() => handleStartCourse(course.id)}\n                    data-testid={`button-start-course-${course.id}`}\n                  >\n                    {course.progress > 0 ? 'Continue' : 'Start Course'}\n                    <ChevronRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Tutorials */}\n        <div className=\"mb-8\">\n          <h2 className=\"font-display text-2xl font-semibold mb-4\">Quick Tutorials</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {tutorials.map((tutorial) => (\n              <Card key={tutorial.id} className=\"hover-elevate cursor-pointer\" onClick={() => handleWatchTutorial(tutorial.id)} data-testid={`tutorial-${tutorial.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0\">\n                      {getTutorialTypeIcon(tutorial.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium mb-1 line-clamp-2\" data-testid={`tutorial-title-${tutorial.id}`}>\n                        {tutorial.title}\n                      </h3>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-2\">\n                        <span>{tutorial.topic}</span>\n                        <span>•</span>\n                        <span>{tutorial.duration}</span>\n                      </div>\n                      <Badge className={getCategoryColor(tutorial.difficulty)} data-testid={`badge-difficulty-${tutorial.id}`}>\n                        {tutorial.difficulty}\n                      </Badge>\n                    </div>\n                    <Button size=\"sm\" variant=\"ghost\" data-testid={`button-play-${tutorial.id}`}>\n                      <Play className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13823},"client/src/pages/Projects.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { \n  Search, \n  Plus, \n  FolderOpen, \n  Clock, \n  Star, \n  Filter,\n  MoreVertical,\n  Play,\n  Edit,\n  Trash2,\n  Share2,\n  Download,\n  Copy,\n  Code2,\n  Palette,\n  Music,\n  Video,\n  Folder,\n  Calendar,\n  Settings,\n  Users\n} from \"lucide-react\";\nimport { \n  projectManager, \n  CreativeProject, \n  formatProjectDate, \n  getProjectIcon, \n  getToolDisplayName \n} from \"@/lib/project-manager\";\n\nexport default function Projects() {\n  const [projects, setProjects] = useState<CreativeProject[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterTool, setFilterTool] = useState(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newProjectName, setNewProjectName] = useState(\"\");\n  const [newProjectDescription, setNewProjectDescription] = useState(\"\");\n  const [selectedTools, setSelectedTools] = useState<string[]>([]);\n  const [isEditToolsDialogOpen, setIsEditToolsDialogOpen] = useState(false);\n  const [editingProject, setEditingProject] = useState<CreativeProject | null>(null);\n  const [editProjectTools, setEditProjectTools] = useState<string[]>([]);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Load projects on component mount\n  useEffect(() => {\n    loadProjects();\n  }, []);\n\n  const loadProjects = () => {\n    const allProjects = projectManager.getAllProjects();\n    setProjects(allProjects);\n  };\n\n  const handleCreateProject = () => {\n    if (!newProjectName.trim()) {\n      toast({\n        title: \"Project name required\",\n        description: \"Please enter a name for your project\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const newProject = projectManager.createProject(\n        newProjectName.trim(), \n        newProjectDescription.trim(),\n        selectedTools\n      );\n      \n      loadProjects();\n      setIsCreateDialogOpen(false);\n      setNewProjectName(\"\");\n      setNewProjectDescription(\"\");\n      setSelectedTools([]);\n      \n      toast({\n        title: \"Project created!\",\n        description: `\"${newProject.name}\" is ready for your creativity`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to create project\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleOpenProject = (projectId: string) => {\n    projectManager.setCurrentProject(projectId);\n    const project = projectManager.getProject(projectId);\n    \n    if (project) {\n      toast({\n        title: `Opened \"${project.name}\"`,\n        description: \"Continue your creative work!\",\n      });\n      \n      // Navigate based on the project's tools\n      if (project.tools.includes('code')) {\n        navigate('/code');\n      } else if (project.tools.includes('video')) {\n        navigate('/video');\n      } else if (project.tools.includes('3d')) {\n        navigate('/3d');\n      } else if (project.tools.includes('music')) {\n        navigate('/music');\n      } else {\n        // Fallback to studio if no specific tools or multiple tools\n        navigate('/studio');\n      }\n    }\n  };\n\n  const handleDuplicateProject = (projectId: string) => {\n    const duplicated = projectManager.duplicateProject(projectId);\n    \n    if (duplicated) {\n      loadProjects();\n      toast({\n        title: \"Project duplicated!\",\n        description: `Created \"${duplicated.name}\"`,\n      });\n    }\n  };\n\n  const handleDeleteProject = (projectId: string) => {\n    const project = projectManager.getProject(projectId);\n    \n    if (project && window.confirm(`Delete \"${project.name}\"? This cannot be undone.`)) {\n      if (projectManager.deleteProject(projectId)) {\n        loadProjects();\n        toast({\n          title: \"Project deleted\",\n          description: `\"${project.name}\" has been removed`,\n        });\n      }\n    }\n  };\n\n  const handleExportProject = (projectId: string) => {\n    projectManager.exportProject(projectId);\n    \n    toast({\n      title: \"Project exported!\",\n      description: \"Download will start shortly\",\n    });\n  };\n\n  const handleEditTools = (project: CreativeProject) => {\n    setEditingProject(project);\n    setEditProjectTools([...project.tools]);\n    setIsEditToolsDialogOpen(true);\n  };\n\n  const handleSaveToolsEdit = () => {\n    if (!editingProject) return;\n    \n    const updatedProject = {\n      ...editingProject,\n      tools: editProjectTools,\n      updatedAt: new Date()\n    };\n    \n    projectManager.saveProject(updatedProject);\n    loadProjects();\n    setIsEditToolsDialogOpen(false);\n    setEditingProject(null);\n    setEditProjectTools([]);\n    \n    toast({\n      title: \"Project updated!\",\n      description: `Tools updated for \"${editingProject.name}\"`\n    });\n  };\n\n  const getStatusColor = (tools: string[]) => {\n    if (tools.length === 0) return 'bg-gray-500/10 text-gray-600';\n    if (tools.length === 1) return 'bg-yellow-500/10 text-yellow-600';\n    if (tools.length >= 2) return 'bg-green-500/10 text-green-600';\n    return 'bg-blue-500/10 text-blue-600';\n  };\n\n  const getStatusText = (tools: string[]) => {\n    if (tools.length === 0) return 'Draft';\n    if (tools.length === 1) return 'In Progress';\n    if (tools.length >= 2) return 'Multi-Tool';\n    return 'Active';\n  };\n\n  const getToolIcon = (tool: string) => {\n    switch (tool.toLowerCase()) {\n      case 'code':\n        return <Code2 className=\"w-4 h-4\" />;\n      case '3d':\n        return <Palette className=\"w-4 h-4\" />;\n      case 'music':\n        return <Music className=\"w-4 h-4\" />;\n      case 'video':\n        return <Video className=\"w-4 h-4\" />;\n      default:\n        return <Folder className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Filter projects based on search and tool filter\n  const filteredProjects = projects.filter(project => {\n    const matchesSearch = searchQuery === \"\" || \n      project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesTool = filterTool === \"all\" || \n      project.tools.some(tool => tool.toLowerCase().includes(filterTool.toLowerCase()));\n\n    return matchesSearch && matchesTool;\n  });\n\n  // Get unique tools for filter dropdown\n  const availableTools = Array.from(new Set(projects.flatMap(p => p.tools)));\n  const stats = projectManager.getProjectStats();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"font-display text-3xl font-bold mb-2\">Creative Projects</h1>\n            <p className=\"text-muted-foreground\">Manage your AI-powered creative work</p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-project\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Project</DialogTitle>\n                <DialogDescription>\n                  Start a new creative project with AI assistance\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"project-name\">Project Name</Label>\n                  <Input\n                    id=\"project-name\"\n                    placeholder=\"My Amazing Project\"\n                    value={newProjectName}\n                    onChange={(e) => setNewProjectName(e.target.value)}\n                    data-testid=\"input-project-name\"\n                  />\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"project-description\">Description (Optional)</Label>\n                  <Textarea\n                    id=\"project-description\"\n                    placeholder=\"Describe your creative vision...\"\n                    value={newProjectDescription}\n                    onChange={(e) => setNewProjectDescription(e.target.value)}\n                    data-testid=\"input-project-description\"\n                  />\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  <Label>Creative Tools (Select your focus areas)</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[\n                      { key: 'code', label: 'Code Editor', icon: '💻' },\n                      { key: '3d', label: '3D Designer', icon: '🎨' },\n                      { key: 'music', label: 'Music Studio', icon: '🎵' },\n                      { key: 'video', label: 'Video Editor', icon: '🎬' }\n                    ].map(tool => (\n                      <Button\n                        key={tool.key}\n                        type=\"button\"\n                        variant={selectedTools.includes(tool.key) ? \"default\" : \"outline\"}\n                        className=\"justify-start h-auto p-3\"\n                        onClick={() => {\n                          setSelectedTools(prev => \n                            prev.includes(tool.key) \n                              ? prev.filter(t => t !== tool.key)\n                              : [...prev, tool.key]\n                          );\n                        }}\n                        data-testid={`button-tool-${tool.key}`}\n                      >\n                        <span className=\"mr-2\">{tool.icon}</span>\n                        {tool.label}\n                      </Button>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Select one or more tools to focus on. You can change this later.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleCreateProject} data-testid=\"button-confirm-create\">\n                  Create Project\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"flex gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search projects...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-projects\"\n            />\n          </div>\n          \n          <Select value={filterTool} onValueChange={setFilterTool}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-filter-tool\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"All Tools\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Tools</SelectItem>\n              {availableTools.map(tool => (\n                <SelectItem key={tool} value={tool.toLowerCase()}>\n                  <div className=\"flex items-center gap-2\">\n                    {getToolIcon(tool)}\n                    {getToolDisplayName(tool)}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">{stats.totalProjects}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Projects</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">{stats.totalTools}</div>\n              <div className=\"text-sm text-muted-foreground\">Tools Used</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">{stats.recentProjects.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Recent Work</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">\n                {stats.topTools[0]?.count || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Top Tool Uses</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Projects Grid */}\n        {filteredProjects.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProjects.map((project) => (\n              <Card \n                key={project.id} \n                className=\"hover-elevate cursor-pointer\" \n                onClick={() => handleOpenProject(project.id)}\n                data-testid={`project-card-${project.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-lg truncate mb-1\" data-testid={`project-name-${project.id}`}>\n                        {project.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {project.description || \"No description\"}\n                      </p>\n                    </div>\n                    \n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => handleOpenProject(project.id)}>\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          Open\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleEditTools(project);\n                          }}\n                          data-testid={`button-edit-tools-${project.id}`}\n                        >\n                          <Settings className=\"w-4 h-4 mr-2\" />\n                          Edit Tools\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleDuplicateProject(project.id)}>\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          Duplicate\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleExportProject(project.id)}>\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Export\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleDeleteProject(project.id)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    {/* Tools Used */}\n                    <div className=\"flex flex-wrap gap-1\">\n                      {project.tools.slice(0, 3).map((tool) => (\n                        <Badge key={tool} variant=\"secondary\" className=\"text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            {getToolIcon(tool)}\n                            {getToolDisplayName(tool)}\n                          </div>\n                        </Badge>\n                      ))}\n                      {project.tools.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{project.tools.length - 3} more\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Status and Date */}\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <Badge className={getStatusColor(project.tools)}>\n                        {getStatusText(project.tools)}\n                      </Badge>\n                      \n                      <div className=\"flex items-center gap-1 text-muted-foreground\">\n                        <Calendar className=\"w-3 h-3\" />\n                        <span>{formatProjectDate(project.updatedAt)}</span>\n                      </div>\n                    </div>\n\n                    {/* Action Button */}\n                    <Button \n                      size=\"sm\" \n                      className=\"w-full\" \n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleOpenProject(project.id);\n                      }}\n                      data-testid={`button-open-${project.id}`}\n                    >\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Continue Working\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          /* Empty State */\n          <div className=\"text-center py-12\">\n            <FolderOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"font-display text-xl font-semibold mb-2\">\n              {projects.length === 0 ? \"No projects yet\" : \"No projects match your search\"}\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              {projects.length === 0 \n                ? \"Create your first AI-powered creative project to get started\"\n                : \"Try adjusting your search or filter criteria\"\n              }\n            </p>\n            {projects.length === 0 && (\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"lg\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Project\n                  </Button>\n                </DialogTrigger>\n              </Dialog>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Edit Tools Dialog */}\n      <Dialog open={isEditToolsDialogOpen} onOpenChange={setIsEditToolsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Tools - {editingProject?.name}</DialogTitle>\n            <DialogDescription>\n              Modify which creative tools are included in this project\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              {[\n                { value: 'code', label: 'Code Editor', icon: Code2 },\n                { value: '3d', label: '3D Designer', icon: Palette },\n                { value: 'music', label: 'Music Studio', icon: Music },\n                { value: 'video', label: 'Video Editor', icon: Video }\n              ].map(tool => (\n                <div\n                  key={tool.value}\n                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                    editProjectTools.includes(tool.value)\n                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-950/20'\n                      : 'border-gray-200 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600'\n                  }`}\n                  onClick={() => {\n                    setEditProjectTools(prev =>\n                      prev.includes(tool.value)\n                        ? prev.filter(t => t !== tool.value)\n                        : [...prev, tool.value]\n                    );\n                  }}\n                  data-testid={`tool-toggle-${tool.value}`}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <tool.icon className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">{tool.label}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsEditToolsDialogOpen(false)}\n                data-testid=\"button-cancel-edit-tools\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSaveToolsEdit}\n                data-testid=\"button-save-edit-tools\"\n              >\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22541},"client/src/pages/Studio.tsx":{"content":"import CreativeModule from \"@/components/CreativeModule\";\nimport AIAssistant from \"@/components/AIAssistant\";\nimport CollaborationPanel from \"@/components/CollaborationPanel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Settings } from \"lucide-react\";\n\n// Import generated images\nimport threeDImage from \"@assets/generated_images/3D_Design_Interface_68eed078.png\";\nimport musicImage from \"@assets/generated_images/Music_Production_Studio_346551fb.png\";\nimport videoImage from \"@assets/generated_images/Video_Editing_Suite_0f983225.png\";\nimport codeImage from \"@assets/generated_images/AI_Code_Editor_7a973b59.png\";\n\nexport default function Studio() {\n  const handleNewProject = () => {\n    console.log('Creating new project');\n  };\n\n\n  const handleSettings = () => {\n    console.log('Opening studio settings');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Studio Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"font-display text-3xl font-bold mb-2\">Creative Studio</h1>\n            <p className=\"text-muted-foreground\">Your AI-powered creative workspace</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={handleNewProject} data-testid=\"button-new-project\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Project\n            </Button>\n            <Button variant=\"outline\" size=\"icon\" onClick={handleSettings} data-testid=\"button-settings\">\n              <Settings className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">4</div>\n              <div className=\"text-sm text-muted-foreground\">Active Tools</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">12</div>\n              <div className=\"text-sm text-muted-foreground\">Projects</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">3</div>\n              <div className=\"text-sm text-muted-foreground\">Team Members</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">98%</div>\n              <div className=\"text-sm text-muted-foreground\">AI Efficiency</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Studio Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Creative Tools - Left Side */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"font-display text-xl font-semibold\">Creative Tools</h2>\n                <Badge variant=\"outline\" data-testid=\"badge-tools-status\">All Active</Badge>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <CreativeModule\n                  title=\"3D Designer\"\n                  description=\"AI-powered 3D modeling workspace\"\n                  image={threeDImage}\n                  features={[\"Parametric\", \"Real-time\", \"AI Materials\"]}\n                  status=\"active\"\n                  aiSuggestions={5}\n                />\n                \n                <CreativeModule\n                  title=\"Music Studio\"\n                  description=\"Intelligent music composition\"\n                  image={musicImage}\n                  features={[\"AI Compose\", \"Multi-track\", \"Virtual Instruments\"]}\n                  status=\"processing\"\n                  aiSuggestions={3}\n                />\n                \n                <CreativeModule\n                  title=\"Video Editor\"\n                  description=\"Professional video editing suite\"\n                  image={videoImage}\n                  features={[\"Auto-cut\", \"Color Grade\", \"Motion Graphics\"]}\n                  status=\"complete\"\n                  aiSuggestions={2}\n                />\n                \n                <CreativeModule\n                  title=\"Code Editor\"\n                  description=\"AI-powered development environment\"\n                  image={codeImage}\n                  features={[\"AI Copilot\", \"Multi-lang\", \"Live Collab\"]}\n                  status=\"active\"\n                  aiSuggestions={8}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Right Side Panels */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* AI Assistant */}\n            <div>\n              <h2 className=\"font-display text-xl font-semibold mb-4\">AI Assistant</h2>\n              <AIAssistant />\n            </div>\n\n            {/* Team Collaboration */}\n            <div>\n              <h2 className=\"font-display text-xl font-semibold mb-4\">Team Collaboration</h2>\n              <CollaborationPanel />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5570},"client/src/pages/ThreeDStudio.tsx":{"content":"import ThreeDDesigner from \"@/components/ThreeDDesigner\";\n\nexport default function ThreeDStudio() {\n  return <ThreeDDesigner />;\n}","size_bytes":130},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AIAssistant.tsx":{"content":"import AIAssistant from '../AIAssistant';\n\nexport default function AIAssistantExample() {\n  return (\n    <div className=\"p-4 w-full max-w-sm\">\n      <AIAssistant />\n    </div>\n  );\n}","size_bytes":182},"client/src/components/examples/CollaborationPanel.tsx":{"content":"import CollaborationPanel from '../CollaborationPanel';\n\nexport default function CollaborationPanelExample() {\n  return (\n    <div className=\"p-4 w-full max-w-sm\">\n      <CollaborationPanel />\n    </div>\n  );\n}","size_bytes":210},"client/src/components/examples/CreativeModule.tsx":{"content":"import CreativeModule from '../CreativeModule';\nimport threeDImage from \"@assets/generated_images/3D_Design_Interface_68eed078.png\";\nimport musicImage from \"@assets/generated_images/Music_Production_Studio_346551fb.png\";\nimport videoImage from \"@assets/generated_images/Video_Editing_Suite_0f983225.png\";\nimport codeImage from \"@assets/generated_images/AI_Code_Editor_7a973b59.png\";\n\nexport default function CreativeModuleExample() {\n  return (\n    <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 gap-6 max-w-6xl\">\n      <CreativeModule\n        title=\"3D Designer\"\n        description=\"AI-powered 3D modeling and animation\"\n        image={threeDImage}\n        features={[\"Parametric Modeling\", \"Real-time Rendering\", \"AI Materials\"]}\n        progress={75}\n        status=\"active\"\n        aiSuggestions={5}\n      />\n      \n      <CreativeModule\n        title=\"Music Studio\"\n        description=\"Intelligent music composition and production\"\n        image={musicImage}\n        features={[\"AI Composition\", \"Multi-track\", \"Virtual Instruments\"]}\n        progress={60}\n        status=\"processing\"\n        aiSuggestions={3}\n      />\n      \n      <CreativeModule\n        title=\"Video Editor\"\n        description=\"Professional video editing with AI assistance\"\n        image={videoImage}\n        features={[\"Auto-cut\", \"Color Grading\", \"Motion Graphics\"]}\n        progress={100}\n        status=\"complete\"\n        aiSuggestions={2}\n      />\n      \n      <CreativeModule\n        title=\"Code Editor\"\n        description=\"AI-powered development environment\"\n        image={codeImage}\n        features={[\"AI Copilot\", \"Multi-language\", \"Real-time Collab\"]}\n        progress={30}\n        status=\"active\"\n        aiSuggestions={8}\n      />\n    </div>\n  );\n}","size_bytes":1747},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return <Header />;\n}","size_bytes":97},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return <Hero />;\n}","size_bytes":89},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4\">\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":170},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/MusicStudio.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Play, Pause, Square, Save, Download, Activity, Music, Volume2, RotateCcw } from \"lucide-react\";\nimport { projectManager } from \"@/lib/project-manager\";\nimport { ReplitAI } from \"@/lib/replit-ai\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isPreviewMode } from \"@/lib/utils/export-utils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface AudioTrack {\n  id: string;\n  name: string;\n  type: 'synth' | 'drum' | 'bass' | 'lead';\n  isPlaying: boolean;\n  volume: number;\n  frequency: number;\n  waveform: OscillatorType;\n  notes: { time: number; note: string; duration: number }[];\n}\n\ninterface DrumPattern {\n  kick: boolean[];\n  snare: boolean[];\n  hihat: boolean[];\n}\n\nexport default function MusicStudio() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [bpm, setBpm] = useState(120);\n  const [currentBeat, setCurrentBeat] = useState(0);\n  const [tracks, setTracks] = useState<AudioTrack[]>([\n    {\n      id: '1',\n      name: 'Lead Synth',\n      type: 'lead',\n      isPlaying: true,\n      volume: 0.7,\n      frequency: 440,\n      waveform: 'sine',\n      notes: []\n    },\n    {\n      id: '2', \n      name: 'Bass',\n      type: 'bass',\n      isPlaying: true,\n      volume: 0.8,\n      frequency: 220,\n      waveform: 'sawtooth',\n      notes: []\n    }\n  ]);\n  \n  const [drumPattern, setDrumPattern] = useState<DrumPattern>({\n    kick: [true, false, false, false, true, false, false, false],\n    snare: [false, false, true, false, false, false, true, false],\n    hihat: [true, true, true, true, true, true, true, true]\n  });\n\n  const [aiPrompt, setAiPrompt] = useState('');\n  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);\n  const [projectName, setProjectName] = useState('Untitled Song');\n  const [showPreviewModal, setShowPreviewModal] = useState(false);\n\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const oscillatorsRef = useRef<{ [key: string]: OscillatorNode[] }>({});\n  const drumBuffersRef = useRef<{ [key: string]: AudioBuffer | null }>({});\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { toast } = useToast();\n  // Using singleton instance\n  const replitAI = new ReplitAI();\n\n  // Initialize Web Audio API and load project data\n  useEffect(() => {\n    const initAudio = async () => {\n      try {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n        \n        // Create simple drum sounds using oscillators\n        await createDrumSounds();\n        \n        toast({\n          title: \"Audio initialized\",\n          description: \"Music studio is ready to create!\"\n        });\n      } catch (error) {\n        console.error('Audio initialization failed:', error);\n        toast({\n          title: \"Audio unavailable\",\n          description: \"Some audio features may not work in this environment.\",\n          variant: \"destructive\"\n        });\n      }\n    };\n\n    const loadProjectData = () => {\n      try {\n        const currentProjectId = projectManager.getCurrentProjectId();\n        if (currentProjectId) {\n          const project = projectManager.getProject(currentProjectId);\n          if (project && project.data.musicTracks) {\n            // musicTracks contains the entire music data object\n            const musicData = project.data.musicTracks as any;\n            if (musicData.tracks) setTracks(musicData.tracks);\n            if (musicData.drumPattern) setDrumPattern(musicData.drumPattern);\n            if (musicData.bpm) setBpm(musicData.bpm);\n            if (musicData.projectName) setProjectName(musicData.projectName);\n            \n            toast({\n              title: \"Project loaded\",\n              description: `Loaded music data for ${project.name}`\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load project data:', error);\n      }\n    };\n\n    initAudio();\n    \n    // Auto-play if preview mode is enabled\n    if (isPreviewMode()) {\n      setShowPreviewModal(true);\n      if (audioContextRef.current?.state === 'suspended') {\n        // Resume audio context on user gesture (click anywhere)\n        const resumeAudio = () => {\n          if (audioContextRef.current?.state === 'suspended') {\n            audioContextRef.current.resume().then(() => {\n              startPlayback();\n              document.removeEventListener('click', resumeAudio);\n            });\n          }\n        };\n        document.addEventListener('click', resumeAudio);\n      } else {\n        setTimeout(() => startPlayback(), 500);\n      }\n    }\n    loadProjectData();\n\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const createDrumSounds = async () => {\n    if (!audioContextRef.current) return;\n\n    const ctx = audioContextRef.current;\n    \n    // Create kick drum sound\n    const kickBuffer = ctx.createBuffer(1, ctx.sampleRate * 0.5, ctx.sampleRate);\n    const kickData = kickBuffer.getChannelData(0);\n    for (let i = 0; i < kickData.length; i++) {\n      kickData[i] = Math.sin(2 * Math.PI * 60 * i / ctx.sampleRate) * Math.exp(-i / (ctx.sampleRate * 0.1));\n    }\n    drumBuffersRef.current.kick = kickBuffer;\n\n    // Create snare drum sound\n    const snareBuffer = ctx.createBuffer(1, ctx.sampleRate * 0.2, ctx.sampleRate);\n    const snareData = snareBuffer.getChannelData(0);\n    for (let i = 0; i < snareData.length; i++) {\n      snareData[i] = (Math.random() * 2 - 1) * Math.exp(-i / (ctx.sampleRate * 0.05));\n    }\n    drumBuffersRef.current.snare = snareBuffer;\n\n    // Create hi-hat sound\n    const hihatBuffer = ctx.createBuffer(1, ctx.sampleRate * 0.1, ctx.sampleRate);\n    const hihatData = hihatBuffer.getChannelData(0);\n    for (let i = 0; i < hihatData.length; i++) {\n      hihatData[i] = (Math.random() * 2 - 1) * Math.exp(-i / (ctx.sampleRate * 0.02));\n    }\n    drumBuffersRef.current.hihat = hihatBuffer;\n  };\n\n  const playDrumSound = (type: keyof DrumPattern) => {\n    if (!audioContextRef.current || !drumBuffersRef.current[type]) return;\n\n    const ctx = audioContextRef.current;\n    const source = ctx.createBufferSource();\n    const gainNode = ctx.createGain();\n    \n    source.buffer = drumBuffersRef.current[type];\n    source.connect(gainNode);\n    gainNode.connect(ctx.destination);\n    \n    gainNode.gain.value = type === 'kick' ? 0.8 : type === 'snare' ? 0.6 : 0.4;\n    source.start();\n  };\n\n  const playNote = (frequency: number, waveform: OscillatorType, volume: number, duration: number = 0.2) => {\n    if (!audioContextRef.current) return;\n\n    const ctx = audioContextRef.current;\n    const oscillator = ctx.createOscillator();\n    const gainNode = ctx.createGain();\n\n    oscillator.type = waveform;\n    oscillator.frequency.setValueAtTime(frequency, ctx.currentTime);\n    \n    gainNode.gain.setValueAtTime(0, ctx.currentTime);\n    gainNode.gain.linearRampToValueAtTime(volume, ctx.currentTime + 0.01);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(ctx.destination);\n\n    oscillator.start();\n    oscillator.stop(ctx.currentTime + duration);\n  };\n\n  const togglePlayback = () => {\n    if (isPlaying) {\n      stopPlayback();\n    } else {\n      startPlayback();\n    }\n  };\n\n  const startPlayback = () => {\n    if (!audioContextRef.current) return;\n\n    setIsPlaying(true);\n    setCurrentBeat(0);\n    \n    const beatDuration = 60 / bpm / 4; // 16th note duration\n    \n    intervalRef.current = setInterval(() => {\n      setCurrentBeat(prevBeat => {\n        const newBeat = (prevBeat + 1) % 8;\n        \n        // Play drum patterns\n        if (drumPattern.kick[newBeat]) playDrumSound('kick');\n        if (drumPattern.snare[newBeat]) playDrumSound('snare');\n        if (drumPattern.hihat[newBeat]) playDrumSound('hihat');\n        \n        // Play synth notes based on simple patterns\n        tracks.forEach(track => {\n          if (track.isPlaying && newBeat % 2 === 0) {\n            playNote(track.frequency, track.waveform, track.volume * 0.3, beatDuration * 2);\n          }\n        });\n        \n        return newBeat;\n      });\n    }, beatDuration * 1000);\n  };\n\n  const stopPlayback = () => {\n    setIsPlaying(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const updateTrack = (trackId: string, updates: Partial<AudioTrack>) => {\n    setTracks(prev => prev.map(track => \n      track.id === trackId ? { ...track, ...updates } : track\n    ));\n  };\n\n  const toggleDrumBeat = (drum: keyof DrumPattern, beat: number) => {\n    setDrumPattern(prev => ({\n      ...prev,\n      [drum]: prev[drum].map((active, index) => index === beat ? !active : active)\n    }));\n  };\n\n  const handleAIGeneration = async () => {\n    if (!aiPrompt.trim()) return;\n\n    try {\n      const response = await replitAI.generateResponse(aiPrompt, { \n        tool: 'music', \n        project: projectName, \n        currentWork: 'music composition' \n      });\n      setAiSuggestions(response.suggestions || []);\n      \n      toast({\n        title: \"AI suggestions generated\",\n        description: response.content\n      });\n    } catch (error) {\n      toast({\n        title: \"AI generation failed\",\n        description: \"Could not generate music suggestions. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const saveProject = async () => {\n    try {\n      const projectData = {\n        tracks,\n        drumPattern,\n        bpm,\n        projectName\n      };\n\n      // Get current project ID or create new project\n      let projectId = projectManager.getCurrentProjectId();\n      if (!projectId) {\n        const newProject = projectManager.createProject(projectName, 'Music project', ['music']);\n        projectId = newProject.id;\n      }\n\n      await projectManager.updateProjectToolData(projectId, 'music', projectData);\n      \n      toast({\n        title: \"Project saved\",\n        description: `${projectName} has been saved successfully.`\n      });\n    } catch (error) {\n      toast({\n        title: \"Save failed\",\n        description: \"Could not save project. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const addNewTrack = () => {\n    const newTrack: AudioTrack = {\n      id: `track-${Date.now()}`,\n      name: `Track ${tracks.length + 1}`,\n      type: 'synth',\n      isPlaying: true,\n      volume: 0.5,\n      frequency: 440,\n      waveform: 'sine',\n      notes: []\n    };\n    setTracks(prev => [...prev, newTrack]);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"text-music-studio-title\">Music Studio</h1>\n            <p className=\"text-muted-foreground\">AI-powered music composition and production</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={saveProject} data-testid=\"button-save-music\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-export-music\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Main Controls */}\n          <div className=\"lg:col-span-3\">\n            <Tabs defaultValue=\"tracks\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"tracks\" data-testid=\"tab-tracks\">Tracks</TabsTrigger>\n                <TabsTrigger value=\"drums\" data-testid=\"tab-drums\">Drums</TabsTrigger>\n                <TabsTrigger value=\"ai\" data-testid=\"tab-ai\">AI Assistant</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"tracks\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Music className=\"w-5 h-5\" />\n                        Audio Tracks\n                      </CardTitle>\n                      <Button onClick={addNewTrack} size=\"sm\" data-testid=\"button-add-track\">\n                        Add Track\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {tracks.map(track => (\n                      <div key={track.id} className=\"border rounded-lg p-4 space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <Input \n                            value={track.name}\n                            onChange={(e) => updateTrack(track.id, { name: e.target.value })}\n                            className=\"font-medium w-48\"\n                            data-testid={`input-track-name-${track.id}`}\n                          />\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant={track.isPlaying ? \"default\" : \"secondary\"}>\n                              {track.type}\n                            </Badge>\n                            <Button\n                              size=\"sm\"\n                              variant={track.isPlaying ? \"default\" : \"outline\"}\n                              onClick={() => updateTrack(track.id, { isPlaying: !track.isPlaying })}\n                              data-testid={`button-track-toggle-${track.id}`}\n                            >\n                              {track.isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium\">Volume</label>\n                            <Slider\n                              value={[track.volume]}\n                              max={1}\n                              step={0.1}\n                              onValueChange={(value) => updateTrack(track.id, { volume: value[0] })}\n                              data-testid={`slider-volume-${track.id}`}\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium\">Frequency</label>\n                            <Slider\n                              value={[track.frequency]}\n                              min={100}\n                              max={800}\n                              onValueChange={(value) => updateTrack(track.id, { frequency: value[0] })}\n                              data-testid={`slider-frequency-${track.id}`}\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium\">Waveform</label>\n                            <Select value={track.waveform} onValueChange={(value: OscillatorType) => updateTrack(track.id, { waveform: value })}>\n                              <SelectTrigger data-testid={`select-waveform-${track.id}`}>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"sine\">Sine</SelectItem>\n                                <SelectItem value=\"square\">Square</SelectItem>\n                                <SelectItem value=\"sawtooth\">Sawtooth</SelectItem>\n                                <SelectItem value=\"triangle\">Triangle</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"drums\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"w-5 h-5\" />\n                      Drum Patterns\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {Object.entries(drumPattern).map(([drum, pattern]) => (\n                      <div key={drum} className=\"space-y-2\">\n                        <label className=\"text-sm font-medium capitalize\">{drum}</label>\n                        <div className=\"grid grid-cols-8 gap-1\">\n                          {pattern.map((active: boolean, index: number) => (\n                            <Button\n                              key={index}\n                              size=\"sm\"\n                              variant={active ? \"default\" : \"outline\"}\n                              className={`h-8 ${currentBeat === index && isPlaying ? 'ring-2 ring-primary' : ''}`}\n                              onClick={() => toggleDrumBeat(drum as keyof DrumPattern, index)}\n                              data-testid={`button-drum-${drum}-${index}`}\n                            >\n                              {index + 1}\n                            </Button>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"ai\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>AI Music Assistant</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Textarea\n                      placeholder=\"Describe the music you want to create... (e.g., 'upbeat electronic dance track' or 'peaceful ambient soundscape')\"\n                      value={aiPrompt}\n                      onChange={(e) => setAiPrompt(e.target.value)}\n                      data-testid=\"textarea-ai-prompt\"\n                    />\n                    <Button onClick={handleAIGeneration} data-testid=\"button-generate-ai-music\">\n                      Generate AI Suggestions\n                    </Button>\n                    \n                    {aiSuggestions.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium\">AI Suggestions:</h4>\n                        {aiSuggestions.map((suggestion, index) => (\n                          <div key={index} className=\"p-3 bg-muted rounded-lg\">\n                            <p className=\"text-sm\" data-testid={`text-ai-suggestion-${index}`}>{suggestion}</p>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Playback Controls */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Volume2 className=\"w-5 h-5\" />\n                  Playback\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-center gap-2\">\n                  <Button\n                    size=\"lg\"\n                    onClick={togglePlayback}\n                    data-testid=\"button-play-pause\"\n                  >\n                    {isPlaying ? <Pause className=\"w-6 h-6\" /> : <Play className=\"w-6 h-6\" />}\n                  </Button>\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      stopPlayback();\n                      setCurrentBeat(0);\n                    }}\n                    data-testid=\"button-stop\"\n                  >\n                    <Square className=\"w-6 h-6\" />\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">BPM: {bpm}</label>\n                  <Slider\n                    value={[bpm]}\n                    min={60}\n                    max={180}\n                    onValueChange={(value) => setBpm(value[0])}\n                    data-testid=\"slider-bpm\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Project Name</label>\n                  <Input\n                    value={projectName}\n                    onChange={(e) => setProjectName(e.target.value)}\n                    data-testid=\"input-project-name\"\n                  />\n                </div>\n\n                {isPlaying && (\n                  <div className=\"text-center\">\n                    <div className=\"text-sm text-muted-foreground\">Current Beat</div>\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-current-beat\">\n                      {currentBeat + 1}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setTracks([]);\n                    setDrumPattern({\n                      kick: [false, false, false, false, false, false, false, false],\n                      snare: [false, false, false, false, false, false, false, false],\n                      hihat: [false, false, false, false, false, false, false, false]\n                    });\n                  }}\n                  data-testid=\"button-clear-all\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Clear All\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Preview Modal */}\n      <Dialog open={showPreviewModal} onOpenChange={setShowPreviewModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Music Preview</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold\">{projectName}</h3>\n              <p className=\"text-muted-foreground\">BPM: {bpm}</p>\n            </div>\n            <div className=\"flex justify-center gap-4\">\n              <Button \n                onClick={togglePlayback}\n                size=\"lg\"\n                className=\"flex items-center gap-2\"\n                data-testid=\"preview-play-button\"\n              >\n                {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                {isPlaying ? 'Pause' : 'Play'} Preview\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowPreviewModal(false)}\n                data-testid=\"preview-close-button\"\n              >\n                Close Preview\n              </Button>\n            </div>\n            <div className=\"text-center text-sm text-muted-foreground\">\n              {isPlaying ? 'Playing your composition...' : 'Click play to hear your music'}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24610},"client/src/pages/VideoEditor.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Play, Pause, Square, Save, Download, Upload, Scissors, \n  Volume2, Eye, EyeOff, Film, Palette, Sparkles, RotateCcw,\n  FastForward, Rewind, SkipBack, SkipForward\n} from \"lucide-react\";\nimport { projectManager } from \"@/lib/project-manager\";\nimport { ReplitAI } from \"@/lib/replit-ai\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isPreviewMode } from \"@/lib/utils/export-utils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface VideoClip {\n  id: string;\n  name: string;\n  startTime: number;\n  duration: number;\n  type: 'video' | 'image' | 'text' | 'audio';\n  src?: string;\n  aiPrompt?: string;\n  filters: VideoFilter[];\n  visible: boolean;\n  volume: number;\n  layer: number;\n}\n\ninterface VideoFilter {\n  id: string;\n  type: 'brightness' | 'contrast' | 'saturation' | 'blur' | 'sepia' | 'grayscale';\n  intensity: number;\n}\n\ninterface Timeline {\n  duration: number;\n  fps: number;\n  resolution: { width: number; height: number };\n}\n\nexport default function VideoEditor() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [timeline, setTimeline] = useState<Timeline>({\n    duration: 30,\n    fps: 30,\n    resolution: { width: 1920, height: 1080 }\n  });\n  \n  const [clips, setClips] = useState<VideoClip[]>([\n    {\n      id: 'demo-1',\n      name: 'Opening Scene',\n      startTime: 0,\n      duration: 10,\n      type: 'video',\n      filters: [],\n      visible: true,\n      volume: 1,\n      layer: 0\n    },\n    {\n      id: 'demo-2',\n      name: 'Welcome Title',\n      startTime: 2,\n      duration: 6,\n      type: 'text',\n      filters: [{ id: 'f1', type: 'brightness', intensity: 1.2 }],\n      visible: true,\n      volume: 0,\n      layer: 1\n    },\n    {\n      id: 'demo-3',\n      name: 'Middle Scene',\n      startTime: 10,\n      duration: 12,\n      type: 'video',\n      filters: [{ id: 'f2', type: 'sepia', intensity: 0.6 }],\n      visible: true,\n      volume: 1,\n      layer: 0\n    },\n    {\n      id: 'demo-4',\n      name: 'Product Image',\n      startTime: 15,\n      duration: 8,\n      type: 'image',\n      filters: [],\n      visible: true,\n      volume: 0,\n      layer: 2\n    },\n    {\n      id: 'demo-5',\n      name: 'Closing Title',\n      startTime: 25,\n      duration: 5,\n      type: 'text',\n      filters: [{ id: 'f3', type: 'contrast', intensity: 1.3 }],\n      visible: true,\n      volume: 0,\n      layer: 1\n    },\n    {\n      id: 'demo-6',\n      name: 'Background Music',\n      startTime: 0,\n      duration: 30,\n      type: 'audio',\n      filters: [],\n      visible: true,\n      volume: 0.6,\n      layer: 3\n    }\n  ]);\n\n  const [selectedClip, setSelectedClip] = useState<VideoClip | null>(null);\n  const [aiPrompt, setAiPrompt] = useState('');\n  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);\n  const [showPreviewModal, setShowPreviewModal] = useState(false);\n  const [projectName, setProjectName] = useState('Untitled Video');\n  const [renderProgress, setRenderProgress] = useState(0);\n  const [isRendering, setIsRendering] = useState(false);\n  \n  // Drag state - using refs to avoid stale closure issues\n  const [isDragging, setIsDragging] = useState(false);\n  const dragRef = useRef({\n    isDragging: false,\n    clipId: null as string | null,\n    startX: 0,\n    startTime: 0,\n    clipDuration: 0\n  });\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const timelineRef = useRef<HTMLDivElement>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { toast } = useToast();\n  const replitAI = new ReplitAI();\n\n  // Initialize canvas and load project data\n  useEffect(() => {\n    const initCanvas = () => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n\n      canvas.width = 640;\n      canvas.height = 360;\n\n      // Draw initial preview\n      drawPreview(ctx);\n      \n      toast({\n        title: \"Video Editor initialized\",\n        description: \"Ready to create amazing videos!\"\n      });\n    };\n\n    const loadProjectData = () => {\n      try {\n        const currentProjectId = projectManager.getCurrentProjectId();\n        if (currentProjectId) {\n          const project = projectManager.getProject(currentProjectId);\n          if (project && project.data.video) {\n            const videoData = project.data.video as any;\n            if (videoData.clips) setClips(videoData.clips);\n            if (videoData.timeline) setTimeline(videoData.timeline);\n            if (videoData.projectName) setProjectName(videoData.projectName);\n            if (videoData.currentTime) setCurrentTime(videoData.currentTime);\n            \n            toast({\n              title: \"Project loaded\",\n              description: `Loaded video data for ${project.name}`\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load project data:', error);\n      }\n    };\n\n    initCanvas();\n    loadProjectData();\n\n    // Auto-open preview if in preview mode\n    if (isPreviewMode()) {\n      setShowPreviewModal(true);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const drawPreview = (ctx: CanvasRenderingContext2D) => {\n    // Clear canvas\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Draw visible clips at current time\n    const visibleClips = clips\n      .filter(clip => \n        clip.visible && \n        currentTime >= clip.startTime && \n        currentTime < clip.startTime + clip.duration\n      )\n      .sort((a, b) => a.layer - b.layer);\n\n    visibleClips.forEach(clip => {\n      drawClip(ctx, clip);\n    });\n\n    // Draw timeline indicator\n    const timelinePosition = (currentTime / timeline.duration) * ctx.canvas.width;\n    ctx.strokeStyle = '#ff0000';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(timelinePosition, 0);\n    ctx.lineTo(timelinePosition, ctx.canvas.height);\n    ctx.stroke();\n  };\n\n  // Helper functions for drawing video content\n  const drawSampleVideoFrame = (ctx: CanvasRenderingContext2D, progress: number, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    // Create animated sky background\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height);\n    const skyBlue = `hsl(210, 80%, ${60 + Math.sin(time * 0.5) * 10}%)`;\n    const lightBlue = `hsl(200, 70%, ${80 + Math.sin(time * 0.3) * 5}%)`;\n    skyGradient.addColorStop(0, skyBlue);\n    skyGradient.addColorStop(1, lightBlue);\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw animated clouds\n    drawAnimatedClouds(ctx, time);\n    \n    // Draw ground\n    ctx.fillStyle = '#4ade80';\n    ctx.fillRect(0, height * 0.7, width, height * 0.3);\n    \n    // Draw animated sun\n    const sunX = width * 0.8;\n    const sunY = height * 0.2 + Math.sin(time * 0.8) * 20;\n    const sunRadius = 30 + Math.sin(time * 2) * 5;\n    \n    // Sun rays\n    ctx.strokeStyle = '#fbbf24';\n    ctx.lineWidth = 3;\n    for (let i = 0; i < 8; i++) {\n      const angle = (i * Math.PI * 2) / 8 + time * 0.5;\n      const rayLength = 50 + Math.sin(time * 3 + i) * 10;\n      ctx.beginPath();\n      ctx.moveTo(sunX + Math.cos(angle) * (sunRadius + 10), sunY + Math.sin(angle) * (sunRadius + 10));\n      ctx.lineTo(sunX + Math.cos(angle) * (sunRadius + rayLength), sunY + Math.sin(angle) * (sunRadius + rayLength));\n      ctx.stroke();\n    }\n    \n    // Sun circle\n    ctx.fillStyle = '#fbbf24';\n    ctx.beginPath();\n    ctx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw animated trees\n    drawAnimatedTrees(ctx, time);\n    \n    // Draw flying birds\n    drawFlyingBirds(ctx, time);\n    \n    // Add some sparkle effects\n    drawSparkles(ctx, time);\n  };\n\n  const drawAnimatedClouds = (ctx: CanvasRenderingContext2D, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    \n    // Cloud 1\n    const cloud1X = (width * 0.2 + time * 10) % (width + 100) - 50;\n    drawCloud(ctx, cloud1X, height * 0.15, 60);\n    \n    // Cloud 2\n    const cloud2X = (width * 0.6 + time * 15) % (width + 120) - 60;\n    drawCloud(ctx, cloud2X, height * 0.25, 40);\n    \n    // Cloud 3\n    const cloud3X = (width * 0.8 + time * 8) % (width + 80) - 40;\n    drawCloud(ctx, cloud3X, height * 0.12, 50);\n  };\n\n  const drawCloud = (ctx: CanvasRenderingContext2D, x: number, y: number, size: number) => {\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(x, y, size * 0.5, 0, Math.PI * 2);\n    ctx.arc(x + size * 0.4, y, size * 0.7, 0, Math.PI * 2);\n    ctx.arc(x + size * 0.8, y, size * 0.5, 0, Math.PI * 2);\n    ctx.arc(x + size * 0.2, y - size * 0.3, size * 0.4, 0, Math.PI * 2);\n    ctx.arc(x + size * 0.6, y - size * 0.2, size * 0.6, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n  };\n\n  const drawAnimatedTrees = (ctx: CanvasRenderingContext2D, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    const groundY = height * 0.7;\n    \n    // Tree positions\n    const treePositions = [width * 0.1, width * 0.3, width * 0.9];\n    \n    treePositions.forEach((x, index) => {\n      const sway = Math.sin(time * 1.5 + index) * 8;\n      \n      // Tree trunk\n      ctx.fillStyle = '#8b4513';\n      ctx.fillRect(x - 8, groundY - 60, 16, 60);\n      \n      // Tree crown with slight sway\n      ctx.save();\n      ctx.translate(x, groundY - 60);\n      ctx.rotate(sway * 0.01);\n      ctx.fillStyle = '#22c55e';\n      ctx.beginPath();\n      ctx.arc(0, -30, 40, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.restore();\n    });\n  };\n\n  const drawFlyingBirds = (ctx: CanvasRenderingContext2D, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    ctx.strokeStyle = '#1f2937';\n    ctx.lineWidth = 2;\n    ctx.lineCap = 'round';\n    \n    // Flying birds in V formation\n    for (let i = 0; i < 5; i++) {\n      const birdX = (width * 0.1 + time * 30 + i * 25) % (width + 100);\n      const birdY = height * 0.3 + Math.sin(time * 4 + i * 0.5) * 15 + i * 8;\n      const wingFlap = Math.sin(time * 8 + i) * 0.3;\n      \n      // Bird V shape\n      ctx.beginPath();\n      ctx.moveTo(birdX - 8, birdY + wingFlap);\n      ctx.lineTo(birdX, birdY);\n      ctx.lineTo(birdX + 8, birdY + wingFlap);\n      ctx.stroke();\n    }\n  };\n\n  const drawSparkles = (ctx: CanvasRenderingContext2D, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    ctx.fillStyle = '#fef3c7';\n    \n    for (let i = 0; i < 8; i++) {\n      const sparkleX = (width * (0.1 + i * 0.12) + Math.sin(time * 2 + i) * 50) % width;\n      const sparkleY = height * (0.1 + Math.sin(time + i) * 0.1) + Math.cos(time * 3 + i) * 30;\n      const sparkleSize = 2 + Math.sin(time * 5 + i) * 1.5;\n      const alpha = 0.5 + Math.sin(time * 4 + i) * 0.5;\n      \n      ctx.save();\n      ctx.globalAlpha = alpha;\n      ctx.beginPath();\n      ctx.arc(sparkleX, sparkleY, sparkleSize, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.restore();\n    }\n  };\n\n  const drawImageClip = (ctx: CanvasRenderingContext2D, clip: VideoClip) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    if (clip.src && clip.src.startsWith('data:image/')) {\n      // Real uploaded image\n      const img = new Image();\n      img.onload = () => {\n        // Calculate aspect ratio to fit image properly\n        const imgAspect = img.width / img.height;\n        const canvasAspect = width / height;\n        \n        let drawWidth, drawHeight, drawX, drawY;\n        \n        if (imgAspect > canvasAspect) {\n          // Image is wider - fit to canvas width\n          drawWidth = width;\n          drawHeight = width / imgAspect;\n          drawX = 0;\n          drawY = (height - drawHeight) / 2;\n        } else {\n          // Image is taller - fit to canvas height\n          drawHeight = height;\n          drawWidth = height * imgAspect;\n          drawY = 0;\n          drawX = (width - drawWidth) / 2;\n        }\n        \n        ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);\n      };\n      img.src = clip.src;\n    } else if (clip.aiPrompt) {\n      // AI-generated image visualization\n      drawAIGeneratedImage(ctx, clip.aiPrompt, currentTime);\n    } else {\n      // Default placeholder\n      ctx.fillStyle = '#3b82f6';\n      ctx.fillRect(0, 0, width, height);\n      \n      // Add upload prompt\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '24px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('Click to Upload Image', width / 2, height / 2 - 20);\n      ctx.fillText('or Use AI Generation', width / 2, height / 2 + 20);\n    }\n  };\n\n  const drawAIGeneratedImage = (ctx: CanvasRenderingContext2D, prompt: string, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    // Create an artistic visualization based on the AI prompt\n    // This simulates what an AI-generated image might look like\n    \n    // Generate colors based on prompt keywords\n    const colors = getColorsFromPrompt(prompt);\n    const primaryColor = colors[0];\n    const secondaryColor = colors[1];\n    \n    // Create gradient background\n    const gradient = ctx.createRadialGradient(width/2, height/2, 0, width/2, height/2, Math.max(width, height)/2);\n    gradient.addColorStop(0, primaryColor);\n    gradient.addColorStop(1, secondaryColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Add animated abstract shapes based on prompt\n    drawAbstractShapes(ctx, prompt, time);\n    \n    // Add AI generation watermark\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText('AI Generated', width - 10, height - 10);\n  };\n\n  const getColorsFromPrompt = (prompt: string): string[] => {\n    const lowerPrompt = prompt.toLowerCase();\n    \n    // Color mapping based on keywords\n    if (lowerPrompt.includes('sunset') || lowerPrompt.includes('orange') || lowerPrompt.includes('warm')) {\n      return ['#ff6b35', '#f7931e'];\n    } else if (lowerPrompt.includes('ocean') || lowerPrompt.includes('blue') || lowerPrompt.includes('water')) {\n      return ['#0077be', '#00a8cc'];\n    } else if (lowerPrompt.includes('forest') || lowerPrompt.includes('green') || lowerPrompt.includes('nature')) {\n      return ['#2d5016', '#4e7928'];\n    } else if (lowerPrompt.includes('night') || lowerPrompt.includes('dark') || lowerPrompt.includes('space')) {\n      return ['#1a1a2e', '#16213e'];\n    } else if (lowerPrompt.includes('fire') || lowerPrompt.includes('red')) {\n      return ['#c73e1d', '#f44336'];\n    } else {\n      // Default artistic colors\n      return ['#6366f1', '#8b5cf6'];\n    }\n  };\n\n  const drawAbstractShapes = (ctx: CanvasRenderingContext2D, prompt: string, time: number) => {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    \n    // Create animated shapes based on prompt content\n    ctx.save();\n    ctx.globalAlpha = 0.6;\n    \n    for (let i = 0; i < 5; i++) {\n      const x = (width * (0.2 + i * 0.15)) + Math.sin(time * 0.5 + i) * 50;\n      const y = (height * (0.3 + Math.sin(i) * 0.4)) + Math.cos(time * 0.3 + i) * 30;\n      const size = 40 + Math.sin(time + i) * 20;\n      \n      ctx.fillStyle = `hsla(${220 + i * 30}, 70%, 60%, 0.4)`;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    ctx.restore();\n  };\n\n  const drawClip = (ctx: CanvasRenderingContext2D, clip: VideoClip) => {\n    const progress = (currentTime - clip.startTime) / clip.duration;\n    \n    switch (clip.type) {\n      case 'video':\n        // Create dynamic sample video content\n        drawSampleVideoFrame(ctx, progress, currentTime);\n        break;\n        \n      case 'text':\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '32px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(clip.name, ctx.canvas.width / 2, ctx.canvas.height / 2);\n        break;\n        \n      case 'image':\n        // Draw image clip\n        drawImageClip(ctx, clip);\n        break;\n    }\n\n    // Apply filters\n    clip.filters.forEach(filter => {\n      applyFilter(ctx, filter);\n    });\n  };\n\n  const applyFilter = (ctx: CanvasRenderingContext2D, filter: VideoFilter) => {\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const data = imageData.data;\n\n    switch (filter.type) {\n      case 'brightness':\n        for (let i = 0; i < data.length; i += 4) {\n          data[i] = Math.min(255, data[i] * filter.intensity);     // Red\n          data[i + 1] = Math.min(255, data[i + 1] * filter.intensity); // Green\n          data[i + 2] = Math.min(255, data[i + 2] * filter.intensity); // Blue\n        }\n        break;\n        \n      case 'contrast':\n        for (let i = 0; i < data.length; i += 4) {\n          data[i] = Math.min(255, Math.max(0, (data[i] - 128) * filter.intensity + 128));\n          data[i + 1] = Math.min(255, Math.max(0, (data[i + 1] - 128) * filter.intensity + 128));\n          data[i + 2] = Math.min(255, Math.max(0, (data[i + 2] - 128) * filter.intensity + 128));\n        }\n        break;\n        \n      case 'saturation':\n        for (let i = 0; i < data.length; i += 4) {\n          const gray = data[i] * 0.3 + data[i + 1] * 0.59 + data[i + 2] * 0.11;\n          data[i] = Math.min(255, gray + (data[i] - gray) * filter.intensity);\n          data[i + 1] = Math.min(255, gray + (data[i + 1] - gray) * filter.intensity);\n          data[i + 2] = Math.min(255, gray + (data[i + 2] - gray) * filter.intensity);\n        }\n        break;\n        \n      case 'blur':\n        // Simple box blur approximation for demonstration\n        const blurRadius = Math.floor(filter.intensity * 3);\n        if (blurRadius > 0) {\n          for (let i = 0; i < data.length; i += 4) {\n            data[i] = Math.min(255, data[i] * 0.8 + 0.2 * 128);     // Simple blur effect\n            data[i + 1] = Math.min(255, data[i + 1] * 0.8 + 0.2 * 128);\n            data[i + 2] = Math.min(255, data[i + 2] * 0.8 + 0.2 * 128);\n          }\n        }\n        break;\n        \n      case 'grayscale':\n        for (let i = 0; i < data.length; i += 4) {\n          const gray = data[i] * 0.3 + data[i + 1] * 0.59 + data[i + 2] * 0.11;\n          data[i] = gray;\n          data[i + 1] = gray;\n          data[i + 2] = gray;\n        }\n        break;\n        \n      case 'sepia':\n        for (let i = 0; i < data.length; i += 4) {\n          const r = data[i];\n          const g = data[i + 1];\n          const b = data[i + 2];\n          data[i] = Math.min(255, (r * 0.393) + (g * 0.769) + (b * 0.189));\n          data[i + 1] = Math.min(255, (r * 0.349) + (g * 0.686) + (b * 0.168));\n          data[i + 2] = Math.min(255, (r * 0.272) + (g * 0.534) + (b * 0.131));\n        }\n        break;\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n  };\n\n  const togglePlayback = () => {\n    if (isPlaying) {\n      stopPlayback();\n    } else {\n      startPlayback();\n    }\n  };\n\n  const startPlayback = () => {\n    setIsPlaying(true);\n    \n    intervalRef.current = setInterval(() => {\n      setCurrentTime(prevTime => {\n        const newTime = prevTime + 1/timeline.fps;\n        if (newTime >= timeline.duration) {\n          stopPlayback();\n          return timeline.duration;\n        }\n        return newTime;\n      });\n    }, 1000 / timeline.fps);\n  };\n\n  const stopPlayback = () => {\n    setIsPlaying(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const seekTo = (time: number) => {\n    setCurrentTime(Math.max(0, Math.min(timeline.duration, time)));\n  };\n\n  const addClip = (type: VideoClip['type']) => {\n    // Smart layer assignment by clip type with overlap prevention\n    const getLayerForType = (clipType: VideoClip['type'], startTime: number, duration: number): number => {\n      // Preferred layers by clip type for better organization\n      const preferredLayers = {\n        video: 0,\n        text: 1, \n        image: 2,\n        audio: 3\n      };\n      \n      const preferredLayer = preferredLayers[clipType];\n      \n      // Check if preferred layer is free or has room without overlapping\n      const clipsOnPreferredLayer = clips.filter(clip => clip.layer === preferredLayer);\n      const hasOverlap = clipsOnPreferredLayer.some(clip => \n        startTime < clip.startTime + clip.duration && startTime + duration > clip.startTime\n      );\n      \n      if (!hasOverlap) {\n        return preferredLayer;\n      }\n      \n      // Find next available layer without conflicts\n      const maxLayer = clips.length > 0 ? Math.max(...clips.map(clip => clip.layer)) : -1;\n      for (let layer = 0; layer <= maxLayer + 1; layer++) {\n        const layerClips = clips.filter(clip => clip.layer === layer);\n        const hasConflict = layerClips.some(clip => \n          startTime < clip.startTime + clip.duration && startTime + duration > clip.startTime\n        );\n        if (!hasConflict) {\n          return layer;\n        }\n      }\n      \n      // Fallback: use next available layer\n      return maxLayer + 1;\n    };\n    \n    const clipDuration = 3;\n    const newClip: VideoClip = {\n      id: `clip-${Date.now()}`,\n      name: `New ${type} clip`,\n      startTime: currentTime,\n      duration: clipDuration,\n      type,\n      filters: [],\n      visible: true,\n      volume: type === 'audio' ? 1 : 0,\n      layer: getLayerForType(type, currentTime, clipDuration)\n    };\n    \n    setClips(prev => [...prev, newClip]);\n    \n    // Auto-select the new clip for immediate editing\n    setSelectedClip(newClip);\n  };\n\n  const updateClip = (clipId: string, updates: Partial<VideoClip>) => {\n    setClips(prev => prev.map(clip => \n      clip.id === clipId ? { ...clip, ...updates } : clip\n    ));\n  };\n\n  const addFilter = (clipId: string, filterType: VideoFilter['type']) => {\n    const newFilter: VideoFilter = {\n      id: `filter-${Date.now()}`,\n      type: filterType,\n      intensity: 1\n    };\n    \n    setClips(prev => prev.map(clip => \n      clip.id === clipId \n        ? { ...clip, filters: [...clip.filters, newFilter] }\n        : clip\n    ));\n  };\n\n  const updateFilter = (clipId: string, filterId: string, intensity: number) => {\n    setClips(prev => prev.map(clip => \n      clip.id === clipId \n        ? {\n            ...clip,\n            filters: clip.filters.map(filter =>\n              filter.id === filterId ? { ...filter, intensity } : filter\n            )\n          }\n        : clip\n    ));\n  };\n\n  // Helper functions for direct effect controls\n  const getEffectValue = (clip: VideoClip, effectType: VideoFilter['type']): number => {\n    const filter = clip.filters.find(f => f.type === effectType);\n    return filter ? filter.intensity : (effectType === 'brightness' || effectType === 'contrast' || effectType === 'saturation') ? 1 : 0;\n  };\n\n  const updateEffectValue = (clipId: string, effectType: VideoFilter['type'], value: number) => {\n    setClips(prev => prev.map(clip => {\n      if (clip.id !== clipId) return clip;\n      \n      const existingFilterIndex = clip.filters.findIndex(f => f.type === effectType);\n      \n      if (existingFilterIndex >= 0) {\n        // Update existing filter\n        const updatedFilters = [...clip.filters];\n        updatedFilters[existingFilterIndex] = { ...updatedFilters[existingFilterIndex], intensity: value };\n        return { ...clip, filters: updatedFilters };\n      } else {\n        // Add new filter\n        const newFilter: VideoFilter = {\n          id: `filter-${Date.now()}-${effectType}`,\n          type: effectType,\n          intensity: value\n        };\n        return { ...clip, filters: [...clip.filters, newFilter] };\n      }\n    }));\n  };\n\n  const handleImageUpload = (clipId: string, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !file.type.startsWith('image/')) return;\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      updateClip(clipId, { src: result, aiPrompt: undefined });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const generateAIImage = async (clipId: string, prompt: string) => {\n    try {\n      // Use ReplitAI for creative image generation\n      const response = await replitAI.generateResponse(\n        `Create an artistic visual description for: \"${prompt}\". Include colors, composition, mood, and visual elements.`,\n        { tool: 'image-generation', project: projectName, currentWork: 'visual art creation' }\n      );\n      \n      updateClip(clipId, { aiPrompt: prompt, src: undefined });\n      \n      toast({\n        title: \"AI image generated\",\n        description: `Created artistic visualization for: ${prompt}`\n      });\n    } catch (error) {\n      toast({\n        title: \"AI generation failed\",\n        description: \"Could not generate image. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const getTrackName = (layerIndex: number): string => {\n    const trackNames = {\n      0: 'Video Track',\n      1: 'Text Track', \n      2: 'Image Track',\n      3: 'Audio Track'\n    };\n    \n    return trackNames[layerIndex as keyof typeof trackNames] || `Track ${layerIndex}`;\n  };\n\n  // Drag functionality\n  const handleMouseDown = (e: React.MouseEvent, clipId: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const clip = clips.find(c => c.id === clipId);\n    if (!clip) return;\n    \n    // Update both state and ref synchronously\n    setIsDragging(true);\n    dragRef.current = {\n      isDragging: true,\n      clipId,\n      startX: e.clientX,\n      startTime: clip.startTime,\n      clipDuration: clip.duration\n    };\n    setSelectedClip(clip);\n    \n    // Disable text selection during drag\n    document.body.classList.add('select-none');\n    \n    // Add global mouse listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    const drag = dragRef.current;\n    if (!drag.isDragging || !drag.clipId || !timelineRef.current) return;\n    \n    const timelineRect = timelineRef.current.getBoundingClientRect();\n    const deltaX = e.clientX - drag.startX;\n    const timelineWidth = timelineRect.width;\n    const deltaTime = (deltaX / timelineWidth) * timeline.duration;\n    \n    let newStartTime = drag.startTime + deltaTime;\n    \n    // Clamp to timeline bounds - ensure clip stays fully within timeline\n    newStartTime = Math.max(0, Math.min(newStartTime, timeline.duration - drag.clipDuration));\n    \n    // Update clip position\n    updateClip(drag.clipId, { startTime: newStartTime });\n  };\n\n  const handleMouseUp = () => {\n    // Update both state and ref\n    setIsDragging(false);\n    dragRef.current = {\n      isDragging: false,\n      clipId: null,\n      startX: 0,\n      startTime: 0,\n      clipDuration: 0\n    };\n    \n    // Re-enable text selection\n    document.body.classList.remove('select-none');\n    \n    // Remove global mouse listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Cleanup drag listeners on unmount\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, []);\n\n  const handleAIGeneration = async () => {\n    if (!aiPrompt.trim()) return;\n\n    try {\n      const response = await replitAI.generateResponse(aiPrompt, { \n        tool: 'video', \n        project: projectName, \n        currentWork: 'video editing' \n      });\n      setAiSuggestions(response.suggestions || []);\n      \n      toast({\n        title: \"AI suggestions generated\",\n        description: response.content\n      });\n    } catch (error) {\n      toast({\n        title: \"AI generation failed\",\n        description: \"Could not generate video suggestions. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const saveProject = async () => {\n    try {\n      const projectData = {\n        clips,\n        timeline,\n        projectName,\n        currentTime\n      };\n\n      let projectId = projectManager.getCurrentProjectId();\n      if (!projectId) {\n        const newProject = projectManager.createProject(projectName, 'Video project', ['video']);\n        projectId = newProject.id;\n      }\n\n      await projectManager.updateProjectToolData(projectId, 'video', projectData);\n      \n      toast({\n        title: \"Project saved\",\n        description: `${projectName} has been saved successfully.`\n      });\n    } catch (error) {\n      toast({\n        title: \"Save failed\",\n        description: \"Could not save project. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const simulateRender = async () => {\n    setIsRendering(true);\n    setRenderProgress(0);\n    \n    // Simulate rendering process\n    for (let i = 0; i <= 100; i += 10) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      setRenderProgress(i);\n    }\n    \n    setIsRendering(false);\n    toast({\n      title: \"Video rendered successfully\",\n      description: \"Your video is ready for download!\"\n    });\n  };\n\n  // Update selectedClip when clips change to keep it in sync\n  useEffect(() => {\n    if (selectedClip) {\n      const updatedClip = clips.find(clip => clip.id === selectedClip.id);\n      if (updatedClip && updatedClip !== selectedClip) {\n        setSelectedClip(updatedClip);\n      }\n    }\n  }, [clips, selectedClip]);\n\n  // Update canvas when currentTime or clips change\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    \n    drawPreview(ctx);\n  }, [currentTime, clips]);\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"text-video-editor-title\">Video Editor</h1>\n            <p className=\"text-muted-foreground\">Professional video editing with AI assistance</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={saveProject} data-testid=\"button-save-video\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button variant=\"outline\" onClick={simulateRender} disabled={isRendering} data-testid=\"button-render-video\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isRendering ? 'Rendering...' : 'Render'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Main Video Preview */}\n          <div className=\"lg:col-span-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center gap-2\">\n                    <Film className=\"w-5 h-5\" />\n                    Video Preview\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\">{timeline.resolution.width}x{timeline.resolution.height}</Badge>\n                    <Badge variant=\"outline\">{timeline.fps}fps</Badge>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"bg-black rounded-lg overflow-hidden aspect-video\">\n                  <canvas \n                    ref={canvasRef}\n                    className=\"w-full h-full object-contain\"\n                    data-testid=\"canvas-video-preview\"\n                  />\n                </div>\n\n                {/* Transport Controls */}\n                <div className=\"flex items-center justify-center gap-2\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => seekTo(0)} data-testid=\"button-seek-start\">\n                    <SkipBack className=\"w-4 h-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => seekTo(currentTime - 1)} data-testid=\"button-rewind\">\n                    <Rewind className=\"w-4 h-4\" />\n                  </Button>\n                  <Button size=\"lg\" onClick={togglePlayback} data-testid=\"button-play-pause-video\">\n                    {isPlaying ? <Pause className=\"w-6 h-6\" /> : <Play className=\"w-6 h-6\" />}\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => seekTo(currentTime + 1)} data-testid=\"button-forward\">\n                    <FastForward className=\"w-4 h-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => seekTo(timeline.duration)} data-testid=\"button-seek-end\">\n                    <SkipForward className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Timeline Scrubber */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>{currentTime.toFixed(1)}s</span>\n                    <span>{timeline.duration}s</span>\n                  </div>\n                  <Slider\n                    value={[currentTime]}\n                    max={timeline.duration}\n                    step={0.1}\n                    onValueChange={(value) => seekTo(value[0])}\n                    className=\"w-full\"\n                    data-testid=\"slider-timeline\"\n                  />\n                </div>\n\n                {/* Render Progress */}\n                {isRendering && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Rendering video...</span>\n                      <span>{renderProgress}%</span>\n                    </div>\n                    <Progress value={renderProgress} className=\"w-full\" data-testid=\"progress-render\" />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Timeline */}\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Timeline</span>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" onClick={() => addClip('video')} data-testid=\"button-add-video-clip\">\n                      <Film className=\"w-4 h-4 mr-1\" />\n                      Video\n                    </Button>\n                    <Button size=\"sm\" onClick={() => addClip('text')} data-testid=\"button-add-text-clip\">\n                      <span className=\"text-sm mr-1\">T</span>\n                      Text\n                    </Button>\n                    <Button size=\"sm\" onClick={() => addClip('image')} data-testid=\"button-add-image-clip\">\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      Image\n                    </Button>\n                    <Button size=\"sm\" onClick={() => addClip('audio')} data-testid=\"button-add-audio-clip\">\n                      <Volume2 className=\"w-4 h-4 mr-1\" />\n                      Audio\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Timeline Container - Wraps ruler and tracks for unified playhead */}\n                  <div className=\"relative\" ref={timelineRef}>\n                    {/* Timeline Ruler */}\n                    <div className=\"relative\">\n                      <div className=\"flex border-b\">\n                        {/* Time markers - Fixed sizing to ensure exactly 100% total width */}\n                        {(() => {\n                          const markerCount = Math.floor(timeline.duration / 5) + 1;\n                          const markerWidth = 100 / markerCount;\n                          return Array.from({ length: markerCount }, (_, i) => i * 5).map((time, index) => (\n                            <div key={time} className=\"flex-none\" style={{ width: `${markerWidth}%` }}>\n                              <div className=\"text-xs text-muted-foreground pb-1\">{time}s</div>\n                              <div className=\"h-2 border-l border-muted-foreground/20\"></div>\n                            </div>\n                          ));\n                        })()}\n                      </div>\n                    </div>\n\n                    {/* Multi-track Timeline */}\n                    <div className=\"space-y-1 mt-4\">\n                      {(() => {\n                        // Calculate the number of tracks needed dynamically - ensure all clips are visible\n                        const maxLayer = clips.length > 0 ? Math.max(3, ...clips.map(clip => clip.layer)) : 3;\n                        const trackCount = maxLayer + 1; // Create exactly the right number of tracks\n                        \n                        return Array.from({ length: trackCount }, (_, layerIndex) => (\n                          <div key={layerIndex} className=\"relative\">\n                            {/* Track label */}\n                            <div className=\"flex items-center mb-1\">\n                              <div className=\"w-24 text-xs text-muted-foreground font-medium whitespace-nowrap\">\n                                {getTrackName(layerIndex)}\n                              </div>\n                            </div>\n                            \n                            {/* Track container */}\n                            <div \n                              className=\"relative h-12 bg-muted/30 rounded border border-muted/40\"\n                              style={{ minWidth: '100%' }}\n                              data-testid={`timeline-track-${layerIndex}`}\n                            >\n                              {/* Clips on this layer */}\n                              {clips\n                                .filter(clip => clip.layer === layerIndex)\n                                .map(clip => {\n                                  const leftPosition = (clip.startTime / timeline.duration) * 100;\n                                  const width = (clip.duration / timeline.duration) * 100;\n                                  \n                                  // Color coding by clip type\n                                  const typeColors = {\n                                    video: 'bg-blue-500/80',\n                                    text: 'bg-purple-500/80',\n                                    image: 'bg-green-500/80',\n                                    audio: 'bg-orange-500/80'\n                                  };\n                                  \n                                  const bgColor = typeColors[clip.type] || 'bg-gray-500/80';\n                                  \n                                  return (\n                                    <div\n                                      key={clip.id}\n                                      className={`absolute top-1 bottom-1 rounded transition-all duration-200 ${bgColor} ${\n                                        selectedClip?.id === clip.id \n                                          ? 'ring-2 ring-primary ring-offset-1' \n                                          : 'hover:brightness-110'\n                                      } ${\n                                        isDragging && dragRef.current.clipId === clip.id \n                                          ? 'cursor-grabbing opacity-80 z-50' \n                                          : 'cursor-grab hover:cursor-grab'\n                                      }`}\n                                      style={{\n                                        left: `${leftPosition}%`,\n                                        width: `${width}%`,\n                                        minWidth: '20px'\n                                      }}\n                                      onClick={(e) => {\n                                        if (!isDragging) {\n                                          setSelectedClip(clip);\n                                        }\n                                      }}\n                                      onMouseDown={(e) => handleMouseDown(e, clip.id)}\n                                      data-testid={`clip-block-${clip.id}`}\n                                    >\n                                      <div className=\"flex items-center justify-between h-full px-2 text-white text-xs\">\n                                        <div className=\"truncate flex-1\">\n                                          <div className=\"font-medium truncate\">{clip.name}</div>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 ml-2\">\n                                          {!clip.visible && <EyeOff className=\"w-3 h-3 opacity-70\" />}\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            className=\"h-4 w-4 p-0 hover:bg-white/20\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              updateClip(clip.id, { visible: !clip.visible });\n                                            }}\n                                            data-testid={`button-toggle-visibility-${clip.id}`}\n                                          >\n                                            {clip.visible ? <Eye className=\"w-3 h-3\" /> : <EyeOff className=\"w-3 h-3\" />}\n                                          </Button>\n                                        </div>\n                                      </div>\n                                      \n                                      {/* Clip info tooltip */}\n                                      <div className=\"absolute -top-8 left-0 bg-black/80 text-white text-xs px-2 py-1 rounded opacity-0 hover:opacity-100 transition-opacity whitespace-nowrap z-20 pointer-events-none\">\n                                        {clip.startTime}s - {clip.startTime + clip.duration}s\n                                      </div>\n                                    </div>\n                                  );\n                                })}\n                            </div>\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                    \n                    {/* Current time indicator - spans full timeline height from ruler through all tracks */}\n                    <div \n                      className=\"absolute top-0 w-0.5 bg-red-500 pointer-events-none z-30\"\n                      style={{ \n                        left: `${(currentTime / timeline.duration) * 100}%`,\n                        height: '100%' // Span from ruler through all tracks\n                      }}\n                      data-testid=\"timeline-current-position\"\n                    />\n                  </div>\n\n                  {/* Timeline controls */}\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <div>\n                      Clips: {clips.length} | Duration: {timeline.duration}s\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span>Zoom:</span>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => setTimeline(prev => ({ ...prev, duration: Math.max(10, prev.duration - 10) }))}\n                        data-testid=\"button-zoom-in\"\n                      >\n                        +\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => setTimeline(prev => ({ ...prev, duration: Math.min(300, prev.duration + 10) }))}\n                        data-testid=\"button-zoom-out\"\n                      >\n                        -\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Panel */}\n          <div className=\"space-y-4\">\n            <Tabs defaultValue=\"clip\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"clip\" data-testid=\"tab-clip\">Clip</TabsTrigger>\n                <TabsTrigger value=\"effects\" data-testid=\"tab-effects\">Effects</TabsTrigger>\n                <TabsTrigger value=\"ai\" data-testid=\"tab-ai\">AI</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"clip\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Clip Properties</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {selectedClip ? (\n                      <>\n                        <div>\n                          <label className=\"text-sm font-medium\">Name</label>\n                          <Input \n                            value={selectedClip.name}\n                            onChange={(e) => updateClip(selectedClip.id, { name: e.target.value })}\n                            data-testid=\"input-clip-name\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Start Time: {selectedClip.startTime}s</label>\n                          <Slider\n                            value={[selectedClip.startTime]}\n                            max={timeline.duration - selectedClip.duration}\n                            step={0.1}\n                            onValueChange={(value) => updateClip(selectedClip.id, { startTime: value[0] })}\n                            data-testid=\"slider-clip-start-time\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Duration: {selectedClip.duration}s</label>\n                          <Slider\n                            value={[selectedClip.duration]}\n                            min={0.1}\n                            max={10}\n                            step={0.1}\n                            onValueChange={(value) => updateClip(selectedClip.id, { duration: value[0] })}\n                            data-testid=\"slider-clip-duration\"\n                          />\n                        </div>\n                        {(selectedClip.type === 'video' || selectedClip.type === 'audio') && (\n                          <div>\n                            <label className=\"text-sm font-medium\">Volume: {Math.round(selectedClip.volume * 100)}%</label>\n                            <Slider\n                              value={[selectedClip.volume]}\n                              max={1}\n                              step={0.1}\n                              onValueChange={(value) => updateClip(selectedClip.id, { volume: value[0] })}\n                              data-testid=\"slider-clip-volume\"\n                            />\n                          </div>\n                        )}\n                        \n                        {selectedClip.type === 'image' && (\n                          <div className=\"space-y-4 pt-4 border-t\">\n                            <div>\n                              <label className=\"text-sm font-medium\">Image Source</label>\n                              <div className=\"mt-2 space-y-2\">\n                                <div>\n                                  <input\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    onChange={(e) => handleImageUpload(selectedClip.id, e)}\n                                    className=\"hidden\"\n                                    id={`image-upload-${selectedClip.id}`}\n                                    data-testid=\"input-image-upload\"\n                                  />\n                                  <Button\n                                    variant=\"outline\"\n                                    onClick={() => document.getElementById(`image-upload-${selectedClip.id}`)?.click()}\n                                    className=\"w-full\"\n                                    data-testid=\"button-upload-image\"\n                                  >\n                                    <Upload className=\"w-4 h-4 mr-2\" />\n                                    Upload Image\n                                  </Button>\n                                </div>\n                                \n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"flex-1 h-px bg-border\"></div>\n                                  <span className=\"text-xs text-muted-foreground\">OR</span>\n                                  <div className=\"flex-1 h-px bg-border\"></div>\n                                </div>\n                                \n                                <div className=\"space-y-2\">\n                                  <Input\n                                    placeholder=\"Describe the image you want AI to create...\"\n                                    value={selectedClip.aiPrompt || ''}\n                                    onChange={(e) => updateClip(selectedClip.id, { aiPrompt: e.target.value })}\n                                    data-testid=\"input-ai-image-prompt\"\n                                  />\n                                  <Button\n                                    variant=\"default\"\n                                    onClick={() => selectedClip.aiPrompt && generateAIImage(selectedClip.id, selectedClip.aiPrompt)}\n                                    disabled={!selectedClip.aiPrompt?.trim()}\n                                    className=\"w-full\"\n                                    data-testid=\"button-generate-ai-image\"\n                                  >\n                                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                                    Generate AI Image\n                                  </Button>\n                                </div>\n                              </div>\n                              \n                              {selectedClip.src && (\n                                <div className=\"mt-2 text-xs text-muted-foreground\">\n                                  ✓ Image uploaded\n                                </div>\n                              )}\n                              \n                              {selectedClip.aiPrompt && !selectedClip.src && (\n                                <div className=\"mt-2 text-xs text-muted-foreground\">\n                                  ✓ AI image: \"{selectedClip.aiPrompt}\"\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <p className=\"text-muted-foreground text-center py-4\">\n                        Select a clip to edit its properties\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"effects\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Palette className=\"w-5 h-5\" />\n                      Video Effects\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {selectedClip ? (\n                      <>\n                        <div>\n                          <label className=\"text-sm font-medium\">Brightness: {getEffectValue(selectedClip, 'brightness').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'brightness')]}\n                            min={0}\n                            max={2}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'brightness', value[0])}\n                            data-testid=\"slider-brightness\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Contrast: {getEffectValue(selectedClip, 'contrast').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'contrast')]}\n                            min={0}\n                            max={2}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'contrast', value[0])}\n                            data-testid=\"slider-contrast\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Saturation: {getEffectValue(selectedClip, 'saturation').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'saturation')]}\n                            min={0}\n                            max={2}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'saturation', value[0])}\n                            data-testid=\"slider-saturation\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Blur: {getEffectValue(selectedClip, 'blur').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'blur')]}\n                            min={0}\n                            max={2}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'blur', value[0])}\n                            data-testid=\"slider-blur\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Sepia: {getEffectValue(selectedClip, 'sepia').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'sepia')]}\n                            min={0}\n                            max={1}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'sepia', value[0])}\n                            data-testid=\"slider-sepia\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Grayscale: {getEffectValue(selectedClip, 'grayscale').toFixed(1)}</label>\n                          <Slider\n                            value={[getEffectValue(selectedClip, 'grayscale')]}\n                            min={0}\n                            max={1}\n                            step={0.1}\n                            onValueChange={(value) => updateEffectValue(selectedClip.id, 'grayscale', value[0])}\n                            data-testid=\"slider-grayscale\"\n                          />\n                        </div>\n                      </>\n                    ) : (\n                      <p className=\"text-muted-foreground text-center py-4\">\n                        Select a clip to adjust effects\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"ai\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Sparkles className=\"w-5 h-5\" />\n                      AI Assistant\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Textarea\n                      placeholder=\"Describe your video editing needs... (e.g., 'create a smooth transition between clips' or 'add cinematic color grading')\"\n                      value={aiPrompt}\n                      onChange={(e) => setAiPrompt(e.target.value)}\n                      data-testid=\"textarea-ai-prompt-video\"\n                    />\n                    <Button onClick={handleAIGeneration} className=\"w-full\" data-testid=\"button-generate-ai-video\">\n                      Generate AI Suggestions\n                    </Button>\n                    \n                    {aiSuggestions.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium\">AI Suggestions:</h4>\n                        {aiSuggestions.map((suggestion, index) => (\n                          <div key={index} className=\"p-3 bg-muted rounded-lg\">\n                            <p className=\"text-sm\" data-testid={`text-ai-suggestion-video-${index}`}>{suggestion}</p>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n            {/* Project Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Project Name</label>\n                  <Input\n                    value={projectName}\n                    onChange={(e) => setProjectName(e.target.value)}\n                    data-testid=\"input-video-project-name\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Duration: {timeline.duration}s</label>\n                  <Slider\n                    value={[timeline.duration]}\n                    min={10}\n                    max={300}\n                    onValueChange={(value) => setTimeline(prev => ({ ...prev, duration: value[0] }))}\n                    data-testid=\"slider-timeline-duration\"\n                  />\n                </div>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setClips([]);\n                    setCurrentTime(0);\n                    setSelectedClip(null);\n                  }}\n                  data-testid=\"button-clear-timeline\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Clear Timeline\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":60163},"client/src/lib/download-handlers.ts":{"content":"import { downloadBlob, toBlob, encodeWav, buildHtmlRunner } from './utils/export-utils';\nimport { projectManager } from './project-manager';\n\n// Download handlers for each creative tool\nexport const downloadHandlers = {\n  async downloadCode() {\n    const currentProject = projectManager.getCurrentProject();\n    const files = currentProject?.data.code || [];\n    \n    if (files.length === 0) {\n      alert('No code files to download');\n      return;\n    }\n    \n    // Create HTML runner\n    const htmlContent = buildHtmlRunner(files);\n    const htmlBlob = toBlob(htmlContent, 'text/html');\n    downloadBlob(htmlBlob, 'code-export.html');\n    \n    // Also export project data as JSON\n    const projectData = {\n      files,\n      projectName: currentProject?.name || 'Untitled Project',\n      exportedAt: new Date().toISOString()\n    };\n    const jsonBlob = toBlob(JSON.stringify(projectData, null, 2), 'application/json');\n    downloadBlob(jsonBlob, 'code-project.json');\n  },\n\n  async download3D() {\n    const currentProject = projectManager.getCurrentProject();\n    const sceneData = currentProject?.data.threeD || {};\n    \n    // Export scene as PNG snapshot (would need actual canvas)\n    // For now, export scene data as JSON\n    const sceneExport = {\n      scene: sceneData,\n      projectName: currentProject?.name || 'Untitled 3D Project',\n      exportedAt: new Date().toISOString()\n    };\n    \n    const jsonBlob = toBlob(JSON.stringify(sceneExport, null, 2), 'application/json');\n    downloadBlob(jsonBlob, '3d-scene.json');\n  },\n\n  async downloadMusic() {\n    const currentProject = projectManager.getCurrentProject();\n    const musicData = (currentProject?.data.musicTracks as any) || {};\n    \n    // Export music project data\n    const musicExport = {\n      tracks: musicData.tracks || [],\n      drumPattern: musicData.drumPattern || {},\n      bpm: musicData.bpm || 120,\n      projectName: musicData.projectName || 'Untitled Song',\n      exportedAt: new Date().toISOString()\n    };\n    \n    const jsonBlob = toBlob(JSON.stringify(musicExport, null, 2), 'application/json');\n    downloadBlob(jsonBlob, 'music-project.json');\n    \n    // TODO: Add actual WAV audio export using encodeWav\n    console.log('Audio export would render audio to WAV file');\n  },\n\n  async downloadVideo() {\n    const currentProject = projectManager.getCurrentProject();\n    const videoData = (currentProject?.data.video as any) || {};\n    \n    // Export video project data\n    const videoExport = {\n      timeline: videoData.timeline || [],\n      projectName: videoData.projectName || 'Untitled Video',\n      exportedAt: new Date().toISOString()\n    };\n    \n    const jsonBlob = toBlob(JSON.stringify(videoExport, null, 2), 'application/json');\n    downloadBlob(jsonBlob, 'video-project.json');\n    \n    // TODO: Add actual video export using MediaRecorder\n    console.log('Video export would render timeline to video file');\n  }\n};","size_bytes":2918},"client/src/lib/share-handlers.ts":{"content":"import { apiRequest } from './queryClient';\nimport { projectManager } from './project-manager';\n\n// Share handlers for each creative tool\nexport const shareHandlers = {\n  async shareCode(): Promise<string> {\n    const currentProject = projectManager.getCurrentProject();\n    const files = currentProject?.data.code || [];\n    \n    const shareData = {\n      tool: 'code' as const,\n      name: currentProject?.name || 'Untitled Code Project',\n      data: {\n        files,\n        projectName: currentProject?.name || 'Untitled Project'\n      }\n    };\n    \n    const response = await apiRequest('POST', '/api/share', shareData);\n    const result = await response.json();\n    \n    return result.url;\n  },\n\n  async share3D(): Promise<string> {\n    const currentProject = projectManager.getCurrentProject();\n    const sceneData = currentProject?.data.threeD || {};\n    \n    const shareData = {\n      tool: '3d' as const,\n      name: currentProject?.name || 'Untitled 3D Project',\n      data: {\n        scene: sceneData,\n        projectName: currentProject?.name || 'Untitled 3D Project'\n      }\n    };\n    \n    const response = await apiRequest('POST', '/api/share', shareData);\n    const result = await response.json();\n    \n    return result.url;\n  },\n\n  async shareMusic(): Promise<string> {\n    const currentProject = projectManager.getCurrentProject();\n    const musicData = (currentProject?.data.musicTracks as any) || {};\n    \n    const shareData = {\n      tool: 'music' as const,\n      name: musicData.projectName || 'Untitled Song',\n      data: {\n        tracks: musicData.tracks || [],\n        drumPattern: musicData.drumPattern || {},\n        bpm: musicData.bpm || 120,\n        projectName: musicData.projectName || 'Untitled Song'\n      }\n    };\n    \n    const response = await apiRequest('POST', '/api/share', shareData);\n    const result = await response.json();\n    \n    return result.url;\n  },\n\n  async shareVideo(): Promise<string> {\n    const currentProject = projectManager.getCurrentProject();\n    const videoData = currentProject?.data.video || {};\n    \n    const shareData = {\n      tool: 'video' as const,\n      name: videoData.projectName || 'Untitled Video',\n      data: {\n        timeline: videoData.timeline || [],\n        projectName: videoData.projectName || 'Untitled Video'\n      }\n    };\n    \n    const response = await apiRequest('POST', '/api/share', shareData);\n    const result = await response.json();\n    \n    return result.url;\n  }\n};\n\n// Utility function to copy URL to clipboard and show native share dialog\nexport async function shareUrl(url: string, title: string) {\n  // Try native Web Share API first\n  if (navigator.share) {\n    try {\n      await navigator.share({\n        title: title,\n        url: url\n      });\n      return;\n    } catch (error) {\n      // Fall back to clipboard\n    }\n  }\n  \n  // Fall back to copying to clipboard\n  try {\n    await navigator.clipboard.writeText(url);\n    alert(`Share link copied to clipboard: ${url}`);\n  } catch (error) {\n    // Final fallback: show URL in alert\n    alert(`Share URL: ${url}`);\n  }\n}","size_bytes":3079},"client/src/lib/utils/export-utils.ts":{"content":"// Utility functions for downloading and exporting content\n\nexport function downloadBlob(blob: Blob, filename: string) {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\nexport function toBlob(content: string, type: string = 'text/plain'): Blob {\n  return new Blob([content], { type });\n}\n\n// Encode PCM audio data to WAV format\nexport function encodeWav(audioBuffer: AudioBuffer): ArrayBuffer {\n  const numChannels = audioBuffer.numberOfChannels;\n  const sampleRate = audioBuffer.sampleRate;\n  const length = audioBuffer.length;\n  const arrayBuffer = new ArrayBuffer(44 + length * numChannels * 2);\n  const view = new DataView(arrayBuffer);\n\n  // WAV header\n  const writeString = (offset: number, string: string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n\n  writeString(0, 'RIFF');\n  view.setUint32(4, 36 + length * numChannels * 2, true);\n  writeString(8, 'WAVE');\n  writeString(12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, numChannels, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * numChannels * 2, true);\n  view.setUint16(32, numChannels * 2, true);\n  view.setUint16(34, 16, true);\n  writeString(36, 'data');\n  view.setUint32(40, length * numChannels * 2, true);\n\n  // Convert audio data\n  let offset = 44;\n  for (let i = 0; i < length; i++) {\n    for (let channel = 0; channel < numChannels; channel++) {\n      const channelData = audioBuffer.getChannelData(channel);\n      const sample = Math.max(-1, Math.min(1, channelData[i]));\n      view.setInt16(offset, sample * 0x7FFF, true);\n      offset += 2;\n    }\n  }\n\n  return arrayBuffer;\n}\n\n// Build a runnable HTML file from code files\nexport function buildHtmlRunner(files: { name: string; content: string; language: string }[]): string {\n  const jsFiles = files.filter(f => f.language === 'javascript' || f.name.endsWith('.js'));\n  const cssFiles = files.filter(f => f.language === 'css' || f.name.endsWith('.css'));\n  const htmlFiles = files.filter(f => f.language === 'html' || f.name.endsWith('.html'));\n\n  const mainHtml = htmlFiles.length > 0 ? htmlFiles[0].content : '';\n  const allJs = jsFiles.map(f => f.content).join('\\n\\n');\n  const allCss = cssFiles.map(f => f.content).join('\\n\\n');\n\n  if (mainHtml) {\n    // If there's HTML, inject CSS and JS\n    let html = mainHtml;\n    if (allCss) {\n      html = html.replace('</head>', `  <style>\\n${allCss}\\n  </style>\\n</head>`);\n    }\n    if (allJs) {\n      html = html.replace('</body>', `  <script>\\n${allJs}\\n  </script>\\n</body>`);\n    }\n    return html;\n  } else {\n    // Create a simple HTML wrapper\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>AI Code Export</title>\n  ${allCss ? `<style>\\n${allCss}\\n</style>` : ''}\n</head>\n<body>\n  <div id=\"app\">\n    <h1>AI Generated Code</h1>\n    <p>Open the browser console to see output</p>\n  </div>\n  ${allJs ? `<script>\\n${allJs}\\n</script>` : ''}\n</body>\n</html>`;\n  }\n}\n\n// Get URL search parameters\nexport function getUrlParams(): URLSearchParams {\n  return new URLSearchParams(window.location.search);\n}\n\n// Check if preview mode is enabled\nexport function isPreviewMode(): boolean {\n  return getUrlParams().get('preview') === '1';\n}","size_bytes":3552},"client/src/components/NotificationsDropdown.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Bell, \n  X, \n  Sparkles, \n  Users, \n  Download, \n  Share2,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning';\n  title: string;\n  message: string;\n  time: string;\n  isRead: boolean;\n}\n\ninterface NotificationsDropdownProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUnreadCountChange?: (count: number) => void;\n}\n\nexport default function NotificationsDropdown({ isOpen, onClose, onUnreadCountChange }: NotificationsDropdownProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, isRead: true }\n          : notification\n      );\n      const newUnreadCount = updated.filter(n => !n.isRead).length;\n      onUnreadCountChange?.(newUnreadCount);\n      return updated;\n    });\n  };\n\n  const markAllAsRead = () => {\n    console.log('Mark all as read clicked'); // Debug log\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, isRead: true }));\n      onUnreadCountChange?.(0);\n      return updated;\n    });\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-4 h-4 text-yellow-600\" />;\n      default:\n        return <Sparkles className=\"w-4 h-4 text-blue-600\" />;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"absolute top-full right-0 mt-2 w-80 z-[60]\">\n      <Card className=\"shadow-lg border\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Bell className=\"w-4 h-4\" />\n            <CardTitle className=\"text-base\">Notifications</CardTitle>\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs px-2 py-0.5\">\n                {unreadCount}\n              </Badge>\n            )}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            {unreadCount > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-xs h-7 px-2\"\n                onClick={markAllAsRead}\n                data-testid=\"button-mark-all-read\"\n              >\n                Mark all read\n              </Button>\n            )}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"w-7 h-7\"\n              onClick={onClose}\n              data-testid=\"button-close-notifications\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[400px]\">\n            <div className=\"space-y-1 p-3\">\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Bell className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p>No notifications yet</p>\n                </div>\n              ) : (\n                notifications.map((notification) => (\n                  <div\n                    key={notification.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-colors hover-elevate ${\n                      !notification.isRead ? 'bg-primary/5 border-primary/20' : 'hover:bg-muted/50'\n                    }`}\n                    onClick={() => markAsRead(notification.id)}\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-0.5\">\n                        {getIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1 space-y-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium\">\n                            {notification.title}\n                          </h4>\n                          {!notification.isRead && (\n                            <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                          )}\n                        </div>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground opacity-75\">\n                          {notification.time}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5305},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  User, \n  Settings, \n  Bell, \n  Shield, \n  Palette, \n  Save,\n  Camera,\n  Mail,\n  Calendar,\n  MapPin\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const [userData, setUserData] = useState({\n    name: \"Creative User\",\n    email: \"user@creativestudio.com\",\n    bio: \"Digital artist and creative professional\",\n    location: \"San Francisco, CA\",\n    joinDate: \"January 2024\"\n  });\n\n  const [preferences, setPreferences] = useState({\n    emailNotifications: true,\n    pushNotifications: false,\n    weeklyDigest: true\n  });\n\n  const handleSaveProfile = () => {\n    console.log('Saving profile...', userData);\n    // Here you would typically save to backend\n  };\n\n  const handleSavePreferences = () => {\n    console.log('Saving preferences...', preferences);\n    // Here you would typically save to backend\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"heading-profile\">Your Profile</h1>\n          <p className=\"text-muted-foreground\">Manage your account settings and preferences</p>\n        </div>\n\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"preferences\" data-testid=\"tab-preferences\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Preferences\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" data-testid=\"tab-activity\">\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Activity\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center gap-6\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-20 h-20\" data-testid=\"avatar-profile\">\n                      <AvatarImage src=\"/api/placeholder/80/80\" alt=\"Profile\" />\n                      <AvatarFallback>\n                        <User className=\"w-8 h-8\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <Button \n                      size=\"icon\" \n                      variant=\"outline\" \n                      className=\"absolute -bottom-2 -right-2 w-8 h-8\"\n                      data-testid=\"button-change-avatar\"\n                    >\n                      <Camera className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">{userData.name}</h3>\n                    <p className=\"text-muted-foreground\">{userData.email}</p>\n                    <Badge variant=\"secondary\" className=\"mt-2\">\n                      Member since {userData.joinDate}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"grid gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={userData.name}\n                      onChange={(e) => setUserData(prev => ({ ...prev, name: e.target.value }))}\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        id=\"email\"\n                        value={userData.email}\n                        onChange={(e) => setUserData(prev => ({ ...prev, email: e.target.value }))}\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Input\n                      id=\"bio\"\n                      value={userData.bio}\n                      onChange={(e) => setUserData(prev => ({ ...prev, bio: e.target.value }))}\n                      placeholder=\"Tell us about yourself...\"\n                      data-testid=\"input-bio\"\n                    />\n                  </div>\n\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"location\">Location</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        id=\"location\"\n                        value={userData.location}\n                        onChange={(e) => setUserData(prev => ({ ...prev, location: e.target.value }))}\n                        data-testid=\"input-location\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Button onClick={handleSaveProfile} className=\"w-full\" data-testid=\"button-save-profile\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Profile\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Preferences Tab */}\n          <TabsContent value=\"preferences\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Notification Preferences</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Email Notifications</h4>\n                    <p className=\"text-sm text-muted-foreground\">Get notified about new features and updates</p>\n                  </div>\n                  <Button\n                    variant={preferences.emailNotifications ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPreferences(prev => ({ ...prev, emailNotifications: !prev.emailNotifications }))}\n                    data-testid=\"toggle-email-notifications\"\n                  >\n                    {preferences.emailNotifications ? \"On\" : \"Off\"}\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Push Notifications</h4>\n                    <p className=\"text-sm text-muted-foreground\">Get browser notifications for important updates</p>\n                  </div>\n                  <Button\n                    variant={preferences.pushNotifications ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPreferences(prev => ({ ...prev, pushNotifications: !prev.pushNotifications }))}\n                    data-testid=\"toggle-push-notifications\"\n                  >\n                    {preferences.pushNotifications ? \"On\" : \"Off\"}\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Weekly Digest</h4>\n                    <p className=\"text-sm text-muted-foreground\">Receive a weekly summary of your activity</p>\n                  </div>\n                  <Button\n                    variant={preferences.weeklyDigest ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPreferences(prev => ({ ...prev, weeklyDigest: !prev.weeklyDigest }))}\n                    data-testid=\"toggle-weekly-digest\"\n                  >\n                    {preferences.weeklyDigest ? \"On\" : \"Off\"}\n                  </Button>\n                </div>\n\n                <Button onClick={handleSavePreferences} className=\"w-full\" data-testid=\"button-save-preferences\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Preferences\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n                      <Palette className=\"w-4 h-4 text-primary-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">Created new 3D project</p>\n                      <p className=\"text-sm text-muted-foreground\">2 hours ago</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-8 h-8 bg-purple-600 rounded-md flex items-center justify-center\">\n                      <User className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">Updated profile information</p>\n                      <p className=\"text-sm text-muted-foreground\">1 day ago</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-8 h-8 bg-green-600 rounded-md flex items-center justify-center\">\n                      <Shield className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">Account created</p>\n                      <p className=\"text-sm text-muted-foreground\">January 2024</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":11026},"client/src/components/SearchDropdown.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\nimport { projectManager } from \"@/lib/project-manager\";\nimport { \n  Search, \n  FileText, \n  Box, \n  Music, \n  Video,\n  ArrowRight,\n  Clock\n} from \"lucide-react\";\n\ninterface SearchResult {\n  id: string;\n  name: string;\n  description: string;\n  type: 'code' | '3d' | 'music' | 'video';\n  createdAt: Date;\n  matchReason: string;\n}\n\ninterface SearchDropdownProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function SearchDropdown({ isOpen, onClose }: SearchDropdownProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const [, navigate] = useLocation();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-focus search input when opened\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('creativestudio-recent-searches');\n    if (saved) {\n      setRecentSearches(JSON.parse(saved));\n    }\n  }, []);\n\n  // Save recent searches to localStorage\n  const saveRecentSearch = (query: string) => {\n    const updated = [query, ...recentSearches.filter(s => s !== query)].slice(0, 5);\n    setRecentSearches(updated);\n    localStorage.setItem('creativestudio-recent-searches', JSON.stringify(updated));\n  };\n\n  // Perform search\n  useEffect(() => {\n    if (searchQuery.trim().length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    const projects = projectManager.searchProjects(searchQuery);\n    const results: SearchResult[] = projects.map(project => {\n      // Determine project type based on tools\n      let type: 'code' | '3d' | 'music' | 'video' = 'code';\n      if (project.tools.includes('3D Designer')) type = '3d';\n      else if (project.tools.includes('Music Studio')) type = 'music';\n      else if (project.tools.includes('Video Editor')) type = 'video';\n\n      // Determine match reason\n      let matchReason = '';\n      if (project.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n        matchReason = 'Title match';\n      } else if (project.description.toLowerCase().includes(searchQuery.toLowerCase())) {\n        matchReason = 'Description match';\n      } else {\n        matchReason = 'Tool match';\n      }\n\n      return {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        type,\n        createdAt: project.createdAt,\n        matchReason\n      };\n    });\n\n    setSearchResults(results);\n  }, [searchQuery]);\n\n  const handleResultClick = (result: SearchResult) => {\n    saveRecentSearch(searchQuery);\n    onClose();\n    \n    // Navigate to the appropriate tool with the project\n    const toolRoutes = {\n      code: '/code',\n      '3d': '/3d',\n      music: '/music',\n      video: '/video'\n    };\n    \n    // Set current project and navigate\n    projectManager.setCurrentProject(result.id);\n    navigate(toolRoutes[result.type]);\n  };\n\n  const handleRecentSearchClick = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'code':\n        return <FileText className=\"w-4 h-4 text-blue-600\" />;\n      case '3d':\n        return <Box className=\"w-4 h-4 text-purple-600\" />;\n      case 'music':\n        return <Music className=\"w-4 h-4 text-green-600\" />;\n      case 'video':\n        return <Video className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <FileText className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      code: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n      '3d': \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n      music: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n      video: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n    };\n    \n    return (\n      <Badge variant=\"secondary\" className={`text-xs ${colors[type as keyof typeof colors] || ''}`}>\n        {type.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 mt-2 w-96 z-[60]\">\n      <Card className=\"shadow-lg border\">\n        <CardContent className=\"p-0\">\n          <div className=\"p-4 border-b\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n              <Input\n                ref={inputRef}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search projects, tools, and content...\"\n                className=\"pl-10 pr-4\"\n                data-testid=\"input-global-search\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Escape') {\n                    onClose();\n                  }\n                }}\n              />\n            </div>\n          </div>\n\n          <ScrollArea className=\"max-h-[400px]\">\n            {searchQuery.trim().length < 2 ? (\n              <div className=\"p-4\">\n                {recentSearches.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-medium text-muted-foreground\">Recent Searches</h4>\n                    <div className=\"space-y-1\">\n                      {recentSearches.map((query, index) => (\n                        <button\n                          key={index}\n                          onClick={() => handleRecentSearchClick(query)}\n                          className=\"flex items-center gap-2 w-full p-2 text-left rounded-lg hover-elevate text-sm\"\n                          data-testid={`recent-search-${index}`}\n                        >\n                          <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                          <span>{query}</span>\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Search className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Start typing to search your projects</p>\n                  </div>\n                )}\n              </div>\n            ) : searchResults.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Search className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">No results found for \"{searchQuery}\"</p>\n                <p className=\"text-xs mt-1\">Try searching for project names, descriptions, or tools</p>\n              </div>\n            ) : (\n              <div className=\"p-2 space-y-1\">\n                {searchResults.map((result) => (\n                  <button\n                    key={result.id}\n                    onClick={() => handleResultClick(result)}\n                    className=\"w-full p-3 text-left rounded-lg hover-elevate border border-transparent hover:border-border transition-colors\"\n                    data-testid={`search-result-${result.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-0.5\">\n                        {getTypeIcon(result.type)}\n                      </div>\n                      <div className=\"flex-1 space-y-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium\">{result.name}</h4>\n                          <ArrowRight className=\"w-3 h-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\" />\n                        </div>\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {result.description}\n                        </p>\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeBadge(result.type)}\n                          <span className=\"text-xs text-muted-foreground\">\n                            {result.matchReason}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8879},"client/src/components/TerminalPanel.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport \"xterm/css/xterm.css\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Play, Square, Trash2, Copy } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface TerminalPanelProps {\n  isVisible: boolean;\n  onToggle: () => void;\n  isRunning: boolean;\n  onRun: () => void;\n  onStop: () => void;\n  htmlContent?: string;\n}\n\nexport default function TerminalPanel({ \n  isVisible, \n  onToggle, \n  isRunning, \n  onRun, \n  onStop,\n  htmlContent \n}: TerminalPanelProps) {\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const terminalInstance = useRef<Terminal | null>(null);\n  const fitAddon = useRef<FitAddon | null>(null);\n  const [activeTab, setActiveTab] = useState(\"terminal\");\n  const [exitCode, setExitCode] = useState<number | null>(null);\n  const [executionTime, setExecutionTime] = useState<number | null>(null);\n  \n  // Handle terminal fitting when switching back to terminal tab\n  useEffect(() => {\n    if (activeTab === \"terminal\" && fitAddon.current && isVisible) {\n      // Small delay to ensure DOM is ready\n      setTimeout(() => {\n        fitAddon.current?.fit();\n      }, 100);\n    }\n  }, [activeTab, isVisible]);\n\n  useEffect(() => {\n    if (isVisible && terminalRef.current && !terminalInstance.current) {\n      // Initialize terminal\n      const terminal = new Terminal({\n        fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace',\n        fontSize: 13,\n        theme: {\n          background: '#0D1117',\n          foreground: '#F0F6FC',\n          cursor: '#79C0FF',\n          selectionBackground: '#264F78'\n        },\n        cursorBlink: true,\n        allowTransparency: true\n      });\n      \n      // Initialize fit addon\n      const fit = new FitAddon();\n      terminal.loadAddon(fit);\n      \n      // Open terminal\n      terminal.open(terminalRef.current);\n      fit.fit();\n      \n      // Store references\n      terminalInstance.current = terminal;\n      fitAddon.current = fit;\n      \n      // Welcome message\n      terminal.writeln('\\x1b[36mWelcome to AI Code Editor Terminal\\x1b[0m');\n      terminal.writeln('\\x1b[90mClick Run to execute your code\\x1b[0m');\n      terminal.writeln('');\n    }\n    \n    // Only dispose when panel is completely hidden, not when switching tabs\n    return () => {\n      if (terminalInstance.current && !isVisible) {\n        terminalInstance.current.dispose();\n        terminalInstance.current = null;\n        fitAddon.current = null;\n      }\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (fitAddon.current && isVisible) {\n        setTimeout(() => fitAddon.current?.fit(), 100);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isVisible]);\n\n  const clearTerminal = () => {\n    if (terminalInstance.current) {\n      terminalInstance.current.clear();\n      setExitCode(null);\n      setExecutionTime(null);\n    }\n  };\n\n  const copyOutput = async () => {\n    if (terminalInstance.current) {\n      const selection = terminalInstance.current.getSelection();\n      if (selection) {\n        await navigator.clipboard.writeText(selection);\n      }\n    }\n  };\n\n  const writeToTerminal = (text: string, type: 'stdout' | 'stderr' | 'info' = 'stdout') => {\n    if (!terminalInstance.current) return;\n    \n    const colors = {\n      stdout: '\\x1b[37m', // white\n      stderr: '\\x1b[31m', // red\n      info: '\\x1b[36m'    // cyan\n    };\n    \n    terminalInstance.current.writeln(`${colors[type]}${text}\\x1b[0m`);\n  };\n\n  const writePrompt = () => {\n    if (terminalInstance.current) {\n      terminalInstance.current.write('\\x1b[32m$ \\x1b[0m');\n    }\n  };\n\n  // Expose terminal writing methods\n  useEffect(() => {\n    // Make writeToTerminal available globally for runners\n    (window as any).writeToTerminal = writeToTerminal;\n    (window as any).writePrompt = writePrompt;\n    (window as any).setTerminalExitCode = (code: number, time: number) => {\n      setExitCode(code);\n      setExecutionTime(time);\n    };\n  }, []);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"border-t bg-background\" style={{ height: '300px' }}>\n      <div className=\"flex items-center justify-between p-2 border-b bg-muted/30\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            onClick={onRun}\n            disabled={isRunning}\n            data-testid=\"terminal-run-button\"\n          >\n            <Play className=\"w-3 h-3 mr-1\" />\n            Run\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={onStop}\n            disabled={!isRunning}\n            data-testid=\"terminal-stop-button\"\n          >\n            <Square className=\"w-3 h-3 mr-1\" />\n            Stop\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={clearTerminal}\n            data-testid=\"terminal-clear-button\"\n          >\n            <Trash2 className=\"w-3 h-3 mr-1\" />\n            Clear\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={copyOutput}\n            data-testid=\"terminal-copy-button\"\n          >\n            <Copy className=\"w-3 h-3 mr-1\" />\n            Copy\n          </Button>\n        </div>\n        \n        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n          {executionTime !== null && (\n            <span>Runtime: {executionTime}ms</span>\n          )}\n          {exitCode !== null && (\n            <span className={exitCode === 0 ? 'text-green-500' : 'text-red-500'}>\n              Exit: {exitCode}\n            </span>\n          )}\n          {isRunning && (\n            <span className=\"text-yellow-500\">Running...</span>\n          )}\n        </div>\n      </div>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full flex flex-col\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"terminal\" data-testid=\"tab-terminal\">Terminal</TabsTrigger>\n          <TabsTrigger value=\"webview\" data-testid=\"tab-webview\">Output</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"terminal\" className=\"flex-1 p-0\" forceMount>\n          <div \n            ref={terminalRef} \n            className={`h-full w-full ${activeTab !== \"terminal\" ? \"hidden\" : \"\"}`}\n            data-testid=\"terminal-content\"\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"webview\" className=\"flex-1 p-1\" forceMount>\n          <div className={activeTab !== \"webview\" ? \"hidden\" : \"h-full\"}>\n            <Card className=\"h-full\">\n              {htmlContent ? (\n                <iframe\n                  srcDoc={htmlContent}\n                  sandbox=\"allow-scripts allow-same-origin\"\n                  className=\"w-full h-full border-0 rounded\"\n                  title=\"Code Output\"\n                  data-testid=\"output-iframe\"\n                />\n              ) : (\n                <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                  No visual output\n                </div>\n              )}\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":7502},"client/src/lib/runners/jsRunner.ts":{"content":"// JavaScript Code Runner using Web Worker\nexport class JavaScriptRunner {\n  private worker: Worker | null = null;\n  private isRunning = false;\n  private startTime = 0;\n\n  async runCode(code: string): Promise<void> {\n    if (this.isRunning) {\n      this.stop();\n    }\n\n    this.isRunning = true;\n    this.startTime = Date.now();\n    \n    // Write execution start to terminal\n    this.writeToTerminal('$ node main.js', 'info');\n    \n    try {\n      // Create a worker with the code to execute\n      const workerCode = `\n        // Intercept console methods\n        const originalConsole = {\n          log: console.log,\n          error: console.error,\n          warn: console.warn,\n          info: console.info\n        };\n        \n        console.log = (...args) => {\n          self.postMessage({ type: 'stdout', data: args.map(arg => String(arg)).join(' ') });\n        };\n        \n        console.error = (...args) => {\n          self.postMessage({ type: 'stderr', data: args.map(arg => String(arg)).join(' ') });\n        };\n        \n        console.warn = (...args) => {\n          self.postMessage({ type: 'stdout', data: 'WARNING: ' + args.map(arg => String(arg)).join(' ') });\n        };\n        \n        console.info = (...args) => {\n          self.postMessage({ type: 'stdout', data: 'INFO: ' + args.map(arg => String(arg)).join(' ') });\n        };\n        \n        // Global error handler\n        self.addEventListener('error', (event) => {\n          self.postMessage({ \n            type: 'stderr', \n            data: \\`Error: \\${event.message} at line \\${event.lineno}\\`\n          });\n        });\n        \n        // Execute the user code\n        try {\n          ${code}\n          self.postMessage({ type: 'completed', exitCode: 0 });\n        } catch (error) {\n          self.postMessage({ \n            type: 'stderr', \n            data: \\`Runtime Error: \\${error.message}\\` \n          });\n          self.postMessage({ type: 'completed', exitCode: 1 });\n        }\n      `;\n      \n      const blob = new Blob([workerCode], { type: 'application/javascript' });\n      this.worker = new Worker(URL.createObjectURL(blob));\n      \n      // Handle worker messages\n      this.worker.onmessage = (event) => {\n        const { type, data, exitCode } = event.data;\n        \n        switch (type) {\n          case 'stdout':\n            this.writeToTerminal(data, 'stdout');\n            break;\n          case 'stderr':\n            this.writeToTerminal(data, 'stderr');\n            break;\n          case 'completed':\n            this.handleCompletion(exitCode || 0);\n            break;\n        }\n      };\n      \n      // Handle worker errors\n      this.worker.onerror = (error) => {\n        this.writeToTerminal(`Worker Error: ${error.message}`, 'stderr');\n        this.handleCompletion(1);\n      };\n      \n      // Set timeout for execution (30 seconds)\n      setTimeout(() => {\n        if (this.isRunning) {\n          this.writeToTerminal('Execution timeout (30s)', 'stderr');\n          this.stop();\n        }\n      }, 30000);\n      \n    } catch (error) {\n      this.writeToTerminal(`Failed to start execution: ${error}`, 'stderr');\n      this.handleCompletion(1);\n    }\n  }\n  \n  stop(): void {\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    if (this.isRunning) {\n      this.writeToTerminal('Execution stopped by user', 'info');\n      this.handleCompletion(130); // SIGINT exit code\n    }\n  }\n  \n  private handleCompletion(exitCode: number): void {\n    this.isRunning = false;\n    const executionTime = Date.now() - this.startTime;\n    \n    // Clean up worker\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    // Update terminal with completion info\n    this.writeToTerminal('', 'stdout'); // Empty line\n    this.setTerminalExitCode(exitCode, executionTime);\n    this.writePrompt();\n  }\n  \n  private writeToTerminal(text: string, type: 'stdout' | 'stderr' | 'info'): void {\n    if ((window as any).writeToTerminal) {\n      (window as any).writeToTerminal(text, type);\n    }\n  }\n  \n  private writePrompt(): void {\n    if ((window as any).writePrompt) {\n      (window as any).writePrompt();\n    }\n  }\n  \n  private setTerminalExitCode(code: number, time: number): void {\n    if ((window as any).setTerminalExitCode) {\n      (window as any).setTerminalExitCode(code, time);\n    }\n  }\n  \n  isCodeRunning(): boolean {\n    return this.isRunning;\n  }\n}","size_bytes":4430},"client/src/lib/runners/pythonRunner.ts":{"content":"// Python Code Runner using Pyodide WebAssembly\nexport class PythonRunner {\n  private worker: Worker | null = null;\n  private isRunning = false;\n  private startTime = 0;\n\n  async runCode(code: string): Promise<void> {\n    if (this.isRunning) {\n      this.stop();\n    }\n\n    this.isRunning = true;\n    this.startTime = Date.now();\n    \n    // Write execution start to terminal\n    this.writeToTerminal('$ python main.py', 'info');\n    this.writeToTerminal('Loading Python environment...', 'info');\n    \n    try {\n      // Create a worker with Pyodide\n      const workerCode = `\n        let pyodide = null;\n        let loading = false;\n        \n        async function initPyodide() {\n          if (pyodide || loading) return pyodide;\n          \n          loading = true;\n          self.postMessage({ type: 'info', data: 'Downloading Python runtime...' });\n          \n          try {\n            // Load Pyodide from CDN\n            self.importScripts('https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js');\n            pyodide = await self.loadPyodide({ \n              indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.24.1/full/' \n            });\n            \n            // Redirect stdout and stderr using Pyodide's API\n            pyodide.setStdout({ \n              batched: (s) => self.postMessage({ type: 'stdout', data: s }) \n            });\n            pyodide.setStderr({ \n              batched: (s) => self.postMessage({ type: 'stderr', data: s }) \n            });\n            \n            self.postMessage({ type: 'info', data: 'Python environment ready!' });\n            return pyodide;\n          } catch (error) {\n            self.postMessage({ \n              type: 'stderr', \n              data: \\`Failed to load Python: \\${error.message}\\` \n            });\n            throw error;\n          } finally {\n            loading = false;\n          }\n        }\n        \n        self.addEventListener('message', async (event) => {\n          const { code } = event.data;\n          \n          try {\n            if (!pyodide) {\n              await initPyodide();\n            }\n            \n            // Execute the user code\n            await pyodide.runPythonAsync(code);\n            self.postMessage({ type: 'completed', exitCode: 0 });\n            \n          } catch (error) {\n            self.postMessage({ \n              type: 'stderr', \n              data: \\`Python Error: \\${error.message}\\` \n            });\n            self.postMessage({ type: 'completed', exitCode: 1 });\n          }\n        });\n        \n        // Global error handler\n        self.addEventListener('error', (event) => {\n          self.postMessage({ \n            type: 'stderr', \n            data: \\`Worker Error: \\${event.message}\\`\n          });\n          self.postMessage({ type: 'completed', exitCode: 1 });\n        });\n      `;\n      \n      const blob = new Blob([workerCode], { type: 'application/javascript' });\n      this.worker = new Worker(URL.createObjectURL(blob));\n      \n      // Handle worker messages\n      this.worker.onmessage = (event) => {\n        const { type, data, exitCode } = event.data;\n        \n        switch (type) {\n          case 'stdout':\n            this.writeToTerminal(data, 'stdout');\n            break;\n          case 'stderr':\n            this.writeToTerminal(data, 'stderr');\n            break;\n          case 'info':\n            this.writeToTerminal(data, 'info');\n            break;\n          case 'completed':\n            this.handleCompletion(exitCode || 0);\n            break;\n        }\n      };\n      \n      // Handle worker errors\n      this.worker.onerror = (error) => {\n        this.writeToTerminal(`Worker Error: ${error.message}`, 'stderr');\n        this.handleCompletion(1);\n      };\n      \n      // Send code to worker\n      this.worker.postMessage({ code });\n      \n      // Set timeout for execution (60 seconds for Python due to initial load)\n      setTimeout(() => {\n        if (this.isRunning) {\n          this.writeToTerminal('Execution timeout (60s)', 'stderr');\n          this.stop();\n        }\n      }, 60000);\n      \n    } catch (error) {\n      this.writeToTerminal(`Failed to start Python execution: ${error}`, 'stderr');\n      this.handleCompletion(1);\n    }\n  }\n  \n  stop(): void {\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    if (this.isRunning) {\n      this.writeToTerminal('Python execution stopped by user', 'info');\n      this.handleCompletion(130); // SIGINT exit code\n    }\n  }\n  \n  private handleCompletion(exitCode: number): void {\n    this.isRunning = false;\n    const executionTime = Date.now() - this.startTime;\n    \n    // Clean up worker\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    // Update terminal with completion info\n    this.writeToTerminal('', 'stdout'); // Empty line\n    this.setTerminalExitCode(exitCode, executionTime);\n    this.writePrompt();\n  }\n  \n  private writeToTerminal(text: string, type: 'stdout' | 'stderr' | 'info'): void {\n    if ((window as any).writeToTerminal) {\n      (window as any).writeToTerminal(text, type);\n    }\n  }\n  \n  private writePrompt(): void {\n    if ((window as any).writePrompt) {\n      (window as any).writePrompt();\n    }\n  }\n  \n  private setTerminalExitCode(code: number, time: number): void {\n    if ((window as any).setTerminalExitCode) {\n      (window as any).setTerminalExitCode(code, time);\n    }\n  }\n  \n  isCodeRunning(): boolean {\n    return this.isRunning;\n  }\n}","size_bytes":5481}},"version":1}